[
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZhadhtata_narrow_M-1000_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 48800,
      "number_files": 9,
      "size": 1690479816
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00330\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00330_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00330_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_16_patch1/src ] ; then\n  echo release CMSSW_7_1_16_patch1 already exists\nelse\n  scram p CMSSW CMSSW_7_1_16_patch1\nfi\ncd CMSSW_7_1_16_patch1/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-00330 --retry 3 --create-dirs -o Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00330-fragment.py\n[ -s Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00330-fragment.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00330-fragment.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00330-fragment.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.0662s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.0662s = 0.0662s\n# Which adds up to 0.0662s per event\n# Single core events that fit in validation duration: 20160s / 0.0662s = 304607\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 304607 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00330-fragment.py --python_filename EXO-RunIIWinter15wmLHE-00330_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00330.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00330_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00330_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00330_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00330 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00330_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00330_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00330_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21978/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21978/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21978/run_card.dat"
            },
            {
              "cms_confdb_id": "553dbcab272e0eb326515e636c4109c1",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZhadhtata_narrow_M-1000_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_16_patch1",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-03489\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-03489_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-03489_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/bad2b558a300e23343f2e199861b2c7223e888fc/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 38.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 38.0000s = 38.0000s\n# Which adds up to 38.0000s per event\n# Single core events that fit in validation duration: 20160s / 38.0000s = 530\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 530 and 10000, but more than 0 -> 530\n# It is estimated that this validation will produce: 530 * 1.0000 = 530 events\nEVENTS=530\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-03489_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-03489.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZhadhtata_narrow_M-1000_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-03489_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-03489_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-03489_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-03489 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-03489_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-03489_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-03489_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\n\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n    maxEventsToPrint = cms.untracked.int32(1),\n    pythiaPylistVerbosity = cms.untracked.int32(1),\n    filterEfficiency = cms.untracked.double(1.0),\n    pythiaHepMCVerbosity = cms.untracked.bool(False),\n    comEnergy = cms.double(13000.),\n    PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    )\n    )\n)\n\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/bad2b558a300e23343f2e199861b2c7223e888fc/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "fcaa5f7a3e84590b266cbc5dfa7987c2",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZhadhtata_narrow_M-1000_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_20",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-04500_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-04500_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-04500_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-04500_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZhadhtata_narrow_M-1000_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-04500_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-04500_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-04500_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-04500 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-04500_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-04500.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-04500_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-04500_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-04500_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-04500_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-04500 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-04500_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-04500_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-04500_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "05de83440aa40dc39e58916baa3c53cf",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "05de83440aa40dc39e58916baa3e92b9",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZhadhtata_narrow_M-1000_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-04362_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-04362_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-04362_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-04362.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein file:EXO-RunIIFall15DR76-04500.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-04362_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-04362_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-04362_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-04362 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-04362_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-04362_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-04362_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "dcc51d9e5ca8e89ff5c2d82cd6096fb2",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZhadhtata_narrow_M-1000_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21978",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZhadhtata_narrow_M-1000_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZhadhtata_narrow_M-1000_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZhadhtata_narrow_M-1200_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 50000,
      "number_files": 2,
      "size": 1695262005
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00331\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00331_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00331_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_16_patch1/src ] ; then\n  echo release CMSSW_7_1_16_patch1 already exists\nelse\n  scram p CMSSW CMSSW_7_1_16_patch1\nfi\ncd CMSSW_7_1_16_patch1/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-00331 --retry 3 --create-dirs -o Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00331-fragment.py\n[ -s Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00331-fragment.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00331-fragment.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00331-fragment.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.1550s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.1550s = 0.1550s\n# Which adds up to 0.1550s per event\n# Single core events that fit in validation duration: 20160s / 0.1550s = 130030\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 130030 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00331-fragment.py --python_filename EXO-RunIIWinter15wmLHE-00331_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00331.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00331_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00331_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00331_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00331 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00331_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00331_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00331_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21979/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21979/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21979/run_card.dat"
            },
            {
              "cms_confdb_id": "553dbcab272e0eb326515e636c40a025",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZhadhtata_narrow_M-1200_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_16_patch1",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-03490\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-03490_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-03490_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/bad2b558a300e23343f2e199861b2c7223e888fc/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 43.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 43.0000s = 43.0000s\n# Which adds up to 43.0000s per event\n# Single core events that fit in validation duration: 20160s / 43.0000s = 468\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 468 and 10000, but more than 0 -> 468\n# It is estimated that this validation will produce: 468 * 1.0000 = 468 events\nEVENTS=468\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-03490_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-03490.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZhadhtata_narrow_M-1200_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-03490_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-03490_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-03490_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-03490 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-03490_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-03490_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-03490_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\n\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n    maxEventsToPrint = cms.untracked.int32(1),\n    pythiaPylistVerbosity = cms.untracked.int32(1),\n    filterEfficiency = cms.untracked.double(1.0),\n    pythiaHepMCVerbosity = cms.untracked.bool(False),\n    comEnergy = cms.double(13000.),\n    PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    )\n    )\n)\n\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/bad2b558a300e23343f2e199861b2c7223e888fc/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "fcaa5f7a3e84590b266cbc5dfa7987c2",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZhadhtata_narrow_M-1200_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_20",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-04523_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-04523_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-04523_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-04523_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZhadhtata_narrow_M-1200_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-04523_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-04523_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-04523_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-04523 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-04523_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-04523.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-04523_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-04523_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-04523_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-04523_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-04523 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-04523_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-04523_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-04523_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "eefb664fc15594f8fa821eb93a6d99d8",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "eefb664fc15594f8fa821eb93a84a3a8",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZhadhtata_narrow_M-1200_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-04385_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-04385_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-04385_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-04385.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein file:EXO-RunIIFall15DR76-04523.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-04385_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-04385_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-04385_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-04385 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-04385_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-04385_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-04385_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "eefb664fc15594f8fa821eb93a9cb774",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZhadhtata_narrow_M-1200_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21979",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZhadhtata_narrow_M-1200_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZhadhtata_narrow_M-1200_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZhadhtata_narrow_M-1600_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 47200,
      "number_files": 13,
      "size": 1651200928
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00333\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00333_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00333_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_16_patch1/src ] ; then\n  echo release CMSSW_7_1_16_patch1 already exists\nelse\n  scram p CMSSW CMSSW_7_1_16_patch1\nfi\ncd CMSSW_7_1_16_patch1/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-00333 --retry 3 --create-dirs -o Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00333-fragment.py\n[ -s Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00333-fragment.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00333-fragment.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00333-fragment.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.0676s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.0676s = 0.0676s\n# Which adds up to 0.0676s per event\n# Single core events that fit in validation duration: 20160s / 0.0676s = 298093\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 298093 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00333-fragment.py --python_filename EXO-RunIIWinter15wmLHE-00333_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00333.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00333_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00333_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00333_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00333 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00333_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00333_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00333_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21980/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21980/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21980/run_card.dat"
            },
            {
              "cms_confdb_id": "553dbcab272e0eb326515e636c3738bd",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZhadhtata_narrow_M-1600_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_16_patch1",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-03492\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-03492_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-03492_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/bad2b558a300e23343f2e199861b2c7223e888fc/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 70.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 70.0000s = 70.0000s\n# Which adds up to 70.0000s per event\n# Single core events that fit in validation duration: 20160s / 70.0000s = 288\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 288 and 10000, but more than 0 -> 288\n# It is estimated that this validation will produce: 288 * 1.0000 = 288 events\nEVENTS=288\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-03492_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-03492.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZhadhtata_narrow_M-1600_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-03492_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-03492_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-03492_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-03492 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-03492_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-03492_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-03492_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\n\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n    maxEventsToPrint = cms.untracked.int32(1),\n    pythiaPylistVerbosity = cms.untracked.int32(1),\n    filterEfficiency = cms.untracked.double(1.0),\n    pythiaHepMCVerbosity = cms.untracked.bool(False),\n    comEnergy = cms.double(13000.),\n    PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    )\n    )\n)\n\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/bad2b558a300e23343f2e199861b2c7223e888fc/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "fcaa5f7a3e84590b266cbc5dfa7987c2",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZhadhtata_narrow_M-1600_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_20",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-04524_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-04524_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-04524_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-04524_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZhadhtata_narrow_M-1600_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-04524_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-04524_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-04524_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-04524 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-04524_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-04524.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-04524_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-04524_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-04524_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-04524_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-04524 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-04524_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-04524_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-04524_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "eefb664fc15594f8fa821eb93a6d99d8",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "eefb664fc15594f8fa821eb93a84a3a8",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZhadhtata_narrow_M-1600_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-04386_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-04386_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-04386_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-04386.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein file:EXO-RunIIFall15DR76-04524.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-04386_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-04386_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-04386_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-04386 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-04386_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-04386_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-04386_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "eefb664fc15594f8fa821eb93a9cb774",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZhadhtata_narrow_M-1600_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21980",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZhadhtata_narrow_M-1600_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZhadhtata_narrow_M-1600_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZhadhtata_narrow_M-1800_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 49200,
      "number_files": 6,
      "size": 1714617130
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00334\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00334_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00334_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_16_patch1/src ] ; then\n  echo release CMSSW_7_1_16_patch1 already exists\nelse\n  scram p CMSSW CMSSW_7_1_16_patch1\nfi\ncd CMSSW_7_1_16_patch1/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-00334 --retry 3 --create-dirs -o Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00334-fragment.py\n[ -s Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00334-fragment.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00334-fragment.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00334-fragment.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.0441s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.0441s = 0.0441s\n# Which adds up to 0.0441s per event\n# Single core events that fit in validation duration: 20160s / 0.0441s = 457509\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 457509 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00334-fragment.py --python_filename EXO-RunIIWinter15wmLHE-00334_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00334.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00334_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00334_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00334_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00334 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00334_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00334_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00334_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21981/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21981/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21981/run_card.dat"
            },
            {
              "cms_confdb_id": "553dbcab272e0eb326515e636c37064b",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZhadhtata_narrow_M-1800_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_16_patch1",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-03493\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-03493_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-03493_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/bad2b558a300e23343f2e199861b2c7223e888fc/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 48.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 48.0000s = 48.0000s\n# Which adds up to 48.0000s per event\n# Single core events that fit in validation duration: 20160s / 48.0000s = 420\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 420 and 10000, but more than 0 -> 420\n# It is estimated that this validation will produce: 420 * 1.0000 = 420 events\nEVENTS=420\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-03493_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-03493.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZhadhtata_narrow_M-1800_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-03493_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-03493_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-03493_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-03493 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-03493_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-03493_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-03493_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\n\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n    maxEventsToPrint = cms.untracked.int32(1),\n    pythiaPylistVerbosity = cms.untracked.int32(1),\n    filterEfficiency = cms.untracked.double(1.0),\n    pythiaHepMCVerbosity = cms.untracked.bool(False),\n    comEnergy = cms.double(13000.),\n    PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    )\n    )\n)\n\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/bad2b558a300e23343f2e199861b2c7223e888fc/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "fcaa5f7a3e84590b266cbc5dfa7987c2",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZhadhtata_narrow_M-1800_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_20",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-04525_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-04525_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-04525_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-04525_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZhadhtata_narrow_M-1800_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-04525_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-04525_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-04525_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-04525 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-04525_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-04525.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-04525_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-04525_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-04525_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-04525_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-04525 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-04525_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-04525_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-04525_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "eefb664fc15594f8fa821eb93a6d99d8",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "eefb664fc15594f8fa821eb93a84a3a8",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZhadhtata_narrow_M-1800_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-04387_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-04387_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-04387_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-04387.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein file:EXO-RunIIFall15DR76-04525.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-04387_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-04387_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-04387_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-04387 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-04387_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-04387_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-04387_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "eefb664fc15594f8fa821eb93a9cb774",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZhadhtata_narrow_M-1800_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21981",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZhadhtata_narrow_M-1800_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZhadhtata_narrow_M-1800_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZhadhtata_narrow_M-2000_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 49200,
      "number_files": 6,
      "size": 1711651358
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00335\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00335_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00335_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_16_patch1/src ] ; then\n  echo release CMSSW_7_1_16_patch1 already exists\nelse\n  scram p CMSSW CMSSW_7_1_16_patch1\nfi\ncd CMSSW_7_1_16_patch1/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-00335 --retry 3 --create-dirs -o Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00335-fragment.py\n[ -s Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00335-fragment.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00335-fragment.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00335-fragment.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.0605s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.0605s = 0.0605s\n# Which adds up to 0.0605s per event\n# Single core events that fit in validation duration: 20160s / 0.0605s = 333455\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 333455 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00335-fragment.py --python_filename EXO-RunIIWinter15wmLHE-00335_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00335.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00335_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00335_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00335_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00335 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00335_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00335_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00335_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21982/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21982/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21982/run_card.dat"
            },
            {
              "cms_confdb_id": "553dbcab272e0eb326515e636c36b9fe",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZhadhtata_narrow_M-2000_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_16_patch1",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-03494\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-03494_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-03494_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/bad2b558a300e23343f2e199861b2c7223e888fc/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 65.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 65.0000s = 65.0000s\n# Which adds up to 65.0000s per event\n# Single core events that fit in validation duration: 20160s / 65.0000s = 310\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 310 and 10000, but more than 0 -> 310\n# It is estimated that this validation will produce: 310 * 1.0000 = 310 events\nEVENTS=310\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-03494_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-03494.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZhadhtata_narrow_M-2000_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-03494_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-03494_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-03494_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-03494 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-03494_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-03494_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-03494_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\n\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n    maxEventsToPrint = cms.untracked.int32(1),\n    pythiaPylistVerbosity = cms.untracked.int32(1),\n    filterEfficiency = cms.untracked.double(1.0),\n    pythiaHepMCVerbosity = cms.untracked.bool(False),\n    comEnergy = cms.double(13000.),\n    PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    )\n    )\n)\n\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/bad2b558a300e23343f2e199861b2c7223e888fc/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "fcaa5f7a3e84590b266cbc5dfa7987c2",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZhadhtata_narrow_M-2000_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_20",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-04526_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-04526_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-04526_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-04526_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZhadhtata_narrow_M-2000_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-04526_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-04526_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-04526_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-04526 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-04526_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-04526.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-04526_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-04526_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-04526_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-04526_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-04526 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-04526_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-04526_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-04526_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "eefb664fc15594f8fa821eb93a6d99d8",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "eefb664fc15594f8fa821eb93a84a3a8",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZhadhtata_narrow_M-2000_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-04388_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-04388_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-04388_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-04388.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein file:EXO-RunIIFall15DR76-04526.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-04388_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-04388_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-04388_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-04388 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-04388_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-04388_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-04388_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "eefb664fc15594f8fa821eb93a9cb774",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZhadhtata_narrow_M-2000_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21982",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZhadhtata_narrow_M-2000_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZhadhtata_narrow_M-2000_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZhadhtata_narrow_M-2500_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 46000,
      "number_files": 19,
      "size": 1682436059
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00336\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00336_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00336_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_16_patch1/src ] ; then\n  echo release CMSSW_7_1_16_patch1 already exists\nelse\n  scram p CMSSW CMSSW_7_1_16_patch1\nfi\ncd CMSSW_7_1_16_patch1/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-00336 --retry 3 --create-dirs -o Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00336-fragment.py\n[ -s Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00336-fragment.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00336-fragment.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00336-fragment.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.1390s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.1390s = 0.1390s\n# Which adds up to 0.1390s per event\n# Single core events that fit in validation duration: 20160s / 0.1390s = 145015\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 145015 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00336-fragment.py --python_filename EXO-RunIIWinter15wmLHE-00336_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00336.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00336_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00336_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00336_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00336 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00336_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00336_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00336_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21983/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21983/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21983/run_card.dat"
            },
            {
              "cms_confdb_id": "8cae4781f83988ef1e0bbbce5551ef86",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZhadhtata_narrow_M-2500_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v3/LHE",
          "release": "CMSSW_7_1_16_patch1",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-03495\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-03495_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-03495_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/bad2b558a300e23343f2e199861b2c7223e888fc/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 99.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 99.0000s = 99.0000s\n# Which adds up to 99.0000s per event\n# Single core events that fit in validation duration: 20160s / 99.0000s = 203\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 203 and 10000, but more than 0 -> 203\n# It is estimated that this validation will produce: 203 * 1.0000 = 203 events\nEVENTS=203\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-03495_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-03495.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZhadhtata_narrow_M-2500_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v3/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-03495_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-03495_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-03495_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-03495 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-03495_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-03495_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-03495_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\n\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n    maxEventsToPrint = cms.untracked.int32(1),\n    pythiaPylistVerbosity = cms.untracked.int32(1),\n    filterEfficiency = cms.untracked.double(1.0),\n    pythiaHepMCVerbosity = cms.untracked.bool(False),\n    comEnergy = cms.double(13000.),\n    PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    )\n    )\n)\n\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/bad2b558a300e23343f2e199861b2c7223e888fc/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "fcaa5f7a3e84590b266cbc5dfa7987c2",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZhadhtata_narrow_M-2500_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_20",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-04527_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-04527_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-04527_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-04527_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZhadhtata_narrow_M-2500_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-04527_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-04527_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-04527_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-04527 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-04527_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-04527.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-04527_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-04527_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-04527_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-04527_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-04527 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-04527_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-04527_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-04527_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "eefb664fc15594f8fa821eb93a6d99d8",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "eefb664fc15594f8fa821eb93a84a3a8",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZhadhtata_narrow_M-2500_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-04389_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-04389_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-04389_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-04389.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein file:EXO-RunIIFall15DR76-04527.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-04389_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-04389_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-04389_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-04389 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-04389_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-04389_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-04389_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "eefb664fc15594f8fa821eb93a9cb774",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZhadhtata_narrow_M-2500_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21983",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZhadhtata_narrow_M-2500_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZhadhtata_narrow_M-2500_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZhadhtata_narrow_M-3000_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 50000,
      "number_files": 4,
      "size": 1780970262
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00337\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00337_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00337_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_16_patch1/src ] ; then\n  echo release CMSSW_7_1_16_patch1 already exists\nelse\n  scram p CMSSW CMSSW_7_1_16_patch1\nfi\ncd CMSSW_7_1_16_patch1/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-00337 --retry 3 --create-dirs -o Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00337-fragment.py\n[ -s Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00337-fragment.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00337-fragment.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00337-fragment.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.0793s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.0793s = 0.0793s\n# Which adds up to 0.0793s per event\n# Single core events that fit in validation duration: 20160s / 0.0793s = 254091\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 254091 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00337-fragment.py --python_filename EXO-RunIIWinter15wmLHE-00337_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00337.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00337_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00337_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00337_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00337 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00337_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00337_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00337_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21984/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21984/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21984/run_card.dat"
            },
            {
              "cms_confdb_id": "48bdc97a506e36ae47c66ff9854ddda1",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZhadhtata_narrow_M-3000_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_16_patch1",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-03496\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-03496_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-03496_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/bad2b558a300e23343f2e199861b2c7223e888fc/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 63.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 63.0000s = 63.0000s\n# Which adds up to 63.0000s per event\n# Single core events that fit in validation duration: 20160s / 63.0000s = 320\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 320 and 10000, but more than 0 -> 320\n# It is estimated that this validation will produce: 320 * 1.0000 = 320 events\nEVENTS=320\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-03496_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-03496.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZhadhtata_narrow_M-3000_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-03496_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-03496_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-03496_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-03496 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-03496_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-03496_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-03496_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\n\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n    maxEventsToPrint = cms.untracked.int32(1),\n    pythiaPylistVerbosity = cms.untracked.int32(1),\n    filterEfficiency = cms.untracked.double(1.0),\n    pythiaHepMCVerbosity = cms.untracked.bool(False),\n    comEnergy = cms.double(13000.),\n    PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    )\n    )\n)\n\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/bad2b558a300e23343f2e199861b2c7223e888fc/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "fcaa5f7a3e84590b266cbc5dfa7987c2",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZhadhtata_narrow_M-3000_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_20",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-04497_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-04497_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-04497_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-04497_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZhadhtata_narrow_M-3000_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-04497_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-04497_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-04497_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-04497 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-04497_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-04497.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-04497_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-04497_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-04497_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-04497_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-04497 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-04497_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-04497_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-04497_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "05de83440aa40dc39e58916baa3c53cf",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "05de83440aa40dc39e58916baa3e92b9",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZhadhtata_narrow_M-3000_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-04359_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-04359_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-04359_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-04359.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein file:EXO-RunIIFall15DR76-04497.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-04359_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-04359_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-04359_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-04359 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-04359_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-04359_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-04359_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "dcc51d9e5ca8e89ff5c2d82cd6096fb2",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZhadhtata_narrow_M-3000_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21984",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZhadhtata_narrow_M-3000_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZhadhtata_narrow_M-3000_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZhadhtata_narrow_M-3500_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 48000,
      "number_files": 5,
      "size": 1726867899
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00338\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00338_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00338_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_16_patch1/src ] ; then\n  echo release CMSSW_7_1_16_patch1 already exists\nelse\n  scram p CMSSW CMSSW_7_1_16_patch1\nfi\ncd CMSSW_7_1_16_patch1/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-00338 --retry 3 --create-dirs -o Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00338-fragment.py\n[ -s Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00338-fragment.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00338-fragment.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00338-fragment.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.0645s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.0645s = 0.0645s\n# Which adds up to 0.0645s per event\n# Single core events that fit in validation duration: 20160s / 0.0645s = 312332\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 312332 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00338-fragment.py --python_filename EXO-RunIIWinter15wmLHE-00338_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00338.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00338_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00338_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00338_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00338 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00338_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00338_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00338_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21985/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21985/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21985/run_card.dat"
            },
            {
              "cms_confdb_id": "553dbcab272e0eb326515e636c127dd8",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZhadhtata_narrow_M-3500_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_16_patch1",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-03497\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-03497_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-03497_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/bad2b558a300e23343f2e199861b2c7223e888fc/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 66.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 66.0000s = 66.0000s\n# Which adds up to 66.0000s per event\n# Single core events that fit in validation duration: 20160s / 66.0000s = 305\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 305 and 10000, but more than 0 -> 305\n# It is estimated that this validation will produce: 305 * 1.0000 = 305 events\nEVENTS=305\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-03497_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-03497.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZhadhtata_narrow_M-3500_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-03497_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-03497_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-03497_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-03497 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-03497_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-03497_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-03497_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\n\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n    maxEventsToPrint = cms.untracked.int32(1),\n    pythiaPylistVerbosity = cms.untracked.int32(1),\n    filterEfficiency = cms.untracked.double(1.0),\n    pythiaHepMCVerbosity = cms.untracked.bool(False),\n    comEnergy = cms.double(13000.),\n    PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    )\n    )\n)\n\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/bad2b558a300e23343f2e199861b2c7223e888fc/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "fcaa5f7a3e84590b266cbc5dfa7987c2",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZhadhtata_narrow_M-3500_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_20",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-04528_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-04528_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-04528_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-04528_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZhadhtata_narrow_M-3500_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-04528_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-04528_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-04528_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-04528 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-04528_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-04528.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-04528_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-04528_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-04528_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-04528_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-04528 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-04528_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-04528_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-04528_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "eefb664fc15594f8fa821eb93a6d99d8",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "eefb664fc15594f8fa821eb93a84a3a8",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZhadhtata_narrow_M-3500_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-04390_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-04390_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-04390_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-04390.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein file:EXO-RunIIFall15DR76-04528.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-04390_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-04390_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-04390_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-04390 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-04390_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-04390_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-04390_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "eefb664fc15594f8fa821eb93a9cb774",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZhadhtata_narrow_M-3500_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21985",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZhadhtata_narrow_M-3500_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZhadhtata_narrow_M-3500_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZhadhtata_narrow_M-4000_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 47600,
      "number_files": 13,
      "size": 1778637498
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00339\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00339_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00339_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_16_patch1/src ] ; then\n  echo release CMSSW_7_1_16_patch1 already exists\nelse\n  scram p CMSSW CMSSW_7_1_16_patch1\nfi\ncd CMSSW_7_1_16_patch1/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-00339 --retry 3 --create-dirs -o Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00339-fragment.py\n[ -s Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00339-fragment.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00339-fragment.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00339-fragment.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.0858s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.0858s = 0.0858s\n# Which adds up to 0.0858s per event\n# Single core events that fit in validation duration: 20160s / 0.0858s = 234952\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 234952 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00339-fragment.py --python_filename EXO-RunIIWinter15wmLHE-00339_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00339.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00339_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00339_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00339_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00339 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00339_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00339_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00339_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21986/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21986/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21986/run_card.dat"
            },
            {
              "cms_confdb_id": "553dbcab272e0eb326515e636c0dac58",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZhadhtata_narrow_M-4000_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_16_patch1",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-03498\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-03498_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-03498_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/bad2b558a300e23343f2e199861b2c7223e888fc/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 97.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 97.0000s = 97.0000s\n# Which adds up to 97.0000s per event\n# Single core events that fit in validation duration: 20160s / 97.0000s = 207\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 207 and 10000, but more than 0 -> 207\n# It is estimated that this validation will produce: 207 * 1.0000 = 207 events\nEVENTS=207\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-03498_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-03498.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZhadhtata_narrow_M-4000_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-03498_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-03498_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-03498_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-03498 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-03498_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-03498_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-03498_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\n\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n    maxEventsToPrint = cms.untracked.int32(1),\n    pythiaPylistVerbosity = cms.untracked.int32(1),\n    filterEfficiency = cms.untracked.double(1.0),\n    pythiaHepMCVerbosity = cms.untracked.bool(False),\n    comEnergy = cms.double(13000.),\n    PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    )\n    )\n)\n\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/bad2b558a300e23343f2e199861b2c7223e888fc/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "fcaa5f7a3e84590b266cbc5dfa7987c2",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZhadhtata_narrow_M-4000_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_20",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-04529_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-04529_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-04529_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-04529_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZhadhtata_narrow_M-4000_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-04529_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-04529_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-04529_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-04529 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-04529_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-04529.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-04529_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-04529_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-04529_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-04529_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-04529 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-04529_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-04529_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-04529_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "eefb664fc15594f8fa821eb93a6d99d8",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "eefb664fc15594f8fa821eb93a84a3a8",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZhadhtata_narrow_M-4000_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-04391_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-04391_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-04391_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-04391.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein file:EXO-RunIIFall15DR76-04529.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-04391_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-04391_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-04391_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-04391 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-04391_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-04391_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-04391_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "eefb664fc15594f8fa821eb93a9cb774",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZhadhtata_narrow_M-4000_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21986",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZhadhtata_narrow_M-4000_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZhadhtata_narrow_M-4000_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZhadhtata_narrow_M-4500_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 50000,
      "number_files": 7,
      "size": 1839427669
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00340\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00340_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00340_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_16_patch1/src ] ; then\n  echo release CMSSW_7_1_16_patch1 already exists\nelse\n  scram p CMSSW CMSSW_7_1_16_patch1\nfi\ncd CMSSW_7_1_16_patch1/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-00340 --retry 3 --create-dirs -o Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00340-fragment.py\n[ -s Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00340-fragment.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00340-fragment.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00340-fragment.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.2343s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.2343s = 0.2343s\n# Which adds up to 0.2343s per event\n# Single core events that fit in validation duration: 20160s / 0.2343s = 86036\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 86036 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00340-fragment.py --python_filename EXO-RunIIWinter15wmLHE-00340_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00340.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00340_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00340_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00340_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00340 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00340_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00340_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00340_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21987/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21987/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21987/run_card.dat"
            },
            {
              "cms_confdb_id": "553dbcab272e0eb326515e636c09736c",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZhadhtata_narrow_M-4500_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_16_patch1",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-03499\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-03499_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-03499_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/bad2b558a300e23343f2e199861b2c7223e888fc/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 145.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 145.0000s = 145.0000s\n# Which adds up to 145.0000s per event\n# Single core events that fit in validation duration: 20160s / 145.0000s = 139\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 139 and 10000, but more than 0 -> 139\n# It is estimated that this validation will produce: 139 * 1.0000 = 139 events\nEVENTS=139\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-03499_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-03499.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZhadhtata_narrow_M-4500_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-03499_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-03499_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-03499_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-03499 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-03499_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-03499_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-03499_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\n\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n    maxEventsToPrint = cms.untracked.int32(1),\n    pythiaPylistVerbosity = cms.untracked.int32(1),\n    filterEfficiency = cms.untracked.double(1.0),\n    pythiaHepMCVerbosity = cms.untracked.bool(False),\n    comEnergy = cms.double(13000.),\n    PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    )\n    )\n)\n\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/bad2b558a300e23343f2e199861b2c7223e888fc/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "fcaa5f7a3e84590b266cbc5dfa7987c2",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZhadhtata_narrow_M-4500_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_20",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-04530_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-04530_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-04530_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-04530_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZhadhtata_narrow_M-4500_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-04530_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-04530_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-04530_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-04530 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-04530_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-04530.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-04530_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-04530_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-04530_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-04530_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-04530 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-04530_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-04530_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-04530_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "eefb664fc15594f8fa821eb93a6d99d8",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "eefb664fc15594f8fa821eb93a84a3a8",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZhadhtata_narrow_M-4500_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-04392_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-04392_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-04392_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-04392.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein file:EXO-RunIIFall15DR76-04530.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-04392_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-04392_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-04392_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-04392 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-04392_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-04392_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-04392_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "eefb664fc15594f8fa821eb93a9cb774",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZhadhtata_narrow_M-4500_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21987",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZhadhtata_narrow_M-4500_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZhadhtata_narrow_M-4500_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZhadhtata_narrow_M-600_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 50000,
      "number_files": 3,
      "size": 1581915917
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00328\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00328_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00328_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_16_patch1/src ] ; then\n  echo release CMSSW_7_1_16_patch1 already exists\nelse\n  scram p CMSSW CMSSW_7_1_16_patch1\nfi\ncd CMSSW_7_1_16_patch1/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-00328 --retry 3 --create-dirs -o Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00328-fragment.py\n[ -s Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00328-fragment.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00328-fragment.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00328-fragment.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.1957s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.1957s = 0.1957s\n# Which adds up to 0.1957s per event\n# Single core events that fit in validation duration: 20160s / 0.1957s = 103026\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 103026 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00328-fragment.py --python_filename EXO-RunIIWinter15wmLHE-00328_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00328.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00328_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00328_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00328_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00328 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00328_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00328_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00328_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21988/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21988/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21988/run_card.dat"
            },
            {
              "cms_confdb_id": "3fbfe4db776085576bfb4b0aa318f04c",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZhadhtata_narrow_M-600_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_16_patch1",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-03487\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-03487_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-03487_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/bad2b558a300e23343f2e199861b2c7223e888fc/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 73.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 73.0000s = 73.0000s\n# Which adds up to 73.0000s per event\n# Single core events that fit in validation duration: 20160s / 73.0000s = 276\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 276 and 10000, but more than 0 -> 276\n# It is estimated that this validation will produce: 276 * 1.0000 = 276 events\nEVENTS=276\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-03487_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-03487.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZhadhtata_narrow_M-600_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-03487_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-03487_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-03487_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-03487 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-03487_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-03487_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-03487_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\n\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n    maxEventsToPrint = cms.untracked.int32(1),\n    pythiaPylistVerbosity = cms.untracked.int32(1),\n    filterEfficiency = cms.untracked.double(1.0),\n    pythiaHepMCVerbosity = cms.untracked.bool(False),\n    comEnergy = cms.double(13000.),\n    PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    )\n    )\n)\n\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/bad2b558a300e23343f2e199861b2c7223e888fc/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "fcaa5f7a3e84590b266cbc5dfa7987c2",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZhadhtata_narrow_M-600_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_20",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-04521_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-04521_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-04521_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-04521_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZhadhtata_narrow_M-600_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-04521_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-04521_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-04521_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-04521 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-04521_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-04521.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-04521_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-04521_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-04521_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-04521_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-04521 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-04521_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-04521_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-04521_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "eefb664fc15594f8fa821eb93a6d99d8",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "eefb664fc15594f8fa821eb93a84a3a8",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZhadhtata_narrow_M-600_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-04383_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-04383_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-04383_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-04383.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein file:EXO-RunIIFall15DR76-04521.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-04383_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-04383_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-04383_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-04383 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-04383_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-04383_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-04383_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "eefb664fc15594f8fa821eb93a9cb774",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZhadhtata_narrow_M-600_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21988",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZhadhtata_narrow_M-600_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZhadhtata_narrow_M-600_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZhadhtata_narrow_M-800_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 48000,
      "number_files": 3,
      "size": 1568456143
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00329\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00329_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00329_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_16_patch1/src ] ; then\n  echo release CMSSW_7_1_16_patch1 already exists\nelse\n  scram p CMSSW CMSSW_7_1_16_patch1\nfi\ncd CMSSW_7_1_16_patch1/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-00329 --retry 3 --create-dirs -o Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00329-fragment.py\n[ -s Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00329-fragment.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00329-fragment.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00329-fragment.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.1113s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.1113s = 0.1113s\n# Which adds up to 0.1113s per event\n# Single core events that fit in validation duration: 20160s / 0.1113s = 181145\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 181145 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00329-fragment.py --python_filename EXO-RunIIWinter15wmLHE-00329_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00329.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00329_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00329_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00329_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00329 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00329_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00329_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00329_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21989/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21989/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21989/run_card.dat"
            },
            {
              "cms_confdb_id": "3fbfe4db776085576bfb4b0aa3192ed4",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZhadhtata_narrow_M-800_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_16_patch1",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-03488\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-03488_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-03488_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/bad2b558a300e23343f2e199861b2c7223e888fc/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 58.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 58.0000s = 58.0000s\n# Which adds up to 58.0000s per event\n# Single core events that fit in validation duration: 20160s / 58.0000s = 347\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 347 and 10000, but more than 0 -> 347\n# It is estimated that this validation will produce: 347 * 1.0000 = 347 events\nEVENTS=347\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-03488_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-03488.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZhadhtata_narrow_M-800_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-03488_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-03488_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-03488_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-03488 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-03488_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-03488_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-03488_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\n\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n    maxEventsToPrint = cms.untracked.int32(1),\n    pythiaPylistVerbosity = cms.untracked.int32(1),\n    filterEfficiency = cms.untracked.double(1.0),\n    pythiaHepMCVerbosity = cms.untracked.bool(False),\n    comEnergy = cms.double(13000.),\n    PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    )\n    )\n)\n\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/bad2b558a300e23343f2e199861b2c7223e888fc/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "fcaa5f7a3e84590b266cbc5dfa7987c2",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZhadhtata_narrow_M-800_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_20",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-04522_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-04522_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-04522_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-04522_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZhadhtata_narrow_M-800_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-04522_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-04522_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-04522_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-04522 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-04522_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-04522.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-04522_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-04522_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-04522_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-04522_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-04522 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-04522_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-04522_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-04522_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "eefb664fc15594f8fa821eb93a6d99d8",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "eefb664fc15594f8fa821eb93a84a3a8",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZhadhtata_narrow_M-800_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-04384_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-04384_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-04384_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-04384.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein file:EXO-RunIIFall15DR76-04522.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-04384_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-04384_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-04384_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-04384 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-04384_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-04384_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-04384_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "eefb664fc15594f8fa821eb93a9cb774",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZhadhtata_narrow_M-800_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21989",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZhadhtata_narrow_M-800_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZhadhtata_narrow_M-800_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZinvhAA_2HDM_M-1000_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 99200,
      "number_files": 3,
      "size": 2625448496
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-01822\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-01822_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-01822_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-01822 --retry 3 --create-dirs -o Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py\n[ -s Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.0585s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.0585s = 0.0585s\n# Which adds up to 0.0585s per event\n# Single core events that fit in validation duration: 20160s / 0.0585s = 344437\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 344437 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py --python_filename EXO-RunIIWinter15wmLHE-01822_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-01822.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-01822_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-01822_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-01822_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-01822 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-01822_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-01822_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-01822_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21990/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21990/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21990/run_card.dat"
            },
            {
              "cms_confdb_id": "8ef198ab071c3a172b8f7d394f527b30",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhAA_2HDM_M-1000_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_20",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01973\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01973_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01973_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20_patch3/src ] ; then\n  echo release CMSSW_7_1_20_patch3 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20_patch3\nfi\ncd CMSSW_7_1_20_patch3/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 81.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 81.0000s = 81.0000s\n# Which adds up to 81.0000s per event\n# Single core events that fit in validation duration: 20160s / 81.0000s = 248\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 248 and 10000, but more than 0 -> 248\n# It is estimated that this validation will produce: 248 * 1.0000 = 248 events\nEVENTS=248\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py --python_filename EXO-RunIISummer15GS-01973_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01973.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZinvhAA_2HDM_M-1000_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01973_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01973_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01973_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01973 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01973_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01973_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01973_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        processParameters = cms.vstring(\n            'SLHA:useDecayTable = off',  # Use pythia8s own decay mode instead of decays defined in LH accord\n            '25:m0 = 125.0',\n            '25:onMode = off',\n            '25:onIfMatch = 22 22'\n            ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py"
            },
            {
              "cms_confdb_id": "2020919c440d17c8747388b984c665e5",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhAA_2HDM_M-1000_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM",
          "release": "CMSSW_7_1_20_patch3",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01597_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01597_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01597_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01597_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZinvhAA_2HDM_M-1000_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01597_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01597_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01597_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01597 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01597_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01597.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01597_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01597_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01597_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01597_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01597 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01597_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01597_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01597_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "b27ca2f9ba8ae25cf78a0d59f741c64c",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "b27ca2f9ba8ae25cf78a0d59f7457806",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhAA_2HDM_M-1000_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v6/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-01326_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-01326_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-01326_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-01326.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZprimeToZhToZinvhAA_2HDM_M-1000_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v6/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-01326_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-01326_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-01326_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-01326 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-01326_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-01326_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-01326_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "8a116aab3e9d220dbe227045ccbab3e3",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhAA_2HDM_M-1000_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21990",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZinvhAA_2HDM_M-1000_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZinvhAA_2HDM_M-1000_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZinvhAA_2HDM_M-1200_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 99800,
      "number_files": 3,
      "size": 2607264777
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-01823\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-01823_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-01823_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-01823 --retry 3 --create-dirs -o Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py\n[ -s Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.0725s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.0725s = 0.0725s\n# Which adds up to 0.0725s per event\n# Single core events that fit in validation duration: 20160s / 0.0725s = 277951\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 277951 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py --python_filename EXO-RunIIWinter15wmLHE-01823_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-01823.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-01823_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-01823_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-01823_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-01823 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-01823_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-01823_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-01823_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21991/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21991/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21991/run_card.dat"
            },
            {
              "cms_confdb_id": "8ef198ab071c3a172b8f7d394f52d057",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhAA_2HDM_M-1200_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_20",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01977\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01977_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01977_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20_patch3/src ] ; then\n  echo release CMSSW_7_1_20_patch3 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20_patch3\nfi\ncd CMSSW_7_1_20_patch3/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 96.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 96.0000s = 96.0000s\n# Which adds up to 96.0000s per event\n# Single core events that fit in validation duration: 20160s / 96.0000s = 210\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 210 and 10000, but more than 0 -> 210\n# It is estimated that this validation will produce: 210 * 1.0000 = 210 events\nEVENTS=210\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py --python_filename EXO-RunIISummer15GS-01977_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01977.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZinvhAA_2HDM_M-1200_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01977_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01977_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01977_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01977 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01977_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01977_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01977_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        processParameters = cms.vstring(\n            'SLHA:useDecayTable = off',  # Use pythia8s own decay mode instead of decays defined in LH accord\n            '25:m0 = 125.0',\n            '25:onMode = off',\n            '25:onIfMatch = 22 22'\n            ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py"
            },
            {
              "cms_confdb_id": "2020919c440d17c8747388b984c665e5",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhAA_2HDM_M-1200_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM",
          "release": "CMSSW_7_1_20_patch3",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01598_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01598_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01598_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01598_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZinvhAA_2HDM_M-1200_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01598_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01598_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01598_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01598 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01598_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01598.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01598_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01598_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01598_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01598_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01598 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01598_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01598_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01598_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "76c7493dbd1563bad4a4c54803b60be8",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "76c7493dbd1563bad4a4c54803c257af",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhAA_2HDM_M-1200_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-01327_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-01327_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-01327_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-01327.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZprimeToZhToZinvhAA_2HDM_M-1200_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-01327_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-01327_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-01327_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-01327 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-01327_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-01327_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-01327_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "76c7493dbd1563bad4a4c54803c577ad",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhAA_2HDM_M-1200_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21991",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZinvhAA_2HDM_M-1200_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZinvhAA_2HDM_M-1200_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZinvhAA_2HDM_M-1400_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 98600,
      "number_files": 3,
      "size": 2661143354
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-01824\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-01824_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-01824_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-01824 --retry 3 --create-dirs -o Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py\n[ -s Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.0694s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.0694s = 0.0694s\n# Which adds up to 0.0694s per event\n# Single core events that fit in validation duration: 20160s / 0.0694s = 290348\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 290348 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py --python_filename EXO-RunIIWinter15wmLHE-01824_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-01824.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-01824_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-01824_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-01824_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-01824 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-01824_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-01824_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-01824_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21992/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21992/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21992/run_card.dat"
            },
            {
              "cms_confdb_id": "8ef198ab071c3a172b8f7d394f533652",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhAA_2HDM_M-1400_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_20",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01979\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01979_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01979_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20_patch3/src ] ; then\n  echo release CMSSW_7_1_20_patch3 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20_patch3\nfi\ncd CMSSW_7_1_20_patch3/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 74.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 74.0000s = 74.0000s\n# Which adds up to 74.0000s per event\n# Single core events that fit in validation duration: 20160s / 74.0000s = 272\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 272 and 10000, but more than 0 -> 272\n# It is estimated that this validation will produce: 272 * 1.0000 = 272 events\nEVENTS=272\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py --python_filename EXO-RunIISummer15GS-01979_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01979.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZinvhAA_2HDM_M-1400_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01979_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01979_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01979_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01979 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01979_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01979_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01979_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        processParameters = cms.vstring(\n            'SLHA:useDecayTable = off',  # Use pythia8s own decay mode instead of decays defined in LH accord\n            '25:m0 = 125.0',\n            '25:onMode = off',\n            '25:onIfMatch = 22 22'\n            ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py"
            },
            {
              "cms_confdb_id": "2020919c440d17c8747388b984c665e5",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhAA_2HDM_M-1400_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM",
          "release": "CMSSW_7_1_20_patch3",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01599_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01599_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01599_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01599_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZinvhAA_2HDM_M-1400_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01599_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01599_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01599_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01599 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01599_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01599.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01599_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01599_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01599_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01599_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01599 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01599_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01599_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01599_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "6d3ac46ffb60b20fd421a21307c304ac",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "6d3ac46ffb60b20fd421a21307c4465d",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhAA_2HDM_M-1400_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-01328_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-01328_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-01328_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-01328.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZprimeToZhToZinvhAA_2HDM_M-1400_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-01328_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-01328_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-01328_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-01328 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-01328_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-01328_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-01328_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "2db80034f6fb21445f516c7c534e1ee4",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhAA_2HDM_M-1400_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21992",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZinvhAA_2HDM_M-1400_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZinvhAA_2HDM_M-1400_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZinvhAA_2HDM_M-1700_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 100000,
      "number_files": 3,
      "size": 2658511544
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-01825\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-01825_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-01825_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-01825 --retry 3 --create-dirs -o Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py\n[ -s Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.0612s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.0612s = 0.0612s\n# Which adds up to 0.0612s per event\n# Single core events that fit in validation duration: 20160s / 0.0612s = 329271\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 329271 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py --python_filename EXO-RunIIWinter15wmLHE-01825_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-01825.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-01825_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-01825_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-01825_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-01825 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-01825_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-01825_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-01825_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21993/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21993/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21993/run_card.dat"
            },
            {
              "cms_confdb_id": "8ef198ab071c3a172b8f7d394f53bdb5",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhAA_2HDM_M-1700_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_20",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01978\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01978_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01978_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20_patch3/src ] ; then\n  echo release CMSSW_7_1_20_patch3 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20_patch3\nfi\ncd CMSSW_7_1_20_patch3/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 90.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 90.0000s = 90.0000s\n# Which adds up to 90.0000s per event\n# Single core events that fit in validation duration: 20160s / 90.0000s = 224\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 224 and 10000, but more than 0 -> 224\n# It is estimated that this validation will produce: 224 * 1.0000 = 224 events\nEVENTS=224\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py --python_filename EXO-RunIISummer15GS-01978_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01978.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZinvhAA_2HDM_M-1700_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01978_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01978_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01978_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01978 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01978_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01978_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01978_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        processParameters = cms.vstring(\n            'SLHA:useDecayTable = off',  # Use pythia8s own decay mode instead of decays defined in LH accord\n            '25:m0 = 125.0',\n            '25:onMode = off',\n            '25:onIfMatch = 22 22'\n            ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py"
            },
            {
              "cms_confdb_id": "2020919c440d17c8747388b984c665e5",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhAA_2HDM_M-1700_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM",
          "release": "CMSSW_7_1_20_patch3",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01600_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01600_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01600_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01600_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZinvhAA_2HDM_M-1700_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01600_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01600_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01600_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01600 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01600_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01600.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01600_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01600_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01600_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01600_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01600 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01600_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01600_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01600_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "76c7493dbd1563bad4a4c54803df4751",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "76c7493dbd1563bad4a4c54803e10f3d",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhAA_2HDM_M-1700_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-01329_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-01329_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-01329_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-01329.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZprimeToZhToZinvhAA_2HDM_M-1700_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-01329_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-01329_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-01329_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-01329 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-01329_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-01329_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-01329_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "76c7493dbd1563bad4a4c54803e77518",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhAA_2HDM_M-1700_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21993",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZinvhAA_2HDM_M-1700_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZinvhAA_2HDM_M-1700_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZinvhAA_2HDM_M-2000_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 100000,
      "number_files": 4,
      "size": 2634726721
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-01826\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-01826_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-01826_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-01826 --retry 3 --create-dirs -o Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py\n[ -s Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.0564s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.0564s = 0.0564s\n# Which adds up to 0.0564s per event\n# Single core events that fit in validation duration: 20160s / 0.0564s = 357685\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 357685 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py --python_filename EXO-RunIIWinter15wmLHE-01826_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-01826.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-01826_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-01826_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-01826_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-01826 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-01826_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-01826_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-01826_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21994/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21994/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21994/run_card.dat"
            },
            {
              "cms_confdb_id": "8ef198ab071c3a172b8f7d394f5439cf",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhAA_2HDM_M-2000_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_20",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01980\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01980_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01980_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20_patch3/src ] ; then\n  echo release CMSSW_7_1_20_patch3 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20_patch3\nfi\ncd CMSSW_7_1_20_patch3/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 114.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 114.0000s = 114.0000s\n# Which adds up to 114.0000s per event\n# Single core events that fit in validation duration: 20160s / 114.0000s = 176\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 176 and 10000, but more than 0 -> 176\n# It is estimated that this validation will produce: 176 * 1.0000 = 176 events\nEVENTS=176\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py --python_filename EXO-RunIISummer15GS-01980_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01980.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZinvhAA_2HDM_M-2000_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01980_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01980_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01980_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01980 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01980_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01980_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01980_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        processParameters = cms.vstring(\n            'SLHA:useDecayTable = off',  # Use pythia8s own decay mode instead of decays defined in LH accord\n            '25:m0 = 125.0',\n            '25:onMode = off',\n            '25:onIfMatch = 22 22'\n            ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py"
            },
            {
              "cms_confdb_id": "2020919c440d17c8747388b984c665e5",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhAA_2HDM_M-2000_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM",
          "release": "CMSSW_7_1_20_patch3",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01601_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01601_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01601_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01601_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZinvhAA_2HDM_M-2000_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01601_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01601_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01601_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01601 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01601_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01601.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01601_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01601_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01601_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01601_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01601 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01601_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01601_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01601_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "76c7493dbd1563bad4a4c54803df4751",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "76c7493dbd1563bad4a4c54803e10f3d",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhAA_2HDM_M-2000_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-01330_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-01330_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-01330_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-01330.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZprimeToZhToZinvhAA_2HDM_M-2000_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-01330_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-01330_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-01330_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-01330 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-01330_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-01330_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-01330_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "76c7493dbd1563bad4a4c54803e77518",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhAA_2HDM_M-2000_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21994",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZinvhAA_2HDM_M-2000_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZinvhAA_2HDM_M-2000_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZinvhAA_2HDM_M-2500_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 97400,
      "number_files": 8,
      "size": 2662901997
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-01827\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-01827_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-01827_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-01827 --retry 3 --create-dirs -o Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py\n[ -s Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.0439s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.0439s = 0.0439s\n# Which adds up to 0.0439s per event\n# Single core events that fit in validation duration: 20160s / 0.0439s = 459534\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 459534 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py --python_filename EXO-RunIIWinter15wmLHE-01827_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-01827.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-01827_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-01827_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-01827_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-01827 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-01827_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-01827_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-01827_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21995/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21995/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21995/run_card.dat"
            },
            {
              "cms_confdb_id": "3b44d0764f0a816af3bb1c01b1bea6c4",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhAA_2HDM_M-2500_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_20",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01981\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01981_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01981_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 73.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 73.0000s = 73.0000s\n# Which adds up to 73.0000s per event\n# Single core events that fit in validation duration: 20160s / 73.0000s = 276\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 276 and 10000, but more than 0 -> 276\n# It is estimated that this validation will produce: 276 * 1.0000 = 276 events\nEVENTS=276\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py --python_filename EXO-RunIISummer15GS-01981_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01981.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZinvhAA_2HDM_M-2500_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01981_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01981_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01981_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01981 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01981_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01981_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01981_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        processParameters = cms.vstring(\n            'SLHA:useDecayTable = off',  # Use pythia8s own decay mode instead of decays defined in LH accord\n            '25:m0 = 125.0',\n            '25:onMode = off',\n            '25:onIfMatch = 22 22'\n            ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py"
            },
            {
              "cms_confdb_id": "3b44d0764f0a816af3bb1c01b1bf73e8",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhAA_2HDM_M-2500_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_20",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-03977_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-03977_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-03977_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-03977_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZinvhAA_2HDM_M-2500_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-03977_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-03977_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-03977_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-03977 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-03977_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-03977.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-03977_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-03977_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-03977_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-03977_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-03977 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-03977_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-03977_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-03977_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "95297f0e5af6ef9d7c80e61fa428d97b",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "95297f0e5af6ef9d7c80e61fa429ff4f",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhAA_2HDM_M-2500_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-03819_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-03819_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-03819_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-03819.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZprimeToZhToZinvhAA_2HDM_M-2500_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-03819_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-03819_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-03819_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-03819 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-03819_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-03819_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-03819_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "8a116aab3e9d220dbe227045ccbab3e3",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhAA_2HDM_M-2500_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21995",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZinvhAA_2HDM_M-2500_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZinvhAA_2HDM_M-2500_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZinvhAA_2HDM_M-600_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 99200,
      "number_files": 3,
      "size": 2553115584
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-01820\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-01820_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-01820_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-01820 --retry 3 --create-dirs -o Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py\n[ -s Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.0667s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.0667s = 0.0667s\n# Which adds up to 0.0667s per event\n# Single core events that fit in validation duration: 20160s / 0.0667s = 302059\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 302059 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py --python_filename EXO-RunIIWinter15wmLHE-01820_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-01820.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-01820_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-01820_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-01820_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-01820 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-01820_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-01820_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-01820_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21996/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21996/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21996/run_card.dat"
            },
            {
              "cms_confdb_id": "422d9beeb457d912029d4a704aef045e",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhAA_2HDM_M-600_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_20",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01976\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01976_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01976_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20_patch3/src ] ; then\n  echo release CMSSW_7_1_20_patch3 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20_patch3\nfi\ncd CMSSW_7_1_20_patch3/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 77.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 77.0000s = 77.0000s\n# Which adds up to 77.0000s per event\n# Single core events that fit in validation duration: 20160s / 77.0000s = 261\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 261 and 10000, but more than 0 -> 261\n# It is estimated that this validation will produce: 261 * 1.0000 = 261 events\nEVENTS=261\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py --python_filename EXO-RunIISummer15GS-01976_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01976.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZinvhAA_2HDM_M-600_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01976_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01976_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01976_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01976 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01976_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01976_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01976_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        processParameters = cms.vstring(\n            'SLHA:useDecayTable = off',  # Use pythia8s own decay mode instead of decays defined in LH accord\n            '25:m0 = 125.0',\n            '25:onMode = off',\n            '25:onIfMatch = 22 22'\n            ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py"
            },
            {
              "cms_confdb_id": "2020919c440d17c8747388b984c665e5",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhAA_2HDM_M-600_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM",
          "release": "CMSSW_7_1_20_patch3",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01595_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01595_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01595_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01595_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZinvhAA_2HDM_M-600_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01595_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01595_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01595_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01595 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01595_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01595.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01595_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01595_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01595_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01595_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01595 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01595_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01595_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01595_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "76c7493dbd1563bad4a4c54803b60be8",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "76c7493dbd1563bad4a4c54803c257af",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhAA_2HDM_M-600_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-01324_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-01324_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-01324_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-01324.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZprimeToZhToZinvhAA_2HDM_M-600_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-01324_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-01324_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-01324_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-01324 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-01324_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-01324_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-01324_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "76c7493dbd1563bad4a4c54803c577ad",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhAA_2HDM_M-600_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21996",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZinvhAA_2HDM_M-600_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZinvhAA_2HDM_M-600_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZinvhAA_2HDM_M-800_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 98400,
      "number_files": 3,
      "size": 2617781610
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-01821\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-01821_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-01821_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-01821 --retry 3 --create-dirs -o Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py\n[ -s Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.0627s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.0627s = 0.0627s\n# Which adds up to 0.0627s per event\n# Single core events that fit in validation duration: 20160s / 0.0627s = 321689\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 321689 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py --python_filename EXO-RunIIWinter15wmLHE-01821_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-01821.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-01821_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-01821_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-01821_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-01821 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-01821_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-01821_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-01821_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21997/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21997/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21997/run_card.dat"
            },
            {
              "cms_confdb_id": "8ef198ab071c3a172b8f7d394f51c6da",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhAA_2HDM_M-800_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_20",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01971\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01971_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01971_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20_patch3/src ] ; then\n  echo release CMSSW_7_1_20_patch3 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20_patch3\nfi\ncd CMSSW_7_1_20_patch3/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 64.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 64.0000s = 64.0000s\n# Which adds up to 64.0000s per event\n# Single core events that fit in validation duration: 20160s / 64.0000s = 315\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 315 and 10000, but more than 0 -> 315\n# It is estimated that this validation will produce: 315 * 1.0000 = 315 events\nEVENTS=315\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py --python_filename EXO-RunIISummer15GS-01971_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01971.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZinvhAA_2HDM_M-800_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01971_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01971_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01971_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01971 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01971_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01971_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01971_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        processParameters = cms.vstring(\n            'SLHA:useDecayTable = off',  # Use pythia8s own decay mode instead of decays defined in LH accord\n            '25:m0 = 125.0',\n            '25:onMode = off',\n            '25:onIfMatch = 22 22'\n            ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Haa_cff.py"
            },
            {
              "cms_confdb_id": "2020919c440d17c8747388b984c665e5",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhAA_2HDM_M-800_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM",
          "release": "CMSSW_7_1_20_patch3",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01596_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01596_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01596_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01596_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZinvhAA_2HDM_M-800_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01596_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01596_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01596_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01596 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01596_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01596.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01596_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01596_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01596_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01596_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01596 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01596_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01596_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01596_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "76c7493dbd1563bad4a4c54803b60be8",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "76c7493dbd1563bad4a4c54803c257af",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhAA_2HDM_M-800_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v3/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-01325_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-01325_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-01325_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-01325.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZprimeToZhToZinvhAA_2HDM_M-800_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-01325_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-01325_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-01325_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-01325 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-01325_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-01325_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-01325_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "76c7493dbd1563bad4a4c54803c577ad",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhAA_2HDM_M-800_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v3/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21997",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZinvhAA_2HDM_M-800_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v3/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZinvhAA_2HDM_M-800_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZinvhbb_2HDM_M-1000_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 100000,
      "number_files": 7,
      "size": 2961513004
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-01722\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-01722_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-01722_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-01722 --retry 3 --create-dirs -o Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py\n[ -s Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.0477s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.0477s = 0.0477s\n# Which adds up to 0.0477s per event\n# Single core events that fit in validation duration: 20160s / 0.0477s = 422389\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 422389 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py --python_filename EXO-RunIIWinter15wmLHE-01722_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-01722.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-01722_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-01722_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-01722_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-01722 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-01722_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-01722_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-01722_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22014/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22014/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22014/run_card.dat"
            },
            {
              "cms_confdb_id": "8ef198ab071c3a172b8f7d394f24c274",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhbb_2HDM_M-1000_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_20",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01882\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01882_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01882_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 71.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 71.0000s = 71.0000s\n# Which adds up to 71.0000s per event\n# Single core events that fit in validation duration: 20160s / 71.0000s = 283\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 283 and 10000, but more than 0 -> 283\n# It is estimated that this validation will produce: 283 * 1.0000 = 283 events\nEVENTS=283\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py --python_filename EXO-RunIISummer15GS-01882_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01882.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZinvhbb_2HDM_M-1000_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01882_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01882_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01882_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01882 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01882_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01882_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01882_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        processParameters = cms.vstring(\n            'SLHA:useDecayTable = off',  # Use pythia8s own decay mode instead of decays defined in LH accord\n            '25:m0 = 125.0',\n            '25:onMode = off',\n            '25:onIfMatch = 5 -5'\n            ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py"
            },
            {
              "cms_confdb_id": "8ef198ab071c3a172b8f7d394f25c31f",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhbb_2HDM_M-1000_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_20",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01516_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01516_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01516_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01516_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZinvhbb_2HDM_M-1000_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01516_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01516_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01516_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01516 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01516_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01516.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01516_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01516_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01516_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01516_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01516 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01516_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01516_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01516_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284abbc32",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284ac4abf",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhbb_2HDM_M-1000_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-01248_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-01248_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-01248_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-01248.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZprimeToZhToZinvhbb_2HDM_M-1000_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-01248_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-01248_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-01248_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-01248 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-01248_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-01248_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-01248_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "c54bcac03a1744a7d7cbc50e514e6eb6",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhbb_2HDM_M-1000_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22014",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZinvhbb_2HDM_M-1000_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZinvhbb_2HDM_M-1000_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZinvhbb_2HDM_M-1200_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 100000,
      "number_files": 4,
      "size": 2951387405
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-01723\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-01723_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-01723_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-01723 --retry 3 --create-dirs -o Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py\n[ -s Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.0572s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.0572s = 0.0572s\n# Which adds up to 0.0572s per event\n# Single core events that fit in validation duration: 20160s / 0.0572s = 352719\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 352719 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py --python_filename EXO-RunIIWinter15wmLHE-01723_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-01723.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-01723_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-01723_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-01723_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-01723 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-01723_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-01723_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-01723_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22015/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22015/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22015/run_card.dat"
            },
            {
              "cms_confdb_id": "8ef198ab071c3a172b8f7d394f24f900",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhbb_2HDM_M-1200_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_20",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01880\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01880_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01880_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 68.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 68.0000s = 68.0000s\n# Which adds up to 68.0000s per event\n# Single core events that fit in validation duration: 20160s / 68.0000s = 296\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 296 and 10000, but more than 0 -> 296\n# It is estimated that this validation will produce: 296 * 1.0000 = 296 events\nEVENTS=296\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py --python_filename EXO-RunIISummer15GS-01880_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01880.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZinvhbb_2HDM_M-1200_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01880_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01880_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01880_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01880 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01880_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01880_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01880_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        processParameters = cms.vstring(\n            'SLHA:useDecayTable = off',  # Use pythia8s own decay mode instead of decays defined in LH accord\n            '25:m0 = 125.0',\n            '25:onMode = off',\n            '25:onIfMatch = 5 -5'\n            ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py"
            },
            {
              "cms_confdb_id": "8ef198ab071c3a172b8f7d394f25c31f",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhbb_2HDM_M-1200_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_20",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01517_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01517_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01517_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01517_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZinvhbb_2HDM_M-1200_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01517_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01517_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01517_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01517 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01517_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01517.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01517_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01517_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01517_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01517_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01517 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01517_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01517_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01517_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284abbc32",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284ac4abf",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhbb_2HDM_M-1200_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-01249_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-01249_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-01249_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-01249.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZprimeToZhToZinvhbb_2HDM_M-1200_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-01249_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-01249_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-01249_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-01249 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-01249_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-01249_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-01249_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "c54bcac03a1744a7d7cbc50e514e6eb6",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhbb_2HDM_M-1200_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22015",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZinvhbb_2HDM_M-1200_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZinvhbb_2HDM_M-1200_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZinvhbb_2HDM_M-1400_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 100000,
      "number_files": 3,
      "size": 3027680690
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-01724\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-01724_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-01724_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-01724 --retry 3 --create-dirs -o Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py\n[ -s Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.0538s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.0538s = 0.0538s\n# Which adds up to 0.0538s per event\n# Single core events that fit in validation duration: 20160s / 0.0538s = 374548\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 374548 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py --python_filename EXO-RunIIWinter15wmLHE-01724_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-01724.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-01724_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-01724_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-01724_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-01724 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-01724_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-01724_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-01724_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22016/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22016/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22016/run_card.dat"
            },
            {
              "cms_confdb_id": "8ef198ab071c3a172b8f7d394f2536e5",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhbb_2HDM_M-1400_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_20",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01883\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01883_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01883_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 58.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 58.0000s = 58.0000s\n# Which adds up to 58.0000s per event\n# Single core events that fit in validation duration: 20160s / 58.0000s = 347\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 347 and 10000, but more than 0 -> 347\n# It is estimated that this validation will produce: 347 * 1.0000 = 347 events\nEVENTS=347\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py --python_filename EXO-RunIISummer15GS-01883_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01883.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZinvhbb_2HDM_M-1400_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01883_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01883_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01883_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01883 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01883_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01883_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01883_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        processParameters = cms.vstring(\n            'SLHA:useDecayTable = off',  # Use pythia8s own decay mode instead of decays defined in LH accord\n            '25:m0 = 125.0',\n            '25:onMode = off',\n            '25:onIfMatch = 5 -5'\n            ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py"
            },
            {
              "cms_confdb_id": "8ef198ab071c3a172b8f7d394f25c31f",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhbb_2HDM_M-1400_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_20",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01518_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01518_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01518_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01518_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZinvhbb_2HDM_M-1400_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01518_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01518_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01518_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01518 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01518_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01518.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01518_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01518_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01518_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01518_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01518 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01518_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01518_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01518_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284abbc32",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284ac4abf",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhbb_2HDM_M-1400_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-01250_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-01250_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-01250_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-01250.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZprimeToZhToZinvhbb_2HDM_M-1400_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-01250_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-01250_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-01250_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-01250 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-01250_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-01250_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-01250_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "c54bcac03a1744a7d7cbc50e514e6eb6",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhbb_2HDM_M-1400_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22016",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZinvhbb_2HDM_M-1400_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZinvhbb_2HDM_M-1400_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZinvhbb_2HDM_M-1700_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 100000,
      "number_files": 3,
      "size": 3006371178
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-01725\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-01725_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-01725_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-01725 --retry 3 --create-dirs -o Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py\n[ -s Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.0847s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.0847s = 0.0847s\n# Which adds up to 0.0847s per event\n# Single core events that fit in validation duration: 20160s / 0.0847s = 238057\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 238057 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py --python_filename EXO-RunIIWinter15wmLHE-01725_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-01725.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-01725_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-01725_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-01725_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-01725 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-01725_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-01725_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-01725_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22017/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22017/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22017/run_card.dat"
            },
            {
              "cms_confdb_id": "8ef198ab071c3a172b8f7d394f253b83",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhbb_2HDM_M-1700_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_20",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01884\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01884_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01884_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 109.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 109.0000s = 109.0000s\n# Which adds up to 109.0000s per event\n# Single core events that fit in validation duration: 20160s / 109.0000s = 184\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 184 and 10000, but more than 0 -> 184\n# It is estimated that this validation will produce: 184 * 1.0000 = 184 events\nEVENTS=184\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py --python_filename EXO-RunIISummer15GS-01884_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01884.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZinvhbb_2HDM_M-1700_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01884_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01884_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01884_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01884 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01884_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01884_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01884_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        processParameters = cms.vstring(\n            'SLHA:useDecayTable = off',  # Use pythia8s own decay mode instead of decays defined in LH accord\n            '25:m0 = 125.0',\n            '25:onMode = off',\n            '25:onIfMatch = 5 -5'\n            ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py"
            },
            {
              "cms_confdb_id": "8ef198ab071c3a172b8f7d394f25c31f",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhbb_2HDM_M-1700_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_20",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01519_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01519_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01519_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01519_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZinvhbb_2HDM_M-1700_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01519_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01519_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01519_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01519 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01519_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01519.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01519_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01519_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01519_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01519_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01519 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01519_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01519_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01519_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284abbc32",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284ac4abf",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhbb_2HDM_M-1700_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-01251_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-01251_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-01251_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-01251.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZprimeToZhToZinvhbb_2HDM_M-1700_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-01251_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-01251_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-01251_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-01251 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-01251_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-01251_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-01251_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "c54bcac03a1744a7d7cbc50e514e6eb6",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhbb_2HDM_M-1700_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22017",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZinvhbb_2HDM_M-1700_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZinvhbb_2HDM_M-1700_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZinvhbb_2HDM_M-2000_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 99800,
      "number_files": 3,
      "size": 2968934221
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-01726\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-01726_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-01726_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-01726 --retry 3 --create-dirs -o Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py\n[ -s Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.0731s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.0731s = 0.0731s\n# Which adds up to 0.0731s per event\n# Single core events that fit in validation duration: 20160s / 0.0731s = 275857\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 275857 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py --python_filename EXO-RunIIWinter15wmLHE-01726_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-01726.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-01726_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-01726_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-01726_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-01726 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-01726_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-01726_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-01726_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22018/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22018/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22018/run_card.dat"
            },
            {
              "cms_confdb_id": "8ef198ab071c3a172b8f7d394f2575c6",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhbb_2HDM_M-2000_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_20",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01885\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01885_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01885_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 100.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 100.0000s = 100.0000s\n# Which adds up to 100.0000s per event\n# Single core events that fit in validation duration: 20160s / 100.0000s = 201\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 201 and 10000, but more than 0 -> 201\n# It is estimated that this validation will produce: 201 * 1.0000 = 201 events\nEVENTS=201\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py --python_filename EXO-RunIISummer15GS-01885_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01885.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZinvhbb_2HDM_M-2000_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01885_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01885_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01885_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01885 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01885_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01885_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01885_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        processParameters = cms.vstring(\n            'SLHA:useDecayTable = off',  # Use pythia8s own decay mode instead of decays defined in LH accord\n            '25:m0 = 125.0',\n            '25:onMode = off',\n            '25:onIfMatch = 5 -5'\n            ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py"
            },
            {
              "cms_confdb_id": "8ef198ab071c3a172b8f7d394f25c31f",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhbb_2HDM_M-2000_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_20",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01520_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01520_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01520_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01520_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZinvhbb_2HDM_M-2000_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01520_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01520_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01520_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01520 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01520_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01520.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01520_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01520_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01520_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01520_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01520 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01520_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01520_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01520_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284abbc32",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284ac4abf",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhbb_2HDM_M-2000_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-01252_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-01252_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-01252_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-01252.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZprimeToZhToZinvhbb_2HDM_M-2000_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-01252_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-01252_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-01252_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-01252 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-01252_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-01252_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-01252_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "c54bcac03a1744a7d7cbc50e514e6eb6",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhbb_2HDM_M-2000_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22018",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZinvhbb_2HDM_M-2000_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZinvhbb_2HDM_M-2000_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZinvhbb_2HDM_M-2500_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 99600,
      "number_files": 4,
      "size": 3043016622
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-01727\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-01727_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-01727_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-01727 --retry 3 --create-dirs -o Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py\n[ -s Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.0885s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.0885s = 0.0885s\n# Which adds up to 0.0885s per event\n# Single core events that fit in validation duration: 20160s / 0.0885s = 227904\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 227904 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py --python_filename EXO-RunIIWinter15wmLHE-01727_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-01727.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-01727_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-01727_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-01727_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-01727 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-01727_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-01727_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-01727_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22019/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22019/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22019/run_card.dat"
            },
            {
              "cms_confdb_id": "8ef198ab071c3a172b8f7d394f258819",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhbb_2HDM_M-2500_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_20",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01886\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01886_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01886_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 154.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 154.0000s = 154.0000s\n# Which adds up to 154.0000s per event\n# Single core events that fit in validation duration: 20160s / 154.0000s = 130\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 130 and 10000, but more than 0 -> 130\n# It is estimated that this validation will produce: 130 * 1.0000 = 130 events\nEVENTS=130\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py --python_filename EXO-RunIISummer15GS-01886_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01886.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZinvhbb_2HDM_M-2500_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01886_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01886_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01886_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01886 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01886_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01886_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01886_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        processParameters = cms.vstring(\n            'SLHA:useDecayTable = off',  # Use pythia8s own decay mode instead of decays defined in LH accord\n            '25:m0 = 125.0',\n            '25:onMode = off',\n            '25:onIfMatch = 5 -5'\n            ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py"
            },
            {
              "cms_confdb_id": "8ef198ab071c3a172b8f7d394f25c31f",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhbb_2HDM_M-2500_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_20",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01521_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01521_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01521_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01521_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZinvhbb_2HDM_M-2500_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01521_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01521_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01521_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01521 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01521_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01521.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01521_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01521_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01521_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01521_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01521 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01521_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01521_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01521_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284abbc32",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284ac4abf",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhbb_2HDM_M-2500_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-01253_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-01253_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-01253_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-01253.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZprimeToZhToZinvhbb_2HDM_M-2500_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-01253_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-01253_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-01253_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-01253 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-01253_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-01253_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-01253_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "c54bcac03a1744a7d7cbc50e514e6eb6",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhbb_2HDM_M-2500_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22019",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZinvhbb_2HDM_M-2500_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZinvhbb_2HDM_M-2500_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZinvhbb_2HDM_M-600_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 100000,
      "number_files": 3,
      "size": 2768367690
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-01720\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-01720_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-01720_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-01720 --retry 3 --create-dirs -o Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py\n[ -s Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.0641s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.0641s = 0.0641s\n# Which adds up to 0.0641s per event\n# Single core events that fit in validation duration: 20160s / 0.0641s = 314406\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 314406 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py --python_filename EXO-RunIIWinter15wmLHE-01720_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-01720.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-01720_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-01720_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-01720_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-01720 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-01720_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-01720_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-01720_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22020/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22020/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22020/run_card.dat"
            },
            {
              "cms_confdb_id": "8ef198ab071c3a172b8f7d394f24aed2",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhbb_2HDM_M-600_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_20",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01879\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01879_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01879_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 68.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 68.0000s = 68.0000s\n# Which adds up to 68.0000s per event\n# Single core events that fit in validation duration: 20160s / 68.0000s = 296\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 296 and 10000, but more than 0 -> 296\n# It is estimated that this validation will produce: 296 * 1.0000 = 296 events\nEVENTS=296\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py --python_filename EXO-RunIISummer15GS-01879_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01879.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZinvhbb_2HDM_M-600_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01879_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01879_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01879_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01879 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01879_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01879_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01879_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        processParameters = cms.vstring(\n            'SLHA:useDecayTable = off',  # Use pythia8s own decay mode instead of decays defined in LH accord\n            '25:m0 = 125.0',\n            '25:onMode = off',\n            '25:onIfMatch = 5 -5'\n            ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py"
            },
            {
              "cms_confdb_id": "8ef198ab071c3a172b8f7d394f25c31f",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhbb_2HDM_M-600_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_20",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01514_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01514_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01514_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01514_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZinvhbb_2HDM_M-600_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01514_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01514_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01514_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01514 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01514_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01514.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01514_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01514_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01514_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01514_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01514 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01514_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01514_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01514_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284abbc32",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284ac4abf",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhbb_2HDM_M-600_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-01246_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-01246_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-01246_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-01246.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZprimeToZhToZinvhbb_2HDM_M-600_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-01246_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-01246_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-01246_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-01246 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-01246_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-01246_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-01246_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "c54bcac03a1744a7d7cbc50e514e6eb6",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhbb_2HDM_M-600_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22020",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZinvhbb_2HDM_M-600_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZinvhbb_2HDM_M-600_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZinvhbb_2HDM_M-800_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 100000,
      "number_files": 3,
      "size": 2934684721
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-01721\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-01721_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-01721_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-01721 --retry 3 --create-dirs -o Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py\n[ -s Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.0437s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.0437s = 0.0437s\n# Which adds up to 0.0437s per event\n# Single core events that fit in validation duration: 20160s / 0.0437s = 461654\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 461654 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py --python_filename EXO-RunIIWinter15wmLHE-01721_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-01721.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-01721_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-01721_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-01721_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-01721 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-01721_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-01721_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-01721_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22021/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22021/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22021/run_card.dat"
            },
            {
              "cms_confdb_id": "8ef198ab071c3a172b8f7d394f24cae5",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhbb_2HDM_M-800_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_20",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01881\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01881_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01881_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 33.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 33.0000s = 33.0000s\n# Which adds up to 33.0000s per event\n# Single core events that fit in validation duration: 20160s / 33.0000s = 610\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 610 and 10000, but more than 0 -> 610\n# It is estimated that this validation will produce: 610 * 1.0000 = 610 events\nEVENTS=610\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py --python_filename EXO-RunIISummer15GS-01881_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01881.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZinvhbb_2HDM_M-800_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01881_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01881_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01881_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01881 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01881_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01881_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01881_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        processParameters = cms.vstring(\n            'SLHA:useDecayTable = off',  # Use pythia8s own decay mode instead of decays defined in LH accord\n            '25:m0 = 125.0',\n            '25:onMode = off',\n            '25:onIfMatch = 5 -5'\n            ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Hbb_cff.py"
            },
            {
              "cms_confdb_id": "8ef198ab071c3a172b8f7d394f25c31f",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhbb_2HDM_M-800_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_20",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01515_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01515_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01515_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01515_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZinvhbb_2HDM_M-800_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01515_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01515_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01515_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01515 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01515_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01515.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01515_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01515_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01515_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01515_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01515 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01515_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01515_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01515_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284abbc32",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284ac4abf",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhbb_2HDM_M-800_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-01247_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-01247_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-01247_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-01247.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZprimeToZhToZinvhbb_2HDM_M-800_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-01247_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-01247_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-01247_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-01247 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-01247_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-01247_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-01247_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "c54bcac03a1744a7d7cbc50e514e6eb6",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhbb_2HDM_M-800_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22021",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZinvhbb_2HDM_M-800_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZinvhbb_2HDM_M-800_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZinvhbb_narrow_M-1000_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 99200,
      "number_files": 2,
      "size": 2869863718
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00510\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00510_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00510_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_17/src ] ; then\n  echo release CMSSW_7_1_17 already exists\nelse\n  scram p CMSSW CMSSW_7_1_17\nfi\ncd CMSSW_7_1_17/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/f87ff5a577e43aba9ad583cb1ec9ef550155b0fe/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M1000_13TeV-madgraph_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M1000_13TeV-madgraph_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M1000_13TeV-madgraph_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M1000_13TeV-madgraph_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M1000_13TeV-madgraph_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.1246s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.1246s = 0.1246s\n# Which adds up to 0.1246s per event\n# Single core events that fit in validation duration: 20160s / 0.1246s = 161831\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 161831 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M1000_13TeV-madgraph_cff.py --python_filename EXO-RunIIWinter15wmLHE-00510_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00510.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00510_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00510_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00510_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00510 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00510_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00510_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00510_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22022/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22022/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22022/run_card.dat"
            },
            {
              "cms_confdb_id": "96490b874f0444ea3eb061dff0d9b630",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhbb_narrow_M-1000_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v2/LHE",
          "release": "CMSSW_7_1_17",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01405\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01405_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01405_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_19/src ] ; then\n  echo release CMSSW_7_1_19 already exists\nelse\n  scram p CMSSW CMSSW_7_1_19\nfi\ncd CMSSW_7_1_19/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/f87ff5a577e43aba9ad583cb1ec9ef550155b0fe/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 137.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 137.0000s = 137.0000s\n# Which adds up to 137.0000s per event\n# Single core events that fit in validation duration: 20160s / 137.0000s = 147\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 147 and 10000, but more than 0 -> 147\n# It is estimated that this validation will produce: 147 * 1.0000 = 147 events\nEVENTS=147\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-01405_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01405.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZinvhbb_narrow_M-1000_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v2/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01405_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01405_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01405_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01405 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01405_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01405_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01405_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\n\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n    maxEventsToPrint = cms.untracked.int32(1),\n    pythiaPylistVerbosity = cms.untracked.int32(1),\n    filterEfficiency = cms.untracked.double(1.0),\n    pythiaHepMCVerbosity = cms.untracked.bool(False),\n    comEnergy = cms.double(13000.),\n    PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    )\n    )\n)\n\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/f87ff5a577e43aba9ad583cb1ec9ef550155b0fe/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "ac5f98aa6f7a4dfdb129beb58c0f6ac4",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhbb_narrow_M-1000_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_19",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01443_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01443_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01443_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01443_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZinvhbb_narrow_M-1000_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01443_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01443_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01443_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01443 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01443_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01443.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01443_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01443_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01443_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01443_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01443 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01443_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01443_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01443_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284abbc32",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284ac4abf",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhbb_narrow_M-1000_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-01181_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-01181_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-01181_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-01181.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZprimeToZhToZinvhbb_narrow_M-1000_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-01181_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-01181_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-01181_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-01181 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-01181_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-01181_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-01181_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "744109404cdf471f6e79fd983bdf69e1",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhbb_narrow_M-1000_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22022",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZinvhbb_narrow_M-1000_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZinvhbb_narrow_M-1000_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZinvhbb_narrow_M-1200_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 100000,
      "number_files": 3,
      "size": 2918286203
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00511\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00511_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00511_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_17/src ] ; then\n  echo release CMSSW_7_1_17 already exists\nelse\n  scram p CMSSW CMSSW_7_1_17\nfi\ncd CMSSW_7_1_17/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/f87ff5a577e43aba9ad583cb1ec9ef550155b0fe/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M1200_13TeV-madgraph_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M1200_13TeV-madgraph_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M1200_13TeV-madgraph_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M1200_13TeV-madgraph_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M1200_13TeV-madgraph_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.1034s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.1034s = 0.1034s\n# Which adds up to 0.1034s per event\n# Single core events that fit in validation duration: 20160s / 0.1034s = 195061\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 195061 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M1200_13TeV-madgraph_cff.py --python_filename EXO-RunIIWinter15wmLHE-00511_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00511.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00511_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00511_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00511_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00511 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00511_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00511_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00511_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22023/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22023/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22023/run_card.dat"
            },
            {
              "cms_confdb_id": "96490b874f0444ea3eb061dff0d9adc4",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhbb_narrow_M-1200_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_17",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01403\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01403_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01403_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_19/src ] ; then\n  echo release CMSSW_7_1_19 already exists\nelse\n  scram p CMSSW CMSSW_7_1_19\nfi\ncd CMSSW_7_1_19/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/f87ff5a577e43aba9ad583cb1ec9ef550155b0fe/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 129.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 129.0000s = 129.0000s\n# Which adds up to 129.0000s per event\n# Single core events that fit in validation duration: 20160s / 129.0000s = 156\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 156 and 10000, but more than 0 -> 156\n# It is estimated that this validation will produce: 156 * 1.0000 = 156 events\nEVENTS=156\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-01403_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01403.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZinvhbb_narrow_M-1200_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01403_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01403_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01403_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01403 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01403_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01403_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01403_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\n\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n    maxEventsToPrint = cms.untracked.int32(1),\n    pythiaPylistVerbosity = cms.untracked.int32(1),\n    filterEfficiency = cms.untracked.double(1.0),\n    pythiaHepMCVerbosity = cms.untracked.bool(False),\n    comEnergy = cms.double(13000.),\n    PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    )\n    )\n)\n\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/f87ff5a577e43aba9ad583cb1ec9ef550155b0fe/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "ac5f98aa6f7a4dfdb129beb58c0f6ac4",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhbb_narrow_M-1200_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_19",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01444_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01444_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01444_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01444_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZinvhbb_narrow_M-1200_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01444_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01444_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01444_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01444 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01444_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01444.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01444_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01444_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01444_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01444_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01444 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01444_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01444_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01444_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284abbc32",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284ac4abf",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhbb_narrow_M-1200_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-01182_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-01182_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-01182_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-01182.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZprimeToZhToZinvhbb_narrow_M-1200_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-01182_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-01182_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-01182_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-01182 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-01182_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-01182_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-01182_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "744109404cdf471f6e79fd983bdf69e1",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhbb_narrow_M-1200_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22023",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZinvhbb_narrow_M-1200_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZinvhbb_narrow_M-1200_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZinvhbb_narrow_M-1400_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 100000,
      "number_files": 3,
      "size": 3003379645
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00512\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00512_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00512_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_17/src ] ; then\n  echo release CMSSW_7_1_17 already exists\nelse\n  scram p CMSSW CMSSW_7_1_17\nfi\ncd CMSSW_7_1_17/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/f87ff5a577e43aba9ad583cb1ec9ef550155b0fe/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M1400_13TeV-madgraph_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M1400_13TeV-madgraph_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M1400_13TeV-madgraph_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M1400_13TeV-madgraph_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M1400_13TeV-madgraph_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.1178s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.1178s = 0.1178s\n# Which adds up to 0.1178s per event\n# Single core events that fit in validation duration: 20160s / 0.1178s = 171179\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 171179 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M1400_13TeV-madgraph_cff.py --python_filename EXO-RunIIWinter15wmLHE-00512_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00512.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00512_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00512_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00512_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00512 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00512_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00512_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00512_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22024/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22024/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22024/run_card.dat"
            },
            {
              "cms_confdb_id": "96490b874f0444ea3eb061dff0d9b7b5",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhbb_narrow_M-1400_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v2/LHE",
          "release": "CMSSW_7_1_17",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01399\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01399_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01399_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_19/src ] ; then\n  echo release CMSSW_7_1_19 already exists\nelse\n  scram p CMSSW CMSSW_7_1_19\nfi\ncd CMSSW_7_1_19/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/f87ff5a577e43aba9ad583cb1ec9ef550155b0fe/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 113.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 113.0000s = 113.0000s\n# Which adds up to 113.0000s per event\n# Single core events that fit in validation duration: 20160s / 113.0000s = 178\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 178 and 10000, but more than 0 -> 178\n# It is estimated that this validation will produce: 178 * 1.0000 = 178 events\nEVENTS=178\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-01399_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01399.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZinvhbb_narrow_M-1400_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v2/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01399_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01399_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01399_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01399 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01399_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01399_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01399_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\n\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n    maxEventsToPrint = cms.untracked.int32(1),\n    pythiaPylistVerbosity = cms.untracked.int32(1),\n    filterEfficiency = cms.untracked.double(1.0),\n    pythiaHepMCVerbosity = cms.untracked.bool(False),\n    comEnergy = cms.double(13000.),\n    PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    )\n    )\n)\n\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/f87ff5a577e43aba9ad583cb1ec9ef550155b0fe/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "ac5f98aa6f7a4dfdb129beb58c0f6ac4",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhbb_narrow_M-1400_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_19",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01445_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01445_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01445_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01445_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZinvhbb_narrow_M-1400_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01445_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01445_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01445_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01445 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01445_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01445.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01445_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01445_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01445_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01445_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01445 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01445_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01445_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01445_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284abbc32",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284ac4abf",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhbb_narrow_M-1400_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-01183_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-01183_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-01183_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-01183.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZprimeToZhToZinvhbb_narrow_M-1400_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-01183_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-01183_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-01183_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-01183 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-01183_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-01183_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-01183_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "744109404cdf471f6e79fd983bdf69e1",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhbb_narrow_M-1400_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22024",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZinvhbb_narrow_M-1400_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZinvhbb_narrow_M-1400_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZinvhbb_narrow_M-1600_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 97600,
      "number_files": 3,
      "size": 2921671200
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00513\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00513_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00513_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_17/src ] ; then\n  echo release CMSSW_7_1_17 already exists\nelse\n  scram p CMSSW CMSSW_7_1_17\nfi\ncd CMSSW_7_1_17/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/f87ff5a577e43aba9ad583cb1ec9ef550155b0fe/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M1600_13TeV-madgraph_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M1600_13TeV-madgraph_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M1600_13TeV-madgraph_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M1600_13TeV-madgraph_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M1600_13TeV-madgraph_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.1324s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.1324s = 0.1324s\n# Which adds up to 0.1324s per event\n# Single core events that fit in validation duration: 20160s / 0.1324s = 152233\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 152233 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M1600_13TeV-madgraph_cff.py --python_filename EXO-RunIIWinter15wmLHE-00513_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00513.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00513_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00513_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00513_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00513 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00513_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00513_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00513_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22025/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22025/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22025/run_card.dat"
            },
            {
              "cms_confdb_id": "96490b874f0444ea3eb061dff0d9bc37",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhbb_narrow_M-1600_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_17",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01400\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01400_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01400_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_19/src ] ; then\n  echo release CMSSW_7_1_19 already exists\nelse\n  scram p CMSSW CMSSW_7_1_19\nfi\ncd CMSSW_7_1_19/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/f87ff5a577e43aba9ad583cb1ec9ef550155b0fe/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 81.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 81.0000s = 81.0000s\n# Which adds up to 81.0000s per event\n# Single core events that fit in validation duration: 20160s / 81.0000s = 248\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 248 and 10000, but more than 0 -> 248\n# It is estimated that this validation will produce: 248 * 1.0000 = 248 events\nEVENTS=248\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-01400_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01400.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZinvhbb_narrow_M-1600_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01400_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01400_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01400_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01400 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01400_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01400_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01400_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\n\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n    maxEventsToPrint = cms.untracked.int32(1),\n    pythiaPylistVerbosity = cms.untracked.int32(1),\n    filterEfficiency = cms.untracked.double(1.0),\n    pythiaHepMCVerbosity = cms.untracked.bool(False),\n    comEnergy = cms.double(13000.),\n    PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    )\n    )\n)\n\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/f87ff5a577e43aba9ad583cb1ec9ef550155b0fe/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "ac5f98aa6f7a4dfdb129beb58c0f6ac4",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhbb_narrow_M-1600_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_19",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01446_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01446_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01446_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01446_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZinvhbb_narrow_M-1600_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01446_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01446_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01446_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01446 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01446_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01446.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01446_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01446_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01446_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01446_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01446 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01446_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01446_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01446_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284abbc32",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284ac4abf",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhbb_narrow_M-1600_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-01184_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-01184_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-01184_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-01184.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZprimeToZhToZinvhbb_narrow_M-1600_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-01184_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-01184_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-01184_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-01184 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-01184_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-01184_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-01184_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "744109404cdf471f6e79fd983bdf69e1",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhbb_narrow_M-1600_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22025",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZinvhbb_narrow_M-1600_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZinvhbb_narrow_M-1600_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZinvhbb_narrow_M-1800_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 98400,
      "number_files": 3,
      "size": 2956352227
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00514\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00514_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00514_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_17/src ] ; then\n  echo release CMSSW_7_1_17 already exists\nelse\n  scram p CMSSW CMSSW_7_1_17\nfi\ncd CMSSW_7_1_17/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/f87ff5a577e43aba9ad583cb1ec9ef550155b0fe/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M1800_13TeV-madgraph_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M1800_13TeV-madgraph_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M1800_13TeV-madgraph_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M1800_13TeV-madgraph_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M1800_13TeV-madgraph_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.1148s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.1148s = 0.1148s\n# Which adds up to 0.1148s per event\n# Single core events that fit in validation duration: 20160s / 0.1148s = 175559\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 175559 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M1800_13TeV-madgraph_cff.py --python_filename EXO-RunIIWinter15wmLHE-00514_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00514.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00514_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00514_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00514_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00514 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00514_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00514_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00514_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22026/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22026/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22026/run_card.dat"
            },
            {
              "cms_confdb_id": "96490b874f0444ea3eb061dff0d9c147",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhbb_narrow_M-1800_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_17",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01406\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01406_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01406_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_19/src ] ; then\n  echo release CMSSW_7_1_19 already exists\nelse\n  scram p CMSSW CMSSW_7_1_19\nfi\ncd CMSSW_7_1_19/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/f87ff5a577e43aba9ad583cb1ec9ef550155b0fe/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 93.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 93.0000s = 93.0000s\n# Which adds up to 93.0000s per event\n# Single core events that fit in validation duration: 20160s / 93.0000s = 216\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 216 and 10000, but more than 0 -> 216\n# It is estimated that this validation will produce: 216 * 1.0000 = 216 events\nEVENTS=216\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-01406_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01406.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZinvhbb_narrow_M-1800_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01406_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01406_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01406_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01406 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01406_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01406_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01406_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\n\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n    maxEventsToPrint = cms.untracked.int32(1),\n    pythiaPylistVerbosity = cms.untracked.int32(1),\n    filterEfficiency = cms.untracked.double(1.0),\n    pythiaHepMCVerbosity = cms.untracked.bool(False),\n    comEnergy = cms.double(13000.),\n    PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    )\n    )\n)\n\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/f87ff5a577e43aba9ad583cb1ec9ef550155b0fe/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "ac5f98aa6f7a4dfdb129beb58c0f6ac4",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhbb_narrow_M-1800_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_19",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01447_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01447_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01447_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01447_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZinvhbb_narrow_M-1800_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01447_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01447_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01447_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01447 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01447_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01447.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01447_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01447_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01447_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01447_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01447 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01447_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01447_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01447_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284abbc32",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284ac4abf",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhbb_narrow_M-1800_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-01185_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-01185_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-01185_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-01185.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZprimeToZhToZinvhbb_narrow_M-1800_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-01185_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-01185_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-01185_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-01185 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-01185_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-01185_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-01185_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "744109404cdf471f6e79fd983bdf69e1",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhbb_narrow_M-1800_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22026",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZinvhbb_narrow_M-1800_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZinvhbb_narrow_M-1800_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZinvhbb_narrow_M-2000_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 99200,
      "number_files": 3,
      "size": 2957679472
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00515\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00515_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00515_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_17/src ] ; then\n  echo release CMSSW_7_1_17 already exists\nelse\n  scram p CMSSW CMSSW_7_1_17\nfi\ncd CMSSW_7_1_17/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/f87ff5a577e43aba9ad583cb1ec9ef550155b0fe/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M2000_13TeV-madgraph_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M2000_13TeV-madgraph_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M2000_13TeV-madgraph_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M2000_13TeV-madgraph_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M2000_13TeV-madgraph_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.1285s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.1285s = 0.1285s\n# Which adds up to 0.1285s per event\n# Single core events that fit in validation duration: 20160s / 0.1285s = 156939\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 156939 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M2000_13TeV-madgraph_cff.py --python_filename EXO-RunIIWinter15wmLHE-00515_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00515.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00515_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00515_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00515_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00515 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00515_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00515_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00515_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22027/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22027/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22027/run_card.dat"
            },
            {
              "cms_confdb_id": "96490b874f0444ea3eb061dff0d9cd88",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhbb_narrow_M-2000_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_17",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01407\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01407_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01407_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_19/src ] ; then\n  echo release CMSSW_7_1_19 already exists\nelse\n  scram p CMSSW CMSSW_7_1_19\nfi\ncd CMSSW_7_1_19/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/f87ff5a577e43aba9ad583cb1ec9ef550155b0fe/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 65.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 65.0000s = 65.0000s\n# Which adds up to 65.0000s per event\n# Single core events that fit in validation duration: 20160s / 65.0000s = 310\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 310 and 10000, but more than 0 -> 310\n# It is estimated that this validation will produce: 310 * 1.0000 = 310 events\nEVENTS=310\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-01407_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01407.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZinvhbb_narrow_M-2000_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01407_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01407_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01407_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01407 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01407_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01407_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01407_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\n\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n    maxEventsToPrint = cms.untracked.int32(1),\n    pythiaPylistVerbosity = cms.untracked.int32(1),\n    filterEfficiency = cms.untracked.double(1.0),\n    pythiaHepMCVerbosity = cms.untracked.bool(False),\n    comEnergy = cms.double(13000.),\n    PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    )\n    )\n)\n\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/f87ff5a577e43aba9ad583cb1ec9ef550155b0fe/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "ac5f98aa6f7a4dfdb129beb58c0f6ac4",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhbb_narrow_M-2000_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_19",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01448_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01448_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01448_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01448_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZinvhbb_narrow_M-2000_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01448_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01448_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01448_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01448 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01448_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01448.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01448_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01448_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01448_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01448_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01448 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01448_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01448_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01448_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284abbc32",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284ac4abf",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhbb_narrow_M-2000_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-01561_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-01561_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-01561_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-01561.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZprimeToZhToZinvhbb_narrow_M-2000_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-01561_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-01561_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-01561_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-01561 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-01561_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-01561_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-01561_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "33b9cac79bd8650401638666f780e8c5",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhbb_narrow_M-2000_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22027",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZinvhbb_narrow_M-2000_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZinvhbb_narrow_M-2000_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZinvhbb_narrow_M-2500_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 99200,
      "number_files": 3,
      "size": 3026912599
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00516\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00516_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00516_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_17/src ] ; then\n  echo release CMSSW_7_1_17 already exists\nelse\n  scram p CMSSW CMSSW_7_1_17\nfi\ncd CMSSW_7_1_17/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/f87ff5a577e43aba9ad583cb1ec9ef550155b0fe/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M2500_13TeV-madgraph_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M2500_13TeV-madgraph_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M2500_13TeV-madgraph_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M2500_13TeV-madgraph_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M2500_13TeV-madgraph_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.1326s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.1326s = 0.1326s\n# Which adds up to 0.1326s per event\n# Single core events that fit in validation duration: 20160s / 0.1326s = 152082\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 152082 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M2500_13TeV-madgraph_cff.py --python_filename EXO-RunIIWinter15wmLHE-00516_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00516.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00516_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00516_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00516_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00516 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00516_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00516_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00516_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22028/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22028/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22028/run_card.dat"
            },
            {
              "cms_confdb_id": "96490b874f0444ea3eb061dff0d9db47",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhbb_narrow_M-2500_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_17",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01408\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01408_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01408_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_19/src ] ; then\n  echo release CMSSW_7_1_19 already exists\nelse\n  scram p CMSSW CMSSW_7_1_19\nfi\ncd CMSSW_7_1_19/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/f87ff5a577e43aba9ad583cb1ec9ef550155b0fe/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 101.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 101.0000s = 101.0000s\n# Which adds up to 101.0000s per event\n# Single core events that fit in validation duration: 20160s / 101.0000s = 199\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 199 and 10000, but more than 0 -> 199\n# It is estimated that this validation will produce: 199 * 1.0000 = 199 events\nEVENTS=199\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-01408_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01408.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZinvhbb_narrow_M-2500_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01408_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01408_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01408_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01408 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01408_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01408_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01408_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\n\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n    maxEventsToPrint = cms.untracked.int32(1),\n    pythiaPylistVerbosity = cms.untracked.int32(1),\n    filterEfficiency = cms.untracked.double(1.0),\n    pythiaHepMCVerbosity = cms.untracked.bool(False),\n    comEnergy = cms.double(13000.),\n    PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    )\n    )\n)\n\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/f87ff5a577e43aba9ad583cb1ec9ef550155b0fe/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "ac5f98aa6f7a4dfdb129beb58c0f6ac4",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhbb_narrow_M-2500_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_19",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01449_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01449_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01449_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01449_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZinvhbb_narrow_M-2500_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01449_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01449_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01449_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01449 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01449_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01449.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01449_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01449_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01449_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01449_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01449 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01449_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01449_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01449_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284abbc32",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284ac4abf",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhbb_narrow_M-2500_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-01186_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-01186_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-01186_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-01186.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZprimeToZhToZinvhbb_narrow_M-2500_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-01186_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-01186_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-01186_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-01186 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-01186_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-01186_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-01186_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "744109404cdf471f6e79fd983bdf69e1",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhbb_narrow_M-2500_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22028",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZinvhbb_narrow_M-2500_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZinvhbb_narrow_M-2500_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZinvhbb_narrow_M-3000_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 99200,
      "number_files": 3,
      "size": 3047516022
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00517\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00517_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00517_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_17/src ] ; then\n  echo release CMSSW_7_1_17 already exists\nelse\n  scram p CMSSW CMSSW_7_1_17\nfi\ncd CMSSW_7_1_17/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/f87ff5a577e43aba9ad583cb1ec9ef550155b0fe/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M3000_13TeV-madgraph_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M3000_13TeV-madgraph_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M3000_13TeV-madgraph_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M3000_13TeV-madgraph_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M3000_13TeV-madgraph_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.0913s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.0913s = 0.0913s\n# Which adds up to 0.0913s per event\n# Single core events that fit in validation duration: 20160s / 0.0913s = 220776\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 220776 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M3000_13TeV-madgraph_cff.py --python_filename EXO-RunIIWinter15wmLHE-00517_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00517.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00517_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00517_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00517_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00517 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00517_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00517_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00517_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22029/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22029/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22029/run_card.dat"
            },
            {
              "cms_confdb_id": "96490b874f0444ea3eb061dff0d9f793",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhbb_narrow_M-3000_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_17",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01409\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01409_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01409_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_19/src ] ; then\n  echo release CMSSW_7_1_19 already exists\nelse\n  scram p CMSSW CMSSW_7_1_19\nfi\ncd CMSSW_7_1_19/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/f87ff5a577e43aba9ad583cb1ec9ef550155b0fe/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 126.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 126.0000s = 126.0000s\n# Which adds up to 126.0000s per event\n# Single core events that fit in validation duration: 20160s / 126.0000s = 160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 160 and 10000, but more than 0 -> 160\n# It is estimated that this validation will produce: 160 * 1.0000 = 160 events\nEVENTS=160\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-01409_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01409.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZinvhbb_narrow_M-3000_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01409_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01409_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01409_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01409 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01409_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01409_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01409_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\n\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n    maxEventsToPrint = cms.untracked.int32(1),\n    pythiaPylistVerbosity = cms.untracked.int32(1),\n    filterEfficiency = cms.untracked.double(1.0),\n    pythiaHepMCVerbosity = cms.untracked.bool(False),\n    comEnergy = cms.double(13000.),\n    PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    )\n    )\n)\n\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/f87ff5a577e43aba9ad583cb1ec9ef550155b0fe/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "ac5f98aa6f7a4dfdb129beb58c0f6ac4",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhbb_narrow_M-3000_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_19",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01450_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01450_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01450_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01450_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZinvhbb_narrow_M-3000_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01450_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01450_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01450_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01450 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01450_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01450.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01450_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01450_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01450_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01450_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01450 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01450_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01450_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01450_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284abbc32",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284ac4abf",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhbb_narrow_M-3000_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-01187_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-01187_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-01187_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-01187.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZprimeToZhToZinvhbb_narrow_M-3000_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-01187_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-01187_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-01187_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-01187 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-01187_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-01187_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-01187_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "744109404cdf471f6e79fd983bdf69e1",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhbb_narrow_M-3000_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v3/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22029",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZinvhbb_narrow_M-3000_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v3/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZinvhbb_narrow_M-3000_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZinvhbb_narrow_M-3500_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 99400,
      "number_files": 3,
      "size": 3067998691
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00518\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00518_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00518_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_17/src ] ; then\n  echo release CMSSW_7_1_17 already exists\nelse\n  scram p CMSSW CMSSW_7_1_17\nfi\ncd CMSSW_7_1_17/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/f87ff5a577e43aba9ad583cb1ec9ef550155b0fe/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M3500_13TeV-madgraph_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M3500_13TeV-madgraph_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M3500_13TeV-madgraph_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M3500_13TeV-madgraph_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M3500_13TeV-madgraph_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.1300s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.1300s = 0.1300s\n# Which adds up to 0.1300s per event\n# Single core events that fit in validation duration: 20160s / 0.1300s = 155091\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 155091 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M3500_13TeV-madgraph_cff.py --python_filename EXO-RunIIWinter15wmLHE-00518_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00518.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00518_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00518_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00518_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00518 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00518_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00518_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00518_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22030/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22030/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22030/run_card.dat"
            },
            {
              "cms_confdb_id": "96490b874f0444ea3eb061dff0d9fd90",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhbb_narrow_M-3500_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v2/LHE",
          "release": "CMSSW_7_1_17",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01410\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01410_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01410_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_19/src ] ; then\n  echo release CMSSW_7_1_19 already exists\nelse\n  scram p CMSSW CMSSW_7_1_19\nfi\ncd CMSSW_7_1_19/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/f87ff5a577e43aba9ad583cb1ec9ef550155b0fe/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 204.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 204.0000s = 204.0000s\n# Which adds up to 204.0000s per event\n# Single core events that fit in validation duration: 20160s / 204.0000s = 98\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 98 and 10000, but more than 0 -> 98\n# It is estimated that this validation will produce: 98 * 1.0000 = 98 events\nEVENTS=98\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-01410_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01410.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZinvhbb_narrow_M-3500_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v2/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01410_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01410_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01410_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01410 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01410_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01410_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01410_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\n\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n    maxEventsToPrint = cms.untracked.int32(1),\n    pythiaPylistVerbosity = cms.untracked.int32(1),\n    filterEfficiency = cms.untracked.double(1.0),\n    pythiaHepMCVerbosity = cms.untracked.bool(False),\n    comEnergy = cms.double(13000.),\n    PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    )\n    )\n)\n\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/f87ff5a577e43aba9ad583cb1ec9ef550155b0fe/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "ac5f98aa6f7a4dfdb129beb58c0f6ac4",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhbb_narrow_M-3500_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_19",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01451_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01451_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01451_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01451_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZinvhbb_narrow_M-3500_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01451_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01451_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01451_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01451 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01451_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01451.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01451_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01451_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01451_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01451_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01451 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01451_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01451_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01451_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284abbc32",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284ac4abf",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhbb_narrow_M-3500_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-01188_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-01188_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-01188_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-01188.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZprimeToZhToZinvhbb_narrow_M-3500_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-01188_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-01188_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-01188_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-01188 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-01188_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-01188_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-01188_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "744109404cdf471f6e79fd983bdf69e1",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhbb_narrow_M-3500_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22030",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZinvhbb_narrow_M-3500_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZinvhbb_narrow_M-3500_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZinvhbb_narrow_M-4000_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 100000,
      "number_files": 3,
      "size": 3142834840
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00519\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00519_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00519_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_17/src ] ; then\n  echo release CMSSW_7_1_17 already exists\nelse\n  scram p CMSSW CMSSW_7_1_17\nfi\ncd CMSSW_7_1_17/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/f87ff5a577e43aba9ad583cb1ec9ef550155b0fe/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M4000_13TeV-madgraph_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M4000_13TeV-madgraph_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M4000_13TeV-madgraph_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M4000_13TeV-madgraph_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M4000_13TeV-madgraph_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.1038s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.1038s = 0.1038s\n# Which adds up to 0.1038s per event\n# Single core events that fit in validation duration: 20160s / 0.1038s = 194305\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 194305 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M4000_13TeV-madgraph_cff.py --python_filename EXO-RunIIWinter15wmLHE-00519_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00519.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00519_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00519_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00519_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00519 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00519_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00519_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00519_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22031/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22031/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22031/run_card.dat"
            },
            {
              "cms_confdb_id": "96490b874f0444ea3eb061dff0da0d07",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhbb_narrow_M-4000_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_17",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01411\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01411_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01411_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_19/src ] ; then\n  echo release CMSSW_7_1_19 already exists\nelse\n  scram p CMSSW CMSSW_7_1_19\nfi\ncd CMSSW_7_1_19/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/f87ff5a577e43aba9ad583cb1ec9ef550155b0fe/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 52.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 52.0000s = 52.0000s\n# Which adds up to 52.0000s per event\n# Single core events that fit in validation duration: 20160s / 52.0000s = 387\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 387 and 10000, but more than 0 -> 387\n# It is estimated that this validation will produce: 387 * 1.0000 = 387 events\nEVENTS=387\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-01411_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01411.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZinvhbb_narrow_M-4000_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01411_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01411_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01411_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01411 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01411_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01411_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01411_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\n\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n    maxEventsToPrint = cms.untracked.int32(1),\n    pythiaPylistVerbosity = cms.untracked.int32(1),\n    filterEfficiency = cms.untracked.double(1.0),\n    pythiaHepMCVerbosity = cms.untracked.bool(False),\n    comEnergy = cms.double(13000.),\n    PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    )\n    )\n)\n\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/f87ff5a577e43aba9ad583cb1ec9ef550155b0fe/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "ac5f98aa6f7a4dfdb129beb58c0f6ac4",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhbb_narrow_M-4000_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_19",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01452_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01452_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01452_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01452_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZinvhbb_narrow_M-4000_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01452_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01452_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01452_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01452 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01452_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01452.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01452_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01452_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01452_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01452_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01452 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01452_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01452_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01452_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284abbc32",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284ac4abf",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhbb_narrow_M-4000_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-01189_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-01189_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-01189_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-01189.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZprimeToZhToZinvhbb_narrow_M-4000_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-01189_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-01189_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-01189_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-01189 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-01189_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-01189_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-01189_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "744109404cdf471f6e79fd983bdf69e1",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhbb_narrow_M-4000_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22031",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZinvhbb_narrow_M-4000_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZinvhbb_narrow_M-4000_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZinvhbb_narrow_M-4500_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 99200,
      "number_files": 3,
      "size": 3138644532
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00520\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00520_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00520_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_17/src ] ; then\n  echo release CMSSW_7_1_17 already exists\nelse\n  scram p CMSSW CMSSW_7_1_17\nfi\ncd CMSSW_7_1_17/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/f87ff5a577e43aba9ad583cb1ec9ef550155b0fe/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M4500_13TeV-madgraph_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M4500_13TeV-madgraph_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M4500_13TeV-madgraph_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M4500_13TeV-madgraph_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M4500_13TeV-madgraph_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.0860s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.0860s = 0.0860s\n# Which adds up to 0.0860s per event\n# Single core events that fit in validation duration: 20160s / 0.0860s = 234430\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 234430 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M4500_13TeV-madgraph_cff.py --python_filename EXO-RunIIWinter15wmLHE-00520_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00520.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00520_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00520_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00520_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00520 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00520_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00520_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00520_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22032/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22032/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22032/run_card.dat"
            },
            {
              "cms_confdb_id": "96490b874f0444ea3eb061dff0dcc65c",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhbb_narrow_M-4500_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_17",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01412\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01412_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01412_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_19/src ] ; then\n  echo release CMSSW_7_1_19 already exists\nelse\n  scram p CMSSW CMSSW_7_1_19\nfi\ncd CMSSW_7_1_19/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/f87ff5a577e43aba9ad583cb1ec9ef550155b0fe/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 62.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 62.0000s = 62.0000s\n# Which adds up to 62.0000s per event\n# Single core events that fit in validation duration: 20160s / 62.0000s = 325\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 325 and 10000, but more than 0 -> 325\n# It is estimated that this validation will produce: 325 * 1.0000 = 325 events\nEVENTS=325\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-01412_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01412.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZinvhbb_narrow_M-4500_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01412_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01412_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01412_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01412 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01412_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01412_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01412_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\n\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n    maxEventsToPrint = cms.untracked.int32(1),\n    pythiaPylistVerbosity = cms.untracked.int32(1),\n    filterEfficiency = cms.untracked.double(1.0),\n    pythiaHepMCVerbosity = cms.untracked.bool(False),\n    comEnergy = cms.double(13000.),\n    PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    )\n    )\n)\n\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/f87ff5a577e43aba9ad583cb1ec9ef550155b0fe/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "ac5f98aa6f7a4dfdb129beb58c0f6ac4",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhbb_narrow_M-4500_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_19",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01453_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01453_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01453_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01453_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZinvhbb_narrow_M-4500_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01453_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01453_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01453_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01453 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01453_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01453.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01453_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01453_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01453_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01453_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01453 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01453_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01453_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01453_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284abbc32",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284ac4abf",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhbb_narrow_M-4500_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-01190_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-01190_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-01190_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-01190.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZprimeToZhToZinvhbb_narrow_M-4500_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-01190_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-01190_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-01190_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-01190 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-01190_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-01190_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-01190_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "744109404cdf471f6e79fd983bdf69e1",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhbb_narrow_M-4500_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22032",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZinvhbb_narrow_M-4500_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZinvhbb_narrow_M-4500_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZinvhbb_narrow_M-600_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 100000,
      "number_files": 3,
      "size": 2683751576
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00508\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00508_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00508_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_17/src ] ; then\n  echo release CMSSW_7_1_17 already exists\nelse\n  scram p CMSSW CMSSW_7_1_17\nfi\ncd CMSSW_7_1_17/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/f87ff5a577e43aba9ad583cb1ec9ef550155b0fe/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M600_13TeV-madgraph_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M600_13TeV-madgraph_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M600_13TeV-madgraph_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M600_13TeV-madgraph_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M600_13TeV-madgraph_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.1544s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.1544s = 0.1544s\n# Which adds up to 0.1544s per event\n# Single core events that fit in validation duration: 20160s / 0.1544s = 130588\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 130588 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M600_13TeV-madgraph_cff.py --python_filename EXO-RunIIWinter15wmLHE-00508_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00508.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00508_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00508_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00508_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00508 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00508_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00508_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00508_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22033/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22033/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22033/run_card.dat"
            },
            {
              "cms_confdb_id": "96490b874f0444ea3eb061dff0d7436f",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhbb_narrow_M-600_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v2/LHE",
          "release": "CMSSW_7_1_17",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01404\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01404_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01404_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_19/src ] ; then\n  echo release CMSSW_7_1_19 already exists\nelse\n  scram p CMSSW CMSSW_7_1_19\nfi\ncd CMSSW_7_1_19/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/f87ff5a577e43aba9ad583cb1ec9ef550155b0fe/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 34.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 34.0000s = 34.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-01404_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01404.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZinvhbb_narrow_M-600_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v2/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01404_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01404_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01404_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01404 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01404_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01404_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01404_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\n\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n    maxEventsToPrint = cms.untracked.int32(1),\n    pythiaPylistVerbosity = cms.untracked.int32(1),\n    filterEfficiency = cms.untracked.double(1.0),\n    pythiaHepMCVerbosity = cms.untracked.bool(False),\n    comEnergy = cms.double(13000.),\n    PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    )\n    )\n)\n\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/f87ff5a577e43aba9ad583cb1ec9ef550155b0fe/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "ac5f98aa6f7a4dfdb129beb58c0f6ac4",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhbb_narrow_M-600_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_19",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01441_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01441_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01441_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01441_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZinvhbb_narrow_M-600_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01441_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01441_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01441_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01441 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01441_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01441.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01441_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01441_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01441_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01441_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01441 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01441_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01441_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01441_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284abbc32",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284ac4abf",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhbb_narrow_M-600_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-01180_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-01180_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-01180_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-01180.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZprimeToZhToZinvhbb_narrow_M-600_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-01180_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-01180_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-01180_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-01180 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-01180_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-01180_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-01180_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "744109404cdf471f6e79fd983bdf69e1",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhbb_narrow_M-600_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22033",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZinvhbb_narrow_M-600_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZinvhbb_narrow_M-600_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZinvhbb_narrow_M-800_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 100000,
      "number_files": 3,
      "size": 2845943057
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00509\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00509_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00509_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_17/src ] ; then\n  echo release CMSSW_7_1_17 already exists\nelse\n  scram p CMSSW CMSSW_7_1_17\nfi\ncd CMSSW_7_1_17/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/f87ff5a577e43aba9ad583cb1ec9ef550155b0fe/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M800_13TeV-madgraph_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M800_13TeV-madgraph_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M800_13TeV-madgraph_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M800_13TeV-madgraph_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M800_13TeV-madgraph_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.1267s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.1267s = 0.1267s\n# Which adds up to 0.1267s per event\n# Single core events that fit in validation duration: 20160s / 0.1267s = 159117\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 159117 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zinvhbb_narrow_M800_13TeV-madgraph_cff.py --python_filename EXO-RunIIWinter15wmLHE-00509_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00509.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00509_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00509_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00509_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00509 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00509_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00509_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00509_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22034/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22034/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22034/run_card.dat"
            },
            {
              "cms_confdb_id": "96490b874f0444ea3eb061dff0d9827b",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhbb_narrow_M-800_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v2/LHE",
          "release": "CMSSW_7_1_17",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01402\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01402_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01402_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_19/src ] ; then\n  echo release CMSSW_7_1_19 already exists\nelse\n  scram p CMSSW CMSSW_7_1_19\nfi\ncd CMSSW_7_1_19/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/f87ff5a577e43aba9ad583cb1ec9ef550155b0fe/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 96.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 96.0000s = 96.0000s\n# Which adds up to 96.0000s per event\n# Single core events that fit in validation duration: 20160s / 96.0000s = 210\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 210 and 10000, but more than 0 -> 210\n# It is estimated that this validation will produce: 210 * 1.0000 = 210 events\nEVENTS=210\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-01402_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01402.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZinvhbb_narrow_M-800_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v2/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01402_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01402_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01402_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01402 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01402_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01402_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01402_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\n\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n    maxEventsToPrint = cms.untracked.int32(1),\n    pythiaPylistVerbosity = cms.untracked.int32(1),\n    filterEfficiency = cms.untracked.double(1.0),\n    pythiaHepMCVerbosity = cms.untracked.bool(False),\n    comEnergy = cms.double(13000.),\n    PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    )\n    )\n)\n\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/f87ff5a577e43aba9ad583cb1ec9ef550155b0fe/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "ac5f98aa6f7a4dfdb129beb58c0f6ac4",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhbb_narrow_M-800_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_19",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01442_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01442_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01442_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01442_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZinvhbb_narrow_M-800_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01442_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01442_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01442_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01442 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01442_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01442.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01442_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01442_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01442_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01442_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01442 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01442_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01442_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01442_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284abbc32",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284ac4abf",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhbb_narrow_M-800_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v3/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-01495_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-01495_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-01495_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-01495.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZprimeToZhToZinvhbb_narrow_M-800_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v3/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-01495_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-01495_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-01495_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-01495 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-01495_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-01495_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-01495_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "c54bcac03a1744a7d7cbc50e514e6eb6",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhbb_narrow_M-800_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22034",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZinvhbb_narrow_M-800_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZinvhbb_narrow_M-800_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZinvhtautau_2HDM_M-1000_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 99600,
      "number_files": 5,
      "size": 2673927759
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-01872\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-01872_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-01872_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-01872 --retry 3 --create-dirs -o Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py\n[ -s Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.0507s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.0507s = 0.0507s\n# Which adds up to 0.0507s per event\n# Single core events that fit in validation duration: 20160s / 0.0507s = 397886\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 397886 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py --python_filename EXO-RunIIWinter15wmLHE-01872_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-01872.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-01872_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-01872_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-01872_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-01872 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-01872_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-01872_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-01872_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22035/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22035/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22035/run_card.dat"
            },
            {
              "cms_confdb_id": "3b44d0764f0a816af3bb1c01b1bea81d",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhtautau_2HDM_M-1000_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_20",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-02025\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-02025_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-02025_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 62.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 62.0000s = 62.0000s\n# Which adds up to 62.0000s per event\n# Single core events that fit in validation duration: 20160s / 62.0000s = 325\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 325 and 10000, but more than 0 -> 325\n# It is estimated that this validation will produce: 325 * 1.0000 = 325 events\nEVENTS=325\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py --python_filename EXO-RunIISummer15GS-02025_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-02025.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZinvhtautau_2HDM_M-1000_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-02025_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-02025_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-02025_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-02025 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-02025_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-02025_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-02025_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        processParameters = cms.vstring(\n            'SLHA:useDecayTable = off',  # Use pythia8s own decay mode instead of decays defined in LH accord\n            '25:m0 = 125.0',\n            '25:onMode = off',\n            '25:onIfMatch = 15 -15'\n            ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py"
            },
            {
              "cms_confdb_id": "3b44d0764f0a816af3bb1c01b1bf8dc0",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhtautau_2HDM_M-1000_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_20",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-03960_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-03960_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-03960_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-03960_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZinvhtautau_2HDM_M-1000_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-03960_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-03960_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-03960_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-03960 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-03960_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-03960.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-03960_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-03960_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-03960_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-03960_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-03960 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-03960_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-03960_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-03960_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "12e2510b340a993fb46563ca93fca333",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "4246795564e60923f7de0af0060834e5",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhtautau_2HDM_M-1000_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-03860_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-03860_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-03860_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-03860.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZprimeToZhToZinvhtautau_2HDM_M-1000_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-03860_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-03860_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-03860_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-03860 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-03860_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-03860_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-03860_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "8a116aab3e9d220dbe227045ccbab3e3",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhtautau_2HDM_M-1000_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22035",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZinvhtautau_2HDM_M-1000_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZinvhtautau_2HDM_M-1000_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZinvhtautau_2HDM_M-1200_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 99200,
      "number_files": 3,
      "size": 2651094431
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-01873\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-01873_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-01873_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-01873 --retry 3 --create-dirs -o Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py\n[ -s Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.0417s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.0417s = 0.0417s\n# Which adds up to 0.0417s per event\n# Single core events that fit in validation duration: 20160s / 0.0417s = 483767\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 483767 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py --python_filename EXO-RunIIWinter15wmLHE-01873_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-01873.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-01873_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-01873_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-01873_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-01873 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-01873_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-01873_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-01873_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22036/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22036/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22036/run_card.dat"
            },
            {
              "cms_confdb_id": "3b44d0764f0a816af3bb1c01b1dae57f",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhtautau_2HDM_M-1200_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_20",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-02027\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-02027_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-02027_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 46.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 46.0000s = 46.0000s\n# Which adds up to 46.0000s per event\n# Single core events that fit in validation duration: 20160s / 46.0000s = 438\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 438 and 10000, but more than 0 -> 438\n# It is estimated that this validation will produce: 438 * 1.0000 = 438 events\nEVENTS=438\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py --python_filename EXO-RunIISummer15GS-02027_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-02027.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZinvhtautau_2HDM_M-1200_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-02027_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-02027_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-02027_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-02027 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-02027_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-02027_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-02027_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        processParameters = cms.vstring(\n            'SLHA:useDecayTable = off',  # Use pythia8s own decay mode instead of decays defined in LH accord\n            '25:m0 = 125.0',\n            '25:onMode = off',\n            '25:onIfMatch = 15 -15'\n            ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py"
            },
            {
              "cms_confdb_id": "3b44d0764f0a816af3bb1c01b1bf8dc0",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhtautau_2HDM_M-1200_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_20",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-03961_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-03961_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-03961_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-03961_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZinvhtautau_2HDM_M-1200_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-03961_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-03961_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-03961_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-03961 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-03961_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-03961.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-03961_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-03961_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-03961_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-03961_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-03961 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-03961_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-03961_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-03961_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "12e2510b340a993fb46563ca93fca333",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "4246795564e60923f7de0af0060834e5",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhtautau_2HDM_M-1200_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-03847_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-03847_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-03847_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-03847.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZprimeToZhToZinvhtautau_2HDM_M-1200_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-03847_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-03847_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-03847_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-03847 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-03847_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-03847_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-03847_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "8a116aab3e9d220dbe227045ccbab3e3",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhtautau_2HDM_M-1200_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22036",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZinvhtautau_2HDM_M-1200_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZinvhtautau_2HDM_M-1200_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZinvhtautau_2HDM_M-1400_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 100000,
      "number_files": 5,
      "size": 2769826748
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-01874\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-01874_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-01874_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-01874 --retry 3 --create-dirs -o Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py\n[ -s Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.0434s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.0434s = 0.0434s\n# Which adds up to 0.0434s per event\n# Single core events that fit in validation duration: 20160s / 0.0434s = 464561\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 464561 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py --python_filename EXO-RunIIWinter15wmLHE-01874_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-01874.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-01874_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-01874_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-01874_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-01874 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-01874_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-01874_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-01874_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22037/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22037/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22037/run_card.dat"
            },
            {
              "cms_confdb_id": "3b44d0764f0a816af3bb1c01b1e5b7b5",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhtautau_2HDM_M-1400_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_20",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-02029\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-02029_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-02029_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 45.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 45.0000s = 45.0000s\n# Which adds up to 45.0000s per event\n# Single core events that fit in validation duration: 20160s / 45.0000s = 448\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 448 and 10000, but more than 0 -> 448\n# It is estimated that this validation will produce: 448 * 1.0000 = 448 events\nEVENTS=448\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py --python_filename EXO-RunIISummer15GS-02029_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-02029.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZinvhtautau_2HDM_M-1400_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-02029_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-02029_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-02029_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-02029 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-02029_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-02029_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-02029_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        processParameters = cms.vstring(\n            'SLHA:useDecayTable = off',  # Use pythia8s own decay mode instead of decays defined in LH accord\n            '25:m0 = 125.0',\n            '25:onMode = off',\n            '25:onIfMatch = 15 -15'\n            ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py"
            },
            {
              "cms_confdb_id": "3b44d0764f0a816af3bb1c01b1bf8dc0",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhtautau_2HDM_M-1400_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_20",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-03962_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-03962_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-03962_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-03962_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZinvhtautau_2HDM_M-1400_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-03962_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-03962_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-03962_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-03962 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-03962_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-03962.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-03962_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-03962_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-03962_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-03962_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-03962 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-03962_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-03962_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-03962_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "12e2510b340a993fb46563ca93fca333",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "4246795564e60923f7de0af0060834e5",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhtautau_2HDM_M-1400_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-03848_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-03848_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-03848_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-03848.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZprimeToZhToZinvhtautau_2HDM_M-1400_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-03848_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-03848_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-03848_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-03848 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-03848_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-03848_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-03848_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "8a116aab3e9d220dbe227045ccbab3e3",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhtautau_2HDM_M-1400_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22037",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZinvhtautau_2HDM_M-1400_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZinvhtautau_2HDM_M-1400_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZinvhtautau_2HDM_M-1700_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 98800,
      "number_files": 6,
      "size": 2741642264
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-01875\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-01875_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-01875_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-01875 --retry 3 --create-dirs -o Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py\n[ -s Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.0423s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.0423s = 0.0423s\n# Which adds up to 0.0423s per event\n# Single core events that fit in validation duration: 20160s / 0.0423s = 476163\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 476163 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py --python_filename EXO-RunIIWinter15wmLHE-01875_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-01875.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-01875_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-01875_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-01875_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-01875 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-01875_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-01875_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-01875_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22038/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22038/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22038/run_card.dat"
            },
            {
              "cms_confdb_id": "3b44d0764f0a816af3bb1c01b1e5b208",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhtautau_2HDM_M-1700_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_20",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-02028\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-02028_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-02028_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 65.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 65.0000s = 65.0000s\n# Which adds up to 65.0000s per event\n# Single core events that fit in validation duration: 20160s / 65.0000s = 310\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 310 and 10000, but more than 0 -> 310\n# It is estimated that this validation will produce: 310 * 1.0000 = 310 events\nEVENTS=310\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py --python_filename EXO-RunIISummer15GS-02028_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-02028.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZinvhtautau_2HDM_M-1700_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-02028_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-02028_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-02028_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-02028 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-02028_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-02028_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-02028_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        processParameters = cms.vstring(\n            'SLHA:useDecayTable = off',  # Use pythia8s own decay mode instead of decays defined in LH accord\n            '25:m0 = 125.0',\n            '25:onMode = off',\n            '25:onIfMatch = 15 -15'\n            ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py"
            },
            {
              "cms_confdb_id": "3b44d0764f0a816af3bb1c01b1bf8dc0",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhtautau_2HDM_M-1700_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_20",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-03963_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-03963_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-03963_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-03963_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZinvhtautau_2HDM_M-1700_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-03963_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-03963_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-03963_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-03963 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-03963_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-03963.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-03963_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-03963_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-03963_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-03963_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-03963 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-03963_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-03963_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-03963_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "12e2510b340a993fb46563ca93fca333",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "4246795564e60923f7de0af0060834e5",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhtautau_2HDM_M-1700_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-03849_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-03849_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-03849_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-03849.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZprimeToZhToZinvhtautau_2HDM_M-1700_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-03849_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-03849_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-03849_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-03849 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-03849_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-03849_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-03849_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "8a116aab3e9d220dbe227045ccbab3e3",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhtautau_2HDM_M-1700_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22038",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZinvhtautau_2HDM_M-1700_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZinvhtautau_2HDM_M-1700_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZinvhtautau_2HDM_M-2000_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 99800,
      "number_files": 3,
      "size": 2730263021
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-01876\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-01876_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-01876_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-01876 --retry 3 --create-dirs -o Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py\n[ -s Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.1806s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.1806s = 0.1806s\n# Which adds up to 0.1806s per event\n# Single core events that fit in validation duration: 20160s / 0.1806s = 111608\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 111608 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py --python_filename EXO-RunIIWinter15wmLHE-01876_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-01876.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-01876_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-01876_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-01876_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-01876 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-01876_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-01876_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-01876_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22039/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22039/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22039/run_card.dat"
            },
            {
              "cms_confdb_id": "3b44d0764f0a816af3bb1c01b1f44828",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhtautau_2HDM_M-2000_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_20",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-02030\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-02030_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-02030_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 132.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 132.0000s = 132.0000s\n# Which adds up to 132.0000s per event\n# Single core events that fit in validation duration: 20160s / 132.0000s = 152\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 152 and 10000, but more than 0 -> 152\n# It is estimated that this validation will produce: 152 * 1.0000 = 152 events\nEVENTS=152\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py --python_filename EXO-RunIISummer15GS-02030_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-02030.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZinvhtautau_2HDM_M-2000_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-02030_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-02030_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-02030_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-02030 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-02030_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-02030_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-02030_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        processParameters = cms.vstring(\n            'SLHA:useDecayTable = off',  # Use pythia8s own decay mode instead of decays defined in LH accord\n            '25:m0 = 125.0',\n            '25:onMode = off',\n            '25:onIfMatch = 15 -15'\n            ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py"
            },
            {
              "cms_confdb_id": "3b44d0764f0a816af3bb1c01b1bf8dc0",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhtautau_2HDM_M-2000_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_20",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-03964_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-03964_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-03964_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-03964_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZinvhtautau_2HDM_M-2000_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-03964_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-03964_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-03964_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-03964 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-03964_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-03964.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-03964_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-03964_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-03964_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-03964_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-03964 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-03964_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-03964_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-03964_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "12e2510b340a993fb46563ca93fca333",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "4246795564e60923f7de0af0060834e5",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhtautau_2HDM_M-2000_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-04401_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-04401_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-04401_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-04401.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZprimeToZhToZinvhtautau_2HDM_M-2000_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-04401_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-04401_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-04401_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-04401 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-04401_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-04401_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-04401_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "b8dc3095d95a96249ce72c69fef3b926",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhtautau_2HDM_M-2000_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22039",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZinvhtautau_2HDM_M-2000_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZinvhtautau_2HDM_M-2000_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZinvhtautau_2HDM_M-2500_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 100000,
      "number_files": 6,
      "size": 2774413271
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-01877\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-01877_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-01877_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-01877 --retry 3 --create-dirs -o Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py\n[ -s Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.0554s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.0554s = 0.0554s\n# Which adds up to 0.0554s per event\n# Single core events that fit in validation duration: 20160s / 0.0554s = 364140\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 364140 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py --python_filename EXO-RunIIWinter15wmLHE-01877_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-01877.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-01877_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-01877_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-01877_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-01877 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-01877_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-01877_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-01877_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22040/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22040/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22040/run_card.dat"
            },
            {
              "cms_confdb_id": "3b44d0764f0a816af3bb1c01b1f3c250",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhtautau_2HDM_M-2500_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_20",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-02031\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-02031_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-02031_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 64.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 64.0000s = 64.0000s\n# Which adds up to 64.0000s per event\n# Single core events that fit in validation duration: 20160s / 64.0000s = 315\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 315 and 10000, but more than 0 -> 315\n# It is estimated that this validation will produce: 315 * 1.0000 = 315 events\nEVENTS=315\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py --python_filename EXO-RunIISummer15GS-02031_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-02031.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZinvhtautau_2HDM_M-2500_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-02031_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-02031_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-02031_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-02031 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-02031_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-02031_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-02031_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        processParameters = cms.vstring(\n            'SLHA:useDecayTable = off',  # Use pythia8s own decay mode instead of decays defined in LH accord\n            '25:m0 = 125.0',\n            '25:onMode = off',\n            '25:onIfMatch = 15 -15'\n            ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py"
            },
            {
              "cms_confdb_id": "3b44d0764f0a816af3bb1c01b1bf8dc0",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhtautau_2HDM_M-2500_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_20",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-03982_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-03982_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-03982_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-03982_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZinvhtautau_2HDM_M-2500_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-03982_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-03982_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-03982_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-03982 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-03982_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-03982.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-03982_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-03982_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-03982_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-03982_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-03982 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-03982_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-03982_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-03982_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "95297f0e5af6ef9d7c80e61fa428d97b",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "95297f0e5af6ef9d7c80e61fa429ff4f",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhtautau_2HDM_M-2500_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-03834_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-03834_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-03834_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-03834.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZprimeToZhToZinvhtautau_2HDM_M-2500_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-03834_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-03834_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-03834_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-03834 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-03834_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-03834_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-03834_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "8a116aab3e9d220dbe227045ccbab3e3",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhtautau_2HDM_M-2500_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22040",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZinvhtautau_2HDM_M-2500_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZinvhtautau_2HDM_M-2500_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZinvhtautau_2HDM_M-600_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 100000,
      "number_files": 3,
      "size": 2540152405
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-01870\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-01870_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-01870_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-01870 --retry 3 --create-dirs -o Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py\n[ -s Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.0497s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.0497s = 0.0497s\n# Which adds up to 0.0497s per event\n# Single core events that fit in validation duration: 20160s / 0.0497s = 405677\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 405677 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py --python_filename EXO-RunIIWinter15wmLHE-01870_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-01870.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-01870_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-01870_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-01870_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-01870 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-01870_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-01870_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-01870_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22041/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22041/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22041/run_card.dat"
            },
            {
              "cms_confdb_id": "3b44d0764f0a816af3bb1c01b1beb58d",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhtautau_2HDM_M-600_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_20",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-02024\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-02024_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-02024_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 29.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 29.0000s = 29.0000s\n# Which adds up to 29.0000s per event\n# Single core events that fit in validation duration: 20160s / 29.0000s = 695\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 695 and 10000, but more than 0 -> 695\n# It is estimated that this validation will produce: 695 * 1.0000 = 695 events\nEVENTS=695\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py --python_filename EXO-RunIISummer15GS-02024_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-02024.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZinvhtautau_2HDM_M-600_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-02024_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-02024_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-02024_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-02024 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-02024_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-02024_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-02024_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        processParameters = cms.vstring(\n            'SLHA:useDecayTable = off',  # Use pythia8s own decay mode instead of decays defined in LH accord\n            '25:m0 = 125.0',\n            '25:onMode = off',\n            '25:onIfMatch = 15 -15'\n            ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py"
            },
            {
              "cms_confdb_id": "3b44d0764f0a816af3bb1c01b1bf8dc0",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhtautau_2HDM_M-600_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_20",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-03981_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-03981_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-03981_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-03981_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZinvhtautau_2HDM_M-600_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-03981_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-03981_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-03981_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-03981 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-03981_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-03981.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-03981_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-03981_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-03981_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-03981_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-03981 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-03981_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-03981_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-03981_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "95297f0e5af6ef9d7c80e61fa428d97b",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "95297f0e5af6ef9d7c80e61fa429ff4f",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhtautau_2HDM_M-600_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-03833_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-03833_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-03833_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-03833.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZprimeToZhToZinvhtautau_2HDM_M-600_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-03833_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-03833_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-03833_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-03833 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-03833_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-03833_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-03833_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "8a116aab3e9d220dbe227045ccbab3e3",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhtautau_2HDM_M-600_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22041",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZinvhtautau_2HDM_M-600_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZinvhtautau_2HDM_M-600_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZinvhtautau_2HDM_M-800_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 99200,
      "number_files": 6,
      "size": 2660280159
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-01871\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-01871_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-01871_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-01871 --retry 3 --create-dirs -o Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py\n[ -s Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.0517s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.0517s = 0.0517s\n# Which adds up to 0.0517s per event\n# Single core events that fit in validation duration: 20160s / 0.0517s = 390147\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 390147 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py --python_filename EXO-RunIIWinter15wmLHE-01871_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-01871.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-01871_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-01871_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-01871_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-01871 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-01871_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-01871_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-01871_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22042/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22042/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22042/run_card.dat"
            },
            {
              "cms_confdb_id": "3b44d0764f0a816af3bb1c01b1bec883",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhtautau_2HDM_M-800_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_20",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-02026\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-02026_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-02026_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 40.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 40.0000s = 40.0000s\n# Which adds up to 40.0000s per event\n# Single core events that fit in validation duration: 20160s / 40.0000s = 504\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 504 and 10000, but more than 0 -> 504\n# It is estimated that this validation will produce: 504 * 1.0000 = 504 events\nEVENTS=504\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py --python_filename EXO-RunIISummer15GS-02026_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-02026.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZinvhtautau_2HDM_M-800_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-02026_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-02026_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-02026_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-02026 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-02026_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-02026_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-02026_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        processParameters = cms.vstring(\n            'SLHA:useDecayTable = off',  # Use pythia8s own decay mode instead of decays defined in LH accord\n            '25:m0 = 125.0',\n            '25:onMode = off',\n            '25:onIfMatch = 15 -15'\n            ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_Htautau_cff.py"
            },
            {
              "cms_confdb_id": "3b44d0764f0a816af3bb1c01b1bf8dc0",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhtautau_2HDM_M-800_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_20",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-03959_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-03959_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-03959_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-03959_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZinvhtautau_2HDM_M-800_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-03959_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-03959_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-03959_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-03959 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-03959_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-03959.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-03959_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-03959_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-03959_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-03959_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-03959 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-03959_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-03959_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-03959_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "12e2510b340a993fb46563ca93fca333",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "4246795564e60923f7de0af0060834e5",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhtautau_2HDM_M-800_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-03859_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-03859_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-03859_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-03859.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZprimeToZhToZinvhtautau_2HDM_M-800_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-03859_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-03859_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-03859_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-03859 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-03859_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-03859_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-03859_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "8a116aab3e9d220dbe227045ccbab3e3",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhtautau_2HDM_M-800_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22042",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZinvhtautau_2HDM_M-800_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZinvhtautau_2HDM_M-800_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZinvhWWTollnunu_2HDM_M-1000_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 99999,
      "number_files": 7,
      "size": 2720673581
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-01922\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-01922_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-01922_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-01922 --retry 3 --create-dirs -o Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py\n[ -s Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.0544s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.0544s = 0.0544s\n# Which adds up to 0.0544s per event\n# Single core events that fit in validation duration: 20160s / 0.0544s = 370672\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 370672 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py --python_filename EXO-RunIIWinter15wmLHE-01922_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-01922.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-01922_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-01922_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-01922_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-01922 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-01922_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-01922_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-01922_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21998/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21998/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21998/run_card.dat"
            },
            {
              "cms_confdb_id": "54173370dcbbac418dc544968e36b54b",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhWWTollnunu_2HDM_M-1000_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_20",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-02123\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-02123_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-02123_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20_patch2/src ] ; then\n  echo release CMSSW_7_1_20_patch2 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20_patch2\nfi\ncd CMSSW_7_1_20_patch2/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 50.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 50.0000s = 50.0000s\n# Which adds up to 50.0000s per event\n# Single core events that fit in validation duration: 20160s / 50.0000s = 403\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 403 and 10000, but more than 0 -> 403\n# It is estimated that this validation will produce: 403 * 1.0000 = 403 events\nEVENTS=403\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py --python_filename EXO-RunIISummer15GS-02123_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-02123.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZinvhWWTollnunu_2HDM_M-1000_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-02123_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-02123_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-02123_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-02123 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-02123_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-02123_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-02123_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        processParameters = cms.vstring(\n            'SLHA:useDecayTable = off',  # Use pythia8s own decay mode instead of decays defined in LH accord\n            '25:m0 = 125.0', \n            '25:onMode = off',\n            '25:onIfMatch = 24 -24',           # turn ON H->WW\n            '24:mMin = 0.05',                  #  \n            '24:onMode = off',                 # turn OFF all W decays\n            '24:onIfAny = 11 13 15 12 14 16'   # turn ON W->lnu\n\n            ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py"
            },
            {
              "cms_confdb_id": "54173370dcbbac418dc544968e3ee66c",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhWWTollnunu_2HDM_M-1000_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_20_patch2",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-03974_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-03974_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-03974_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-03974_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZinvhWWTollnunu_2HDM_M-1000_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-03974_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-03974_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-03974_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-03974 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-03974_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-03974.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-03974_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-03974_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-03974_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-03974_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-03974 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-03974_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-03974_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-03974_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "12e2510b340a993fb46563ca93fca333",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "4246795564e60923f7de0af0060834e5",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhWWTollnunu_2HDM_M-1000_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-03853_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-03853_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-03853_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-03853.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZprimeToZhToZinvhWWTollnunu_2HDM_M-1000_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-03853_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-03853_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-03853_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-03853 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-03853_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-03853_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-03853_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "8a116aab3e9d220dbe227045ccbab3e3",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhWWTollnunu_2HDM_M-1000_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21998",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZinvhWWTollnunu_2HDM_M-1000_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZinvhWWTollnunu_2HDM_M-1000_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZinvhWWTollnunu_2HDM_M-1200_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 99399,
      "number_files": 21,
      "size": 2752966392
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-01923\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-01923_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-01923_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-01923 --retry 3 --create-dirs -o Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py\n[ -s Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.0628s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.0628s = 0.0628s\n# Which adds up to 0.0628s per event\n# Single core events that fit in validation duration: 20160s / 0.0628s = 321227\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 321227 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py --python_filename EXO-RunIIWinter15wmLHE-01923_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-01923.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-01923_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-01923_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-01923_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-01923 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-01923_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-01923_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-01923_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21999/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21999/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21999/run_card.dat"
            },
            {
              "cms_confdb_id": "8ef198ab071c3a172b8f7d394f6a6899",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhWWTollnunu_2HDM_M-1200_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_20",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-02072\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-02072_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-02072_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20_patch3/src ] ; then\n  echo release CMSSW_7_1_20_patch3 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20_patch3\nfi\ncd CMSSW_7_1_20_patch3/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 46.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 46.0000s = 46.0000s\n# Which adds up to 46.0000s per event\n# Single core events that fit in validation duration: 20160s / 46.0000s = 438\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 438 and 10000, but more than 0 -> 438\n# It is estimated that this validation will produce: 438 * 1.0000 = 438 events\nEVENTS=438\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py --python_filename EXO-RunIISummer15GS-02072_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-02072.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZinvhWWTollnunu_2HDM_M-1200_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-02072_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-02072_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-02072_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-02072 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-02072_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-02072_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-02072_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        processParameters = cms.vstring(\n            'SLHA:useDecayTable = off',  # Use pythia8s own decay mode instead of decays defined in LH accord\n            '25:m0 = 125.0', \n            '25:onMode = off',\n            '25:onIfMatch = 24 -24',           # turn ON H->WW\n            '24:mMin = 0.05',                  #  \n            '24:onMode = off',                 # turn OFF all W decays\n            '24:onIfAny = 11 13 15 12 14 16'   # turn ON W->lnu\n\n            ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py"
            },
            {
              "cms_confdb_id": "26480c0fd3fb15bf81e90b7e363c670c",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhWWTollnunu_2HDM_M-1200_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM",
          "release": "CMSSW_7_1_20_patch3",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-02337_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-02337_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-02337_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-02337_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZinvhWWTollnunu_2HDM_M-1200_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-02337_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-02337_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-02337_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-02337 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-02337_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-02337.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-02337_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-02337_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-02337_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-02337_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-02337 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-02337_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-02337_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-02337_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "c4018c94e85aa96db10807711068192a",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "c4018c94e85aa96db108077110682653",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhWWTollnunu_2HDM_M-1200_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-02109_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-02109_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-02109_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-02109.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein file:EXO-RunIIFall15DR76-02337.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-02109_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-02109_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-02109_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-02109 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-02109_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-02109_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-02109_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "33b9cac79bd8650401638666f780e8c5",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhWWTollnunu_2HDM_M-1200_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21999",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZinvhWWTollnunu_2HDM_M-1200_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZinvhWWTollnunu_2HDM_M-1200_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZinvhWWTollnunu_2HDM_M-1400_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 100000,
      "number_files": 8,
      "size": 2793112421
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-01924\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-01924_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-01924_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-01924 --retry 3 --create-dirs -o Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py\n[ -s Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.0590s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.0590s = 0.0590s\n# Which adds up to 0.0590s per event\n# Single core events that fit in validation duration: 20160s / 0.0590s = 341698\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 341698 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py --python_filename EXO-RunIIWinter15wmLHE-01924_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-01924.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-01924_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-01924_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-01924_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-01924 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-01924_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-01924_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-01924_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22000/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22000/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22000/run_card.dat"
            },
            {
              "cms_confdb_id": "8ef198ab071c3a172b8f7d394f6ccd2c",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhWWTollnunu_2HDM_M-1400_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_20",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-02073\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-02073_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-02073_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20_patch3/src ] ; then\n  echo release CMSSW_7_1_20_patch3 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20_patch3\nfi\ncd CMSSW_7_1_20_patch3/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 46.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 46.0000s = 46.0000s\n# Which adds up to 46.0000s per event\n# Single core events that fit in validation duration: 20160s / 46.0000s = 438\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 438 and 10000, but more than 0 -> 438\n# It is estimated that this validation will produce: 438 * 1.0000 = 438 events\nEVENTS=438\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py --python_filename EXO-RunIISummer15GS-02073_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-02073.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZinvhWWTollnunu_2HDM_M-1400_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-02073_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-02073_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-02073_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-02073 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-02073_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-02073_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-02073_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        processParameters = cms.vstring(\n            'SLHA:useDecayTable = off',  # Use pythia8s own decay mode instead of decays defined in LH accord\n            '25:m0 = 125.0', \n            '25:onMode = off',\n            '25:onIfMatch = 24 -24',           # turn ON H->WW\n            '24:mMin = 0.05',                  #  \n            '24:onMode = off',                 # turn OFF all W decays\n            '24:onIfAny = 11 13 15 12 14 16'   # turn ON W->lnu\n\n            ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py"
            },
            {
              "cms_confdb_id": "26480c0fd3fb15bf81e90b7e363c670c",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhWWTollnunu_2HDM_M-1400_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM",
          "release": "CMSSW_7_1_20_patch3",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-02314_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-02314_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-02314_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-02314_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZinvhWWTollnunu_2HDM_M-1400_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-02314_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-02314_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-02314_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-02314 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-02314_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-02314.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-02314_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-02314_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-02314_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-02314_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-02314 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-02314_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-02314_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-02314_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "c4018c94e85aa96db10807711068192a",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "c4018c94e85aa96db108077110682653",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhWWTollnunu_2HDM_M-1400_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-02104_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-02104_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-02104_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-02104.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein file:EXO-RunIIFall15DR76-02314.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-02104_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-02104_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-02104_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-02104 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-02104_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-02104_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-02104_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "33b9cac79bd8650401638666f780e8c5",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhWWTollnunu_2HDM_M-1400_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22000",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZinvhWWTollnunu_2HDM_M-1400_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZinvhWWTollnunu_2HDM_M-1400_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZinvhWWTollnunu_2HDM_M-1700_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 99200,
      "number_files": 5,
      "size": 2749896424
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-01925\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-01925_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-01925_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-01925 --retry 3 --create-dirs -o Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py\n[ -s Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.0528s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.0528s = 0.0528s\n# Which adds up to 0.0528s per event\n# Single core events that fit in validation duration: 20160s / 0.0528s = 381749\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 381749 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py --python_filename EXO-RunIIWinter15wmLHE-01925_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-01925.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-01925_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-01925_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-01925_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-01925 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-01925_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-01925_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-01925_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22001/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22001/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22001/run_card.dat"
            },
            {
              "cms_confdb_id": "8ef198ab071c3a172b8f7d394f714ca2",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhWWTollnunu_2HDM_M-1700_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_20",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-02074\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-02074_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-02074_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20_patch3/src ] ; then\n  echo release CMSSW_7_1_20_patch3 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20_patch3\nfi\ncd CMSSW_7_1_20_patch3/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 53.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 53.0000s = 53.0000s\n# Which adds up to 53.0000s per event\n# Single core events that fit in validation duration: 20160s / 53.0000s = 380\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 380 and 10000, but more than 0 -> 380\n# It is estimated that this validation will produce: 380 * 1.0000 = 380 events\nEVENTS=380\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py --python_filename EXO-RunIISummer15GS-02074_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-02074.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZinvhWWTollnunu_2HDM_M-1700_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-02074_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-02074_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-02074_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-02074 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-02074_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-02074_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-02074_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        processParameters = cms.vstring(\n            'SLHA:useDecayTable = off',  # Use pythia8s own decay mode instead of decays defined in LH accord\n            '25:m0 = 125.0', \n            '25:onMode = off',\n            '25:onIfMatch = 24 -24',           # turn ON H->WW\n            '24:mMin = 0.05',                  #  \n            '24:onMode = off',                 # turn OFF all W decays\n            '24:onIfAny = 11 13 15 12 14 16'   # turn ON W->lnu\n\n            ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py"
            },
            {
              "cms_confdb_id": "26480c0fd3fb15bf81e90b7e363c670c",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhWWTollnunu_2HDM_M-1700_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM",
          "release": "CMSSW_7_1_20_patch3",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-02302_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-02302_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-02302_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-02302_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZinvhWWTollnunu_2HDM_M-1700_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-02302_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-02302_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-02302_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-02302 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-02302_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-02302.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-02302_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-02302_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-02302_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-02302_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-02302 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-02302_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-02302_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-02302_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "c4018c94e85aa96db10807711068192a",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "c4018c94e85aa96db108077110682653",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhWWTollnunu_2HDM_M-1700_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-02099_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-02099_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-02099_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-02099.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein file:EXO-RunIIFall15DR76-02302.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-02099_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-02099_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-02099_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-02099 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-02099_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-02099_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-02099_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "33b9cac79bd8650401638666f780e8c5",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhWWTollnunu_2HDM_M-1700_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22001",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZinvhWWTollnunu_2HDM_M-1700_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZinvhWWTollnunu_2HDM_M-1700_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZinvhWWTollnunu_2HDM_M-2000_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 99999,
      "number_files": 3,
      "size": 2728496728
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-01926\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-01926_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-01926_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-01926 --retry 3 --create-dirs -o Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py\n[ -s Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.0540s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.0540s = 0.0540s\n# Which adds up to 0.0540s per event\n# Single core events that fit in validation duration: 20160s / 0.0540s = 373403\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 373403 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py --python_filename EXO-RunIIWinter15wmLHE-01926_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-01926.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-01926_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-01926_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-01926_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-01926 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-01926_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-01926_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-01926_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22002/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22002/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22002/run_card.dat"
            },
            {
              "cms_confdb_id": "8ef198ab071c3a172b8f7d394f71b929",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhWWTollnunu_2HDM_M-2000_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_20",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-02078\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-02078_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-02078_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20_patch3/src ] ; then\n  echo release CMSSW_7_1_20_patch3 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20_patch3\nfi\ncd CMSSW_7_1_20_patch3/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 63.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 63.0000s = 63.0000s\n# Which adds up to 63.0000s per event\n# Single core events that fit in validation duration: 20160s / 63.0000s = 320\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 320 and 10000, but more than 0 -> 320\n# It is estimated that this validation will produce: 320 * 1.0000 = 320 events\nEVENTS=320\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py --python_filename EXO-RunIISummer15GS-02078_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-02078.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZinvhWWTollnunu_2HDM_M-2000_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-02078_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-02078_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-02078_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-02078 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-02078_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-02078_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-02078_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        processParameters = cms.vstring(\n            'SLHA:useDecayTable = off',  # Use pythia8s own decay mode instead of decays defined in LH accord\n            '25:m0 = 125.0', \n            '25:onMode = off',\n            '25:onIfMatch = 24 -24',           # turn ON H->WW\n            '24:mMin = 0.05',                  #  \n            '24:onMode = off',                 # turn OFF all W decays\n            '24:onIfAny = 11 13 15 12 14 16'   # turn ON W->lnu\n\n            ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py"
            },
            {
              "cms_confdb_id": "26480c0fd3fb15bf81e90b7e363c670c",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhWWTollnunu_2HDM_M-2000_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM",
          "release": "CMSSW_7_1_20_patch3",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01646_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01646_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01646_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01646_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZinvhWWTollnunu_2HDM_M-2000_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01646_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01646_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01646_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01646 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01646_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01646.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01646_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01646_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01646_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01646_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01646 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01646_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01646_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01646_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "6d3ac46ffb60b20fd421a21307c304ac",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "6d3ac46ffb60b20fd421a21307c4465d",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhWWTollnunu_2HDM_M-2000_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-01371_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-01371_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-01371_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-01371.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZprimeToZhToZinvhWWTollnunu_2HDM_M-2000_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-01371_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-01371_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-01371_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-01371 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-01371_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-01371_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-01371_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "6d3ac46ffb60b20fd421a21307c70e25",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhWWTollnunu_2HDM_M-2000_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22002",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZinvhWWTollnunu_2HDM_M-2000_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZinvhWWTollnunu_2HDM_M-2000_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZinvhWWTollnunu_2HDM_M-2500_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 48400,
      "number_files": 6,
      "size": 1380468411
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-01927\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-01927_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-01927_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-01927 --retry 3 --create-dirs -o Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py\n[ -s Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.1192s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.1192s = 0.1192s\n# Which adds up to 0.1192s per event\n# Single core events that fit in validation duration: 20160s / 0.1192s = 169093\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 169093 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py --python_filename EXO-RunIIWinter15wmLHE-01927_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-01927.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-01927_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-01927_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-01927_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-01927 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-01927_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-01927_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-01927_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22003/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22003/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22003/run_card.dat"
            },
            {
              "cms_confdb_id": "8ef198ab071c3a172b8f7d394f72f10d",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhWWTollnunu_2HDM_M-2500_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_20",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-02079\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-02079_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-02079_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20_patch3/src ] ; then\n  echo release CMSSW_7_1_20_patch3 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20_patch3\nfi\ncd CMSSW_7_1_20_patch3/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 49.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 49.0000s = 49.0000s\n# Which adds up to 49.0000s per event\n# Single core events that fit in validation duration: 20160s / 49.0000s = 411\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 411 and 10000, but more than 0 -> 411\n# It is estimated that this validation will produce: 411 * 1.0000 = 411 events\nEVENTS=411\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py --python_filename EXO-RunIISummer15GS-02079_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-02079.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZinvhWWTollnunu_2HDM_M-2500_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-02079_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-02079_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-02079_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-02079 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-02079_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-02079_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-02079_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        processParameters = cms.vstring(\n            'SLHA:useDecayTable = off',  # Use pythia8s own decay mode instead of decays defined in LH accord\n            '25:m0 = 125.0', \n            '25:onMode = off',\n            '25:onIfMatch = 24 -24',           # turn ON H->WW\n            '24:mMin = 0.05',                  #  \n            '24:onMode = off',                 # turn OFF all W decays\n            '24:onIfAny = 11 13 15 12 14 16'   # turn ON W->lnu\n\n            ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py"
            },
            {
              "cms_confdb_id": "26480c0fd3fb15bf81e90b7e363c670c",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhWWTollnunu_2HDM_M-2500_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM",
          "release": "CMSSW_7_1_20_patch3",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01647_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01647_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01647_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01647_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZinvhWWTollnunu_2HDM_M-2500_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01647_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01647_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01647_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01647 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01647_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01647.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01647_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01647_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01647_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01647_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01647 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01647_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01647_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01647_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "76c7493dbd1563bad4a4c54803df4751",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "76c7493dbd1563bad4a4c54803e10f3d",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhWWTollnunu_2HDM_M-2500_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-01372_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-01372_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-01372_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-01372.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZprimeToZhToZinvhWWTollnunu_2HDM_M-2500_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-01372_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-01372_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-01372_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-01372 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-01372_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-01372_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-01372_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "76c7493dbd1563bad4a4c54803e77518",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhWWTollnunu_2HDM_M-2500_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22003",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZinvhWWTollnunu_2HDM_M-2500_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZinvhWWTollnunu_2HDM_M-2500_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZinvhWWTollnunu_2HDM_M-600_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 100000,
      "number_files": 5,
      "size": 2563446627
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-01920\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-01920_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-01920_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-01920 --retry 3 --create-dirs -o Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py\n[ -s Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.1074s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.1074s = 0.1074s\n# Which adds up to 0.1074s per event\n# Single core events that fit in validation duration: 20160s / 0.1074s = 187718\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 187718 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py --python_filename EXO-RunIIWinter15wmLHE-01920_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-01920.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-01920_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-01920_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-01920_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-01920 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-01920_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-01920_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-01920_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22004/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22004/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22004/run_card.dat"
            },
            {
              "cms_confdb_id": "8ef198ab071c3a172b8f7d394f66320e",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhWWTollnunu_2HDM_M-600_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_20",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-02081\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-02081_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-02081_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20_patch3/src ] ; then\n  echo release CMSSW_7_1_20_patch3 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20_patch3\nfi\ncd CMSSW_7_1_20_patch3/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 53.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 53.0000s = 53.0000s\n# Which adds up to 53.0000s per event\n# Single core events that fit in validation duration: 20160s / 53.0000s = 380\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 380 and 10000, but more than 0 -> 380\n# It is estimated that this validation will produce: 380 * 1.0000 = 380 events\nEVENTS=380\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py --python_filename EXO-RunIISummer15GS-02081_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-02081.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZinvhWWTollnunu_2HDM_M-600_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-02081_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-02081_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-02081_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-02081 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-02081_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-02081_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-02081_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        processParameters = cms.vstring(\n            'SLHA:useDecayTable = off',  # Use pythia8s own decay mode instead of decays defined in LH accord\n            '25:m0 = 125.0', \n            '25:onMode = off',\n            '25:onIfMatch = 24 -24',           # turn ON H->WW\n            '24:mMin = 0.05',                  #  \n            '24:onMode = off',                 # turn OFF all W decays\n            '24:onIfAny = 11 13 15 12 14 16'   # turn ON W->lnu\n\n            ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py"
            },
            {
              "cms_confdb_id": "26480c0fd3fb15bf81e90b7e363c670c",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhWWTollnunu_2HDM_M-600_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v4/GEN-SIM",
          "release": "CMSSW_7_1_20_patch3",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01641_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01641_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01641_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01641_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZinvhWWTollnunu_2HDM_M-600_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v4/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01641_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01641_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01641_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01641 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01641_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01641.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01641_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01641_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01641_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01641_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01641 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01641_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01641_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01641_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "a698e311876409bb215651bec9ba0923",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "a698e311876409bb215651bec9ba330e",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhWWTollnunu_2HDM_M-600_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v3/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-03772_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-03772_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-03772_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-03772.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein file:EXO-RunIIFall15DR76-01641.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-03772_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-03772_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-03772_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-03772 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-03772_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-03772_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-03772_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "a698e311876409bb215651bec9bf4049",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhWWTollnunu_2HDM_M-600_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v3/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22004",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZinvhWWTollnunu_2HDM_M-600_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v3/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZinvhWWTollnunu_2HDM_M-600_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZinvhWWTollnunu_2HDM_M-800_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 98800,
      "number_files": 13,
      "size": 2692590021
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-01921\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-01921_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-01921_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-01921 --retry 3 --create-dirs -o Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py\n[ -s Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.0636s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.0636s = 0.0636s\n# Which adds up to 0.0636s per event\n# Single core events that fit in validation duration: 20160s / 0.0636s = 317199\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 317199 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py --python_filename EXO-RunIIWinter15wmLHE-01921_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-01921.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-01921_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-01921_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-01921_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-01921 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-01921_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-01921_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-01921_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22005/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22005/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22005/run_card.dat"
            },
            {
              "cms_confdb_id": "8ef198ab071c3a172b8f7d394f6a72ab",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhWWTollnunu_2HDM_M-800_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_20",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-02071\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-02071_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-02071_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20_patch3/src ] ; then\n  echo release CMSSW_7_1_20_patch3 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20_patch3\nfi\ncd CMSSW_7_1_20_patch3/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 49.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 49.0000s = 49.0000s\n# Which adds up to 49.0000s per event\n# Single core events that fit in validation duration: 20160s / 49.0000s = 411\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 411 and 10000, but more than 0 -> 411\n# It is estimated that this validation will produce: 411 * 1.0000 = 411 events\nEVENTS=411\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py --python_filename EXO-RunIISummer15GS-02071_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-02071.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZinvhWWTollnunu_2HDM_M-800_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-02071_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-02071_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-02071_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-02071 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-02071_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-02071_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-02071_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        processParameters = cms.vstring(\n            'SLHA:useDecayTable = off',  # Use pythia8s own decay mode instead of decays defined in LH accord\n            '25:m0 = 125.0', \n            '25:onMode = off',\n            '25:onIfMatch = 24 -24',           # turn ON H->WW\n            '24:mMin = 0.05',                  #  \n            '24:onMode = off',                 # turn OFF all W decays\n            '24:onIfAny = 11 13 15 12 14 16'   # turn ON W->lnu\n\n            ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HWWllnunu_cff.py"
            },
            {
              "cms_confdb_id": "26480c0fd3fb15bf81e90b7e363c670c",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhWWTollnunu_2HDM_M-800_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM",
          "release": "CMSSW_7_1_20_patch3",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-02256_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-02256_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-02256_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-02256_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZinvhWWTollnunu_2HDM_M-800_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-02256_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-02256_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-02256_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-02256 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-02256_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-02256.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-02256_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-02256_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-02256_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-02256_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-02256 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-02256_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-02256_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-02256_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "c4018c94e85aa96db10807711068192a",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "c4018c94e85aa96db108077110682653",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhWWTollnunu_2HDM_M-800_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-02070_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-02070_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-02070_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-02070.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein file:EXO-RunIIFall15DR76-02256.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-02070_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-02070_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-02070_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-02070 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-02070_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-02070_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-02070_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "0b779a2abd0707fbc6f8a81805a8f197",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhWWTollnunu_2HDM_M-800_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22005",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZinvhWWTollnunu_2HDM_M-800_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZinvhWWTollnunu_2HDM_M-800_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZinvhZZTo4l_2HDM_M-1000_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 99998,
      "number_files": 5,
      "size": 3241971054
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-01772\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-01772_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-01772_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-01772 --retry 3 --create-dirs -o Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py\n[ -s Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.0679s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.0679s = 0.0679s\n# Which adds up to 0.0679s per event\n# Single core events that fit in validation duration: 20160s / 0.0679s = 296803\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 296803 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py --python_filename EXO-RunIIWinter15wmLHE-01772_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-01772.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-01772_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-01772_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-01772_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-01772 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-01772_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-01772_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-01772_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22006/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22006/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22006/run_card.dat"
            },
            {
              "cms_confdb_id": "8ef198ab071c3a172b8f7d394f3872aa",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhZZTo4l_2HDM_M-1000_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_20",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01931\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01931_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01931_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20_patch3/src ] ; then\n  echo release CMSSW_7_1_20_patch3 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20_patch3\nfi\ncd CMSSW_7_1_20_patch3/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 52.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 52.0000s = 52.0000s\n# Which adds up to 52.0000s per event\n# Single core events that fit in validation duration: 20160s / 52.0000s = 387\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 387 and 10000, but more than 0 -> 387\n# It is estimated that this validation will produce: 387 * 1.0000 = 387 events\nEVENTS=387\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py --python_filename EXO-RunIISummer15GS-01931_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01931.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZinvhZZTo4l_2HDM_M-1000_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01931_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01931_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01931_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01931 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01931_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01931_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01931_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        processParameters = cms.vstring(\n            'SLHA:useDecayTable = off',  # Use pythia8s own decay mode instead of decays defined in LH accord\n            '25:m0 = 125.0', \n            '23:mMin = 0.05',                 # Solve problem with mZ cut\n            '25:onMode = off',\n            '25:onIfAll = 23 23',           # turn ON H->ZZ\n            '23:onMode = off',                # turn OFF all Z decays\n            '23:onIfAny = 11 13 15'           # turn ON Z->ll\n\n            ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py"
            },
            {
              "cms_confdb_id": "2020919c440d17c8747388b9841df8ae",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhZZTo4l_2HDM_M-1000_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM",
          "release": "CMSSW_7_1_20_patch3",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-02300_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-02300_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-02300_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-02300_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZinvhZZTo4l_2HDM_M-1000_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-02300_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-02300_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-02300_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-02300 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-02300_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-02300.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-02300_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-02300_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-02300_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-02300_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-02300 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-02300_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-02300_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-02300_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "c4018c94e85aa96db10807711068192a",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "c4018c94e85aa96db108077110682653",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhZZTo4l_2HDM_M-1000_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-02097_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-02097_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-02097_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-02097.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein file:EXO-RunIIFall15DR76-02300.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-02097_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-02097_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-02097_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-02097 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-02097_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-02097_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-02097_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "33b9cac79bd8650401638666f780e8c5",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhZZTo4l_2HDM_M-1000_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22006",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZinvhZZTo4l_2HDM_M-1000_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZinvhZZTo4l_2HDM_M-1000_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZinvhZZTo4l_2HDM_M-1200_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 99199,
      "number_files": 3,
      "size": 3188937152
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-01773\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-01773_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-01773_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-01773 --retry 3 --create-dirs -o Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py\n[ -s Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.0509s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.0509s = 0.0509s\n# Which adds up to 0.0509s per event\n# Single core events that fit in validation duration: 20160s / 0.0509s = 396078\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 396078 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py --python_filename EXO-RunIIWinter15wmLHE-01773_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-01773.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-01773_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-01773_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-01773_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-01773 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-01773_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-01773_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-01773_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22007/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22007/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22007/run_card.dat"
            },
            {
              "cms_confdb_id": "8ef198ab071c3a172b8f7d394f389b12",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhZZTo4l_2HDM_M-1200_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_20",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01932\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01932_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01932_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20_patch3/src ] ; then\n  echo release CMSSW_7_1_20_patch3 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20_patch3\nfi\ncd CMSSW_7_1_20_patch3/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 60.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 60.0000s = 60.0000s\n# Which adds up to 60.0000s per event\n# Single core events that fit in validation duration: 20160s / 60.0000s = 336\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 336 and 10000, but more than 0 -> 336\n# It is estimated that this validation will produce: 336 * 1.0000 = 336 events\nEVENTS=336\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py --python_filename EXO-RunIISummer15GS-01932_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01932.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZinvhZZTo4l_2HDM_M-1200_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01932_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01932_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01932_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01932 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01932_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01932_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01932_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        processParameters = cms.vstring(\n            'SLHA:useDecayTable = off',  # Use pythia8s own decay mode instead of decays defined in LH accord\n            '25:m0 = 125.0', \n            '23:mMin = 0.05',                 # Solve problem with mZ cut\n            '25:onMode = off',\n            '25:onIfAll = 23 23',           # turn ON H->ZZ\n            '23:onMode = off',                # turn OFF all Z decays\n            '23:onIfAny = 11 13 15'           # turn ON Z->ll\n\n            ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py"
            },
            {
              "cms_confdb_id": "2020919c440d17c8747388b9841df8ae",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhZZTo4l_2HDM_M-1200_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM",
          "release": "CMSSW_7_1_20_patch3",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-02247_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-02247_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-02247_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-02247_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZinvhZZTo4l_2HDM_M-1200_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-02247_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-02247_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-02247_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-02247 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-02247_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-02247.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-02247_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-02247_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-02247_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-02247_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-02247 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-02247_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-02247_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-02247_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "c4018c94e85aa96db10807711068192a",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "c4018c94e85aa96db108077110682653",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhZZTo4l_2HDM_M-1200_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-02058_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-02058_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-02058_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-02058.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein file:EXO-RunIIFall15DR76-02247.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-02058_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-02058_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-02058_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-02058 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-02058_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-02058_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-02058_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "0b779a2abd0707fbc6f8a81805a8f197",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhZZTo4l_2HDM_M-1200_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22007",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZinvhZZTo4l_2HDM_M-1200_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZinvhZZTo4l_2HDM_M-1200_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZinvhZZTo4l_2HDM_M-1400_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 99400,
      "number_files": 4,
      "size": 3283567029
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-01774\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-01774_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-01774_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-01774 --retry 3 --create-dirs -o Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py\n[ -s Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.0504s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.0504s = 0.0504s\n# Which adds up to 0.0504s per event\n# Single core events that fit in validation duration: 20160s / 0.0504s = 399727\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 399727 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py --python_filename EXO-RunIIWinter15wmLHE-01774_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-01774.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-01774_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-01774_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-01774_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-01774 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-01774_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-01774_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-01774_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22008/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22008/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22008/run_card.dat"
            },
            {
              "cms_confdb_id": "8ef198ab071c3a172b8f7d394f38c002",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhZZTo4l_2HDM_M-1400_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_20",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01933\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01933_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01933_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20_patch3/src ] ; then\n  echo release CMSSW_7_1_20_patch3 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20_patch3\nfi\ncd CMSSW_7_1_20_patch3/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 117.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 117.0000s = 117.0000s\n# Which adds up to 117.0000s per event\n# Single core events that fit in validation duration: 20160s / 117.0000s = 172\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 172 and 10000, but more than 0 -> 172\n# It is estimated that this validation will produce: 172 * 1.0000 = 172 events\nEVENTS=172\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py --python_filename EXO-RunIISummer15GS-01933_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01933.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZinvhZZTo4l_2HDM_M-1400_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01933_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01933_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01933_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01933 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01933_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01933_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01933_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        processParameters = cms.vstring(\n            'SLHA:useDecayTable = off',  # Use pythia8s own decay mode instead of decays defined in LH accord\n            '25:m0 = 125.0', \n            '23:mMin = 0.05',                 # Solve problem with mZ cut\n            '25:onMode = off',\n            '25:onIfAll = 23 23',           # turn ON H->ZZ\n            '23:onMode = off',                # turn OFF all Z decays\n            '23:onIfAny = 11 13 15'           # turn ON Z->ll\n\n            ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py"
            },
            {
              "cms_confdb_id": "2020919c440d17c8747388b9841df8ae",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhZZTo4l_2HDM_M-1400_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM",
          "release": "CMSSW_7_1_20_patch3",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-02349_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-02349_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-02349_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-02349_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZinvhZZTo4l_2HDM_M-1400_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-02349_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-02349_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-02349_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-02349 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-02349_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-02349.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-02349_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-02349_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-02349_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-02349_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-02349 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-02349_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-02349_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-02349_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "c4018c94e85aa96db10807711068192a",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "c4018c94e85aa96db108077110682653",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhZZTo4l_2HDM_M-1400_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-02114_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-02114_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-02114_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-02114.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein file:EXO-RunIIFall15DR76-02349.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-02114_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-02114_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-02114_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-02114 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-02114_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-02114_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-02114_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "33b9cac79bd8650401638666f780e8c5",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhZZTo4l_2HDM_M-1400_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22008",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZinvhZZTo4l_2HDM_M-1400_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZinvhZZTo4l_2HDM_M-1400_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZinvhZZTo4l_2HDM_M-1700_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 95198,
      "number_files": 9,
      "size": 3157351647
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-01775\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-01775_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-01775_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-01775 --retry 3 --create-dirs -o Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py\n[ -s Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.0698s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.0698s = 0.0698s\n# Which adds up to 0.0698s per event\n# Single core events that fit in validation duration: 20160s / 0.0698s = 288795\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 288795 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py --python_filename EXO-RunIIWinter15wmLHE-01775_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-01775.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-01775_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-01775_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-01775_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-01775 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-01775_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-01775_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-01775_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22009/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22009/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22009/run_card.dat"
            },
            {
              "cms_confdb_id": "8ef198ab071c3a172b8f7d394f39d8de",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhZZTo4l_2HDM_M-1700_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_20",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01934\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01934_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01934_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20_patch3/src ] ; then\n  echo release CMSSW_7_1_20_patch3 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20_patch3\nfi\ncd CMSSW_7_1_20_patch3/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 56.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 56.0000s = 56.0000s\n# Which adds up to 56.0000s per event\n# Single core events that fit in validation duration: 20160s / 56.0000s = 360\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 360 and 10000, but more than 0 -> 360\n# It is estimated that this validation will produce: 360 * 1.0000 = 360 events\nEVENTS=360\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py --python_filename EXO-RunIISummer15GS-01934_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01934.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZinvhZZTo4l_2HDM_M-1700_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01934_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01934_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01934_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01934 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01934_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01934_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01934_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        processParameters = cms.vstring(\n            'SLHA:useDecayTable = off',  # Use pythia8s own decay mode instead of decays defined in LH accord\n            '25:m0 = 125.0', \n            '23:mMin = 0.05',                 # Solve problem with mZ cut\n            '25:onMode = off',\n            '25:onIfAll = 23 23',           # turn ON H->ZZ\n            '23:onMode = off',                # turn OFF all Z decays\n            '23:onIfAny = 11 13 15'           # turn ON Z->ll\n\n            ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py"
            },
            {
              "cms_confdb_id": "2020919c440d17c8747388b9841df8ae",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhZZTo4l_2HDM_M-1700_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM",
          "release": "CMSSW_7_1_20_patch3",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-02248_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-02248_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-02248_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-02248_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZinvhZZTo4l_2HDM_M-1700_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-02248_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-02248_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-02248_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-02248 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-02248_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-02248.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-02248_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-02248_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-02248_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-02248_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-02248 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-02248_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-02248_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-02248_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "c4018c94e85aa96db10807711068192a",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "c4018c94e85aa96db108077110682653",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhZZTo4l_2HDM_M-1700_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-02059_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-02059_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-02059_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-02059.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein file:EXO-RunIIFall15DR76-02248.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-02059_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-02059_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-02059_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-02059 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-02059_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-02059_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-02059_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "0b779a2abd0707fbc6f8a81805a8f197",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhZZTo4l_2HDM_M-1700_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22009",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZinvhZZTo4l_2HDM_M-1700_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZinvhZZTo4l_2HDM_M-1700_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZinvhZZTo4l_2HDM_M-2000_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 99799,
      "number_files": 41,
      "size": 3470836841
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-01776\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-01776_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-01776_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-01776 --retry 3 --create-dirs -o Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py\n[ -s Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.0656s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.0656s = 0.0656s\n# Which adds up to 0.0656s per event\n# Single core events that fit in validation duration: 20160s / 0.0656s = 307299\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 307299 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py --python_filename EXO-RunIIWinter15wmLHE-01776_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-01776.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-01776_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-01776_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-01776_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-01776 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-01776_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-01776_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-01776_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22010/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22010/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22010/run_card.dat"
            },
            {
              "cms_confdb_id": "8ef198ab071c3a172b8f7d394f3a0aaf",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhZZTo4l_2HDM_M-2000_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_20",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01935\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01935_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01935_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20_patch3/src ] ; then\n  echo release CMSSW_7_1_20_patch3 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20_patch3\nfi\ncd CMSSW_7_1_20_patch3/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 142.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 142.0000s = 142.0000s\n# Which adds up to 142.0000s per event\n# Single core events that fit in validation duration: 20160s / 142.0000s = 141\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 141 and 10000, but more than 0 -> 141\n# It is estimated that this validation will produce: 141 * 1.0000 = 141 events\nEVENTS=141\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py --python_filename EXO-RunIISummer15GS-01935_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01935.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZinvhZZTo4l_2HDM_M-2000_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01935_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01935_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01935_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01935 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01935_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01935_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01935_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        processParameters = cms.vstring(\n            'SLHA:useDecayTable = off',  # Use pythia8s own decay mode instead of decays defined in LH accord\n            '25:m0 = 125.0', \n            '23:mMin = 0.05',                 # Solve problem with mZ cut\n            '25:onMode = off',\n            '25:onIfAll = 23 23',           # turn ON H->ZZ\n            '23:onMode = off',                # turn OFF all Z decays\n            '23:onIfAny = 11 13 15'           # turn ON Z->ll\n\n            ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py"
            },
            {
              "cms_confdb_id": "2020919c440d17c8747388b9841df8ae",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhZZTo4l_2HDM_M-2000_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM",
          "release": "CMSSW_7_1_20_patch3",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-02335_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-02335_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-02335_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-02335_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZinvhZZTo4l_2HDM_M-2000_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-02335_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-02335_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-02335_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-02335 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-02335_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-02335.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-02335_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-02335_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-02335_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-02335_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-02335 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-02335_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-02335_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-02335_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "c4018c94e85aa96db10807711068192a",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "c4018c94e85aa96db108077110682653",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhZZTo4l_2HDM_M-2000_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-02107_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-02107_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-02107_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-02107.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein file:EXO-RunIIFall15DR76-02335.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-02107_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-02107_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-02107_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-02107 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-02107_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-02107_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-02107_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "33b9cac79bd8650401638666f780e8c5",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhZZTo4l_2HDM_M-2000_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22010",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZinvhZZTo4l_2HDM_M-2000_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZinvhZZTo4l_2HDM_M-2000_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZinvhZZTo4l_2HDM_M-2500_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 99998,
      "number_files": 14,
      "size": 3346568081
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-01777\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-01777_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-01777_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-01777 --retry 3 --create-dirs -o Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py\n[ -s Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.0576s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.0576s = 0.0576s\n# Which adds up to 0.0576s per event\n# Single core events that fit in validation duration: 20160s / 0.0576s = 349760\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 349760 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py --python_filename EXO-RunIIWinter15wmLHE-01777_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-01777.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-01777_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-01777_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-01777_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-01777 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-01777_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-01777_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-01777_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22011/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22011/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22011/run_card.dat"
            },
            {
              "cms_confdb_id": "8ef198ab071c3a172b8f7d394f3a0417",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhZZTo4l_2HDM_M-2500_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_20",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01936\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01936_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01936_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20_patch3/src ] ; then\n  echo release CMSSW_7_1_20_patch3 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20_patch3\nfi\ncd CMSSW_7_1_20_patch3/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 51.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 51.0000s = 51.0000s\n# Which adds up to 51.0000s per event\n# Single core events that fit in validation duration: 20160s / 51.0000s = 395\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 395 and 10000, but more than 0 -> 395\n# It is estimated that this validation will produce: 395 * 1.0000 = 395 events\nEVENTS=395\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py --python_filename EXO-RunIISummer15GS-01936_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01936.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZinvhZZTo4l_2HDM_M-2500_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01936_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01936_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01936_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01936 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01936_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01936_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01936_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        processParameters = cms.vstring(\n            'SLHA:useDecayTable = off',  # Use pythia8s own decay mode instead of decays defined in LH accord\n            '25:m0 = 125.0', \n            '23:mMin = 0.05',                 # Solve problem with mZ cut\n            '25:onMode = off',\n            '25:onIfAll = 23 23',           # turn ON H->ZZ\n            '23:onMode = off',                # turn OFF all Z decays\n            '23:onIfAny = 11 13 15'           # turn ON Z->ll\n\n            ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py"
            },
            {
              "cms_confdb_id": "2020919c440d17c8747388b9841df8ae",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhZZTo4l_2HDM_M-2500_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM",
          "release": "CMSSW_7_1_20_patch3",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-02372_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-02372_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-02372_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-02372_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZinvhZZTo4l_2HDM_M-2500_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-02372_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-02372_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-02372_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-02372 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-02372_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-02372.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-02372_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-02372_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-02372_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-02372_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-02372 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-02372_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-02372_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-02372_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "c4018c94e85aa96db10807711068192a",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "c4018c94e85aa96db108077110682653",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhZZTo4l_2HDM_M-2500_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-02155_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-02155_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-02155_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-02155.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein file:EXO-RunIIFall15DR76-02372.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-02155_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-02155_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-02155_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-02155 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-02155_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-02155_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-02155_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "33b9cac79bd8650401638666f780e8c5",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhZZTo4l_2HDM_M-2500_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22011",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZinvhZZTo4l_2HDM_M-2500_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZinvhZZTo4l_2HDM_M-2500_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZinvhZZTo4l_2HDM_M-600_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 100000,
      "number_files": 17,
      "size": 3150107491
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-01770\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-01770_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-01770_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-01770 --retry 3 --create-dirs -o Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py\n[ -s Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.1052s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.1052s = 0.1052s\n# Which adds up to 0.1052s per event\n# Single core events that fit in validation duration: 20160s / 0.1052s = 191614\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 191614 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py --python_filename EXO-RunIIWinter15wmLHE-01770_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-01770.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-01770_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-01770_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-01770_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-01770 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-01770_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-01770_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-01770_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22012/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22012/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22012/run_card.dat"
            },
            {
              "cms_confdb_id": "8ef198ab071c3a172b8f7d394f38498d",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhZZTo4l_2HDM_M-600_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_20",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01929\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01929_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01929_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20_patch3/src ] ; then\n  echo release CMSSW_7_1_20_patch3 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20_patch3\nfi\ncd CMSSW_7_1_20_patch3/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 84.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 84.0000s = 84.0000s\n# Which adds up to 84.0000s per event\n# Single core events that fit in validation duration: 20160s / 84.0000s = 240\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 240 and 10000, but more than 0 -> 240\n# It is estimated that this validation will produce: 240 * 1.0000 = 240 events\nEVENTS=240\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py --python_filename EXO-RunIISummer15GS-01929_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01929.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZinvhZZTo4l_2HDM_M-600_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01929_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01929_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01929_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01929 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01929_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01929_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01929_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        processParameters = cms.vstring(\n            'SLHA:useDecayTable = off',  # Use pythia8s own decay mode instead of decays defined in LH accord\n            '25:m0 = 125.0', \n            '23:mMin = 0.05',                 # Solve problem with mZ cut\n            '25:onMode = off',\n            '25:onIfAll = 23 23',           # turn ON H->ZZ\n            '23:onMode = off',                # turn OFF all Z decays\n            '23:onIfAny = 11 13 15'           # turn ON Z->ll\n\n            ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py"
            },
            {
              "cms_confdb_id": "2020919c440d17c8747388b9841df8ae",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhZZTo4l_2HDM_M-600_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM",
          "release": "CMSSW_7_1_20_patch3",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-02361_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-02361_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-02361_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-02361_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZinvhZZTo4l_2HDM_M-600_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-02361_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-02361_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-02361_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-02361 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-02361_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-02361.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-02361_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-02361_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-02361_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-02361_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-02361 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-02361_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-02361_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-02361_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "c4018c94e85aa96db10807711068192a",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "c4018c94e85aa96db108077110682653",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhZZTo4l_2HDM_M-600_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-02146_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-02146_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-02146_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-02146.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein file:EXO-RunIIFall15DR76-02361.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-02146_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-02146_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-02146_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-02146 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-02146_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-02146_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-02146_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "33b9cac79bd8650401638666f780e8c5",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhZZTo4l_2HDM_M-600_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22012",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZinvhZZTo4l_2HDM_M-600_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZinvhZZTo4l_2HDM_M-600_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZinvhZZTo4l_2HDM_M-800_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 94800,
      "number_files": 15,
      "size": 3123538003
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-01771\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-01771_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-01771_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-01771 --retry 3 --create-dirs -o Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py\n[ -s Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.0500s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.0500s = 0.0500s\n# Which adds up to 0.0500s per event\n# Single core events that fit in validation duration: 20160s / 0.0500s = 403232\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 403232 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py --python_filename EXO-RunIIWinter15wmLHE-01771_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-01771.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-01771_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-01771_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-01771_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-01771 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-01771_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-01771_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-01771_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22013/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22013/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22013/run_card.dat"
            },
            {
              "cms_confdb_id": "8ef198ab071c3a172b8f7d394f38551e",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhZZTo4l_2HDM_M-800_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_20",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01930\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01930_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01930_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20_patch3/src ] ; then\n  echo release CMSSW_7_1_20_patch3 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20_patch3\nfi\ncd CMSSW_7_1_20_patch3/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 53.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 53.0000s = 53.0000s\n# Which adds up to 53.0000s per event\n# Single core events that fit in validation duration: 20160s / 53.0000s = 380\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 380 and 10000, but more than 0 -> 380\n# It is estimated that this validation will produce: 380 * 1.0000 = 380 events\nEVENTS=380\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py --python_filename EXO-RunIISummer15GS-01930_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01930.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZinvhZZTo4l_2HDM_M-800_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01930_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01930_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01930_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01930 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01930_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01930_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01930_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        processParameters = cms.vstring(\n            'SLHA:useDecayTable = off',  # Use pythia8s own decay mode instead of decays defined in LH accord\n            '25:m0 = 125.0', \n            '23:mMin = 0.05',                 # Solve problem with mZ cut\n            '25:onMode = off',\n            '25:onIfAll = 23 23',           # turn ON H->ZZ\n            '23:onMode = off',                # turn OFF all Z decays\n            '23:onIfAny = 11 13 15'           # turn ON Z->ll\n\n            ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/aee60a3b3779acc4992fc2fc3b63b589e00897e9/python/ThirteenTeV/monoHiggs/pythia8_hadronizer_nomatching_HZZ4l_cff.py"
            },
            {
              "cms_confdb_id": "2020919c440d17c8747388b9841df8ae",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZinvhZZTo4l_2HDM_M-800_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM",
          "release": "CMSSW_7_1_20_patch3",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-02348_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-02348_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-02348_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-02348_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZinvhZZTo4l_2HDM_M-800_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-02348_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-02348_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-02348_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-02348 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-02348_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-02348.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-02348_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-02348_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-02348_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-02348_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-02348 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-02348_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-02348_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-02348_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "c4018c94e85aa96db10807711068192a",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "c4018c94e85aa96db108077110682653",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhZZTo4l_2HDM_M-800_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-02113_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-02113_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-02113_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-02113.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein file:EXO-RunIIFall15DR76-02348.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-02113_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-02113_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-02113_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-02113 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-02113_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-02113_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-02113_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "33b9cac79bd8650401638666f780e8c5",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZinvhZZTo4l_2HDM_M-800_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22013",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZinvhZZTo4l_2HDM_M-800_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZinvhZZTo4l_2HDM_M-800_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZlephbb_narrow_M-1000_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 50000,
      "number_files": 1,
      "size": 1808086673
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00094\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00094_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00094_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_15_patch1/src ] ; then\n  echo release CMSSW_7_1_15_patch1 already exists\nelse\n  scram p CMSSW CMSSW_7_1_15_patch1\nfi\ncd CMSSW_7_1_15_patch1/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/d91dc7801f60176f6b02d2ffd1d0b00307392e4f/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M1000_13TeV-madgraph_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M1000_13TeV-madgraph_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M1000_13TeV-madgraph_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M1000_13TeV-madgraph_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M1000_13TeV-madgraph_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.0858s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.0858s = 0.0858s\n# Which adds up to 0.0858s per event\n# Single core events that fit in validation duration: 20160s / 0.0858s = 234966\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 234966 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M1000_13TeV-madgraph_cff.py --python_filename EXO-RunIIWinter15wmLHE-00094_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00094.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00094_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00094_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00094_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00094 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00094_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00094_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00094_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22043/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22043/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22043/run_card.dat"
            },
            {
              "cms_confdb_id": "c410571db24e1dcd4e22c80eb55c765f",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZlephbb_narrow_M-1000_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v2/LHE",
          "release": "CMSSW_7_1_15_patch1",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01050\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01050_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01050_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_19/src ] ; then\n  echo release CMSSW_7_1_19 already exists\nelse\n  scram p CMSSW CMSSW_7_1_19\nfi\ncd CMSSW_7_1_19/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/d91dc7801f60176f6b02d2ffd1d0b00307392e4f/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 143.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 143.0000s = 143.0000s\n# Which adds up to 143.0000s per event\n# Single core events that fit in validation duration: 20160s / 143.0000s = 140\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 140 and 10000, but more than 0 -> 140\n# It is estimated that this validation will produce: 140 * 1.0000 = 140 events\nEVENTS=140\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-01050_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01050.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZlephbb_narrow_M-1000_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v2/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01050_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01050_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01050_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01050 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01050_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01050_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01050_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\n\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n    maxEventsToPrint = cms.untracked.int32(1),\n    pythiaPylistVerbosity = cms.untracked.int32(1),\n    filterEfficiency = cms.untracked.double(1.0),\n    pythiaHepMCVerbosity = cms.untracked.bool(False),\n    comEnergy = cms.double(13000.),\n    PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    )\n    )\n)\n\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/d91dc7801f60176f6b02d2ffd1d0b00307392e4f/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "9f4f3c630c8c5e86cd77ca22dbdf09a0",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZlephbb_narrow_M-1000_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_19",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01097_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01097_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01097_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01097_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZlephbb_narrow_M-1000_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01097_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01097_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01097_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01097 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01097_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01097.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01097_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01097_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01097_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01097_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01097 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01097_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01097_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01097_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "01ce611d190017da791ecf9a2ec0bccd",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "01ce611d190017da791ecf9a2ed033ec",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZlephbb_narrow_M-1000_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-00813_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-00813_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-00813_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-00813.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZprimeToZhToZlephbb_narrow_M-1000_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-00813_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-00813_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-00813_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-00813 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-00813_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-00813_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-00813_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "744109404cdf471f6e79fd983bdf69e1",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZlephbb_narrow_M-1000_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v3/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22043",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZlephbb_narrow_M-1000_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v3/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZlephbb_narrow_M-1000_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZlephbb_narrow_M-1200_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 49500,
      "number_files": 2,
      "size": 1809077096
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00095\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00095_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00095_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_15_patch1/src ] ; then\n  echo release CMSSW_7_1_15_patch1 already exists\nelse\n  scram p CMSSW CMSSW_7_1_15_patch1\nfi\ncd CMSSW_7_1_15_patch1/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/d91dc7801f60176f6b02d2ffd1d0b00307392e4f/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M1200_13TeV-madgraph_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M1200_13TeV-madgraph_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M1200_13TeV-madgraph_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M1200_13TeV-madgraph_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M1200_13TeV-madgraph_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.1001s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.1001s = 0.1001s\n# Which adds up to 0.1001s per event\n# Single core events that fit in validation duration: 20160s / 0.1001s = 201326\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 201326 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M1200_13TeV-madgraph_cff.py --python_filename EXO-RunIIWinter15wmLHE-00095_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00095.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00095_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00095_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00095_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00095 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00095_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00095_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00095_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22044/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22044/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22044/run_card.dat"
            },
            {
              "cms_confdb_id": "e66a29eed221551434262a2240115ab4",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZlephbb_narrow_M-1200_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v2/LHE",
          "release": "CMSSW_7_1_15_patch1",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01051\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01051_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01051_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_19/src ] ; then\n  echo release CMSSW_7_1_19 already exists\nelse\n  scram p CMSSW CMSSW_7_1_19\nfi\ncd CMSSW_7_1_19/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/d91dc7801f60176f6b02d2ffd1d0b00307392e4f/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 87.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 87.0000s = 87.0000s\n# Which adds up to 87.0000s per event\n# Single core events that fit in validation duration: 20160s / 87.0000s = 231\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 231 and 10000, but more than 0 -> 231\n# It is estimated that this validation will produce: 231 * 1.0000 = 231 events\nEVENTS=231\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-01051_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01051.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZlephbb_narrow_M-1200_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v2/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01051_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01051_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01051_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01051 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01051_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01051_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01051_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\n\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n    maxEventsToPrint = cms.untracked.int32(1),\n    pythiaPylistVerbosity = cms.untracked.int32(1),\n    filterEfficiency = cms.untracked.double(1.0),\n    pythiaHepMCVerbosity = cms.untracked.bool(False),\n    comEnergy = cms.double(13000.),\n    PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    )\n    )\n)\n\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/d91dc7801f60176f6b02d2ffd1d0b00307392e4f/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "9f4f3c630c8c5e86cd77ca22dbdf09a0",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZlephbb_narrow_M-1200_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_19",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01098_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01098_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01098_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01098_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZlephbb_narrow_M-1200_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01098_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01098_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01098_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01098 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01098_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01098.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01098_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01098_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01098_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01098_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01098 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01098_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01098_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01098_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "01ce611d190017da791ecf9a2ec0bccd",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "01ce611d190017da791ecf9a2ed033ec",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZlephbb_narrow_M-1200_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-00814_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-00814_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-00814_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-00814.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZprimeToZhToZlephbb_narrow_M-1200_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-00814_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-00814_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-00814_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-00814 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-00814_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-00814_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-00814_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "744109404cdf471f6e79fd983bdf69e1",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZlephbb_narrow_M-1200_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22044",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZlephbb_narrow_M-1200_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZlephbb_narrow_M-1200_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZlephbb_narrow_M-1400_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 49200,
      "number_files": 1,
      "size": 1821901427
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00096\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00096_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00096_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_15_patch1/src ] ; then\n  echo release CMSSW_7_1_15_patch1 already exists\nelse\n  scram p CMSSW CMSSW_7_1_15_patch1\nfi\ncd CMSSW_7_1_15_patch1/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/d91dc7801f60176f6b02d2ffd1d0b00307392e4f/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M1400_13TeV-madgraph_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M1400_13TeV-madgraph_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M1400_13TeV-madgraph_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M1400_13TeV-madgraph_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M1400_13TeV-madgraph_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.0884s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.0884s = 0.0884s\n# Which adds up to 0.0884s per event\n# Single core events that fit in validation duration: 20160s / 0.0884s = 227980\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 227980 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M1400_13TeV-madgraph_cff.py --python_filename EXO-RunIIWinter15wmLHE-00096_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00096.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00096_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00096_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00096_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00096 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00096_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00096_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00096_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22045/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22045/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22045/run_card.dat"
            },
            {
              "cms_confdb_id": "983b066ccca9897c4131e0559adb3a36",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZlephbb_narrow_M-1400_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_15_patch1",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01052\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01052_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01052_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_19/src ] ; then\n  echo release CMSSW_7_1_19 already exists\nelse\n  scram p CMSSW CMSSW_7_1_19\nfi\ncd CMSSW_7_1_19/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/d91dc7801f60176f6b02d2ffd1d0b00307392e4f/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 84.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 84.0000s = 84.0000s\n# Which adds up to 84.0000s per event\n# Single core events that fit in validation duration: 20160s / 84.0000s = 240\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 240 and 10000, but more than 0 -> 240\n# It is estimated that this validation will produce: 240 * 1.0000 = 240 events\nEVENTS=240\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-01052_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01052.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZlephbb_narrow_M-1400_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01052_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01052_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01052_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01052 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01052_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01052_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01052_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\n\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n    maxEventsToPrint = cms.untracked.int32(1),\n    pythiaPylistVerbosity = cms.untracked.int32(1),\n    filterEfficiency = cms.untracked.double(1.0),\n    pythiaHepMCVerbosity = cms.untracked.bool(False),\n    comEnergy = cms.double(13000.),\n    PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    )\n    )\n)\n\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/d91dc7801f60176f6b02d2ffd1d0b00307392e4f/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "9f4f3c630c8c5e86cd77ca22dbdf09a0",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZlephbb_narrow_M-1400_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_19",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01099_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01099_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01099_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01099_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZlephbb_narrow_M-1400_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01099_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01099_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01099_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01099 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01099_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01099.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01099_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01099_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01099_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01099_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01099 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01099_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01099_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01099_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "01ce611d190017da791ecf9a2ec0bccd",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "01ce611d190017da791ecf9a2ed033ec",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZlephbb_narrow_M-1400_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-00815_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-00815_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-00815_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-00815.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZprimeToZhToZlephbb_narrow_M-1400_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-00815_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-00815_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-00815_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-00815 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-00815_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-00815_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-00815_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "744109404cdf471f6e79fd983bdf69e1",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZlephbb_narrow_M-1400_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22045",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZlephbb_narrow_M-1400_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZlephbb_narrow_M-1400_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZlephbb_narrow_M-1600_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 47400,
      "number_files": 1,
      "size": 1744058218
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00097\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00097_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00097_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_15_patch1/src ] ; then\n  echo release CMSSW_7_1_15_patch1 already exists\nelse\n  scram p CMSSW CMSSW_7_1_15_patch1\nfi\ncd CMSSW_7_1_15_patch1/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/d91dc7801f60176f6b02d2ffd1d0b00307392e4f/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M1600_13TeV-madgraph_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M1600_13TeV-madgraph_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M1600_13TeV-madgraph_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M1600_13TeV-madgraph_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M1600_13TeV-madgraph_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.0418s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.0418s = 0.0418s\n# Which adds up to 0.0418s per event\n# Single core events that fit in validation duration: 20160s / 0.0418s = 481768\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 481768 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M1600_13TeV-madgraph_cff.py --python_filename EXO-RunIIWinter15wmLHE-00097_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00097.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00097_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00097_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00097_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00097 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00097_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00097_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00097_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22046/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22046/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22046/run_card.dat"
            },
            {
              "cms_confdb_id": "c410571db24e1dcd4e22c80eb54bff85",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZlephbb_narrow_M-1600_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_15_patch1",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01053\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01053_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01053_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_19/src ] ; then\n  echo release CMSSW_7_1_19 already exists\nelse\n  scram p CMSSW CMSSW_7_1_19\nfi\ncd CMSSW_7_1_19/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/d91dc7801f60176f6b02d2ffd1d0b00307392e4f/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 122.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 122.0000s = 122.0000s\n# Which adds up to 122.0000s per event\n# Single core events that fit in validation duration: 20160s / 122.0000s = 165\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 165 and 10000, but more than 0 -> 165\n# It is estimated that this validation will produce: 165 * 1.0000 = 165 events\nEVENTS=165\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-01053_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01053.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZlephbb_narrow_M-1600_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01053_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01053_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01053_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01053 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01053_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01053_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01053_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\n\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n    maxEventsToPrint = cms.untracked.int32(1),\n    pythiaPylistVerbosity = cms.untracked.int32(1),\n    filterEfficiency = cms.untracked.double(1.0),\n    pythiaHepMCVerbosity = cms.untracked.bool(False),\n    comEnergy = cms.double(13000.),\n    PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    )\n    )\n)\n\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/d91dc7801f60176f6b02d2ffd1d0b00307392e4f/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "9f4f3c630c8c5e86cd77ca22dbdf09a0",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZlephbb_narrow_M-1600_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_19",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01100_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01100_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01100_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01100_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZlephbb_narrow_M-1600_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01100_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01100_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01100_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01100 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01100_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01100.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01100_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01100_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01100_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01100_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01100 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01100_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01100_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01100_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "01ce611d190017da791ecf9a2ec0bccd",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "01ce611d190017da791ecf9a2ed033ec",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZlephbb_narrow_M-1600_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-00816_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-00816_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-00816_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-00816.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZprimeToZhToZlephbb_narrow_M-1600_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-00816_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-00816_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-00816_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-00816 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-00816_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-00816_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-00816_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "744109404cdf471f6e79fd983bdf69e1",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZlephbb_narrow_M-1600_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22046",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZlephbb_narrow_M-1600_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZlephbb_narrow_M-1600_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZlephbb_narrow_M-1800_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 49200,
      "number_files": 2,
      "size": 1812218202
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00098\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00098_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00098_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_15_patch1/src ] ; then\n  echo release CMSSW_7_1_15_patch1 already exists\nelse\n  scram p CMSSW CMSSW_7_1_15_patch1\nfi\ncd CMSSW_7_1_15_patch1/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/d91dc7801f60176f6b02d2ffd1d0b00307392e4f/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M1800_13TeV-madgraph_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M1800_13TeV-madgraph_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M1800_13TeV-madgraph_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M1800_13TeV-madgraph_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M1800_13TeV-madgraph_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.0715s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.0715s = 0.0715s\n# Which adds up to 0.0715s per event\n# Single core events that fit in validation duration: 20160s / 0.0715s = 281960\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 281960 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M1800_13TeV-madgraph_cff.py --python_filename EXO-RunIIWinter15wmLHE-00098_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00098.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00098_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00098_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00098_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00098 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00098_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00098_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00098_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22047/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22047/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22047/run_card.dat"
            },
            {
              "cms_confdb_id": "3b343286366e7c1e52708b343beef875",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZlephbb_narrow_M-1800_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_15_patch1",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01054\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01054_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01054_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_19/src ] ; then\n  echo release CMSSW_7_1_19 already exists\nelse\n  scram p CMSSW CMSSW_7_1_19\nfi\ncd CMSSW_7_1_19/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/d91dc7801f60176f6b02d2ffd1d0b00307392e4f/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 171.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 171.0000s = 171.0000s\n# Which adds up to 171.0000s per event\n# Single core events that fit in validation duration: 20160s / 171.0000s = 117\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 117 and 10000, but more than 0 -> 117\n# It is estimated that this validation will produce: 117 * 1.0000 = 117 events\nEVENTS=117\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-01054_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01054.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZlephbb_narrow_M-1800_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01054_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01054_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01054_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01054 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01054_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01054_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01054_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\n\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n    maxEventsToPrint = cms.untracked.int32(1),\n    pythiaPylistVerbosity = cms.untracked.int32(1),\n    filterEfficiency = cms.untracked.double(1.0),\n    pythiaHepMCVerbosity = cms.untracked.bool(False),\n    comEnergy = cms.double(13000.),\n    PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    )\n    )\n)\n\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/d91dc7801f60176f6b02d2ffd1d0b00307392e4f/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "9f4f3c630c8c5e86cd77ca22dbdf09a0",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZlephbb_narrow_M-1800_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_19",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01101_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01101_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01101_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01101_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZlephbb_narrow_M-1800_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01101_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01101_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01101_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01101 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01101_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01101.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01101_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01101_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01101_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01101_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01101 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01101_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01101_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01101_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "01ce611d190017da791ecf9a2ec0bccd",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "01ce611d190017da791ecf9a2ed033ec",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZlephbb_narrow_M-1800_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-00817_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-00817_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-00817_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-00817.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZprimeToZhToZlephbb_narrow_M-1800_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-00817_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-00817_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-00817_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-00817 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-00817_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-00817_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-00817_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "744109404cdf471f6e79fd983bdf69e1",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZlephbb_narrow_M-1800_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22047",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZlephbb_narrow_M-1800_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZlephbb_narrow_M-1800_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZlephbb_narrow_M-2000_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 50000,
      "number_files": 2,
      "size": 1845903058
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00099\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00099_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00099_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_15_patch1/src ] ; then\n  echo release CMSSW_7_1_15_patch1 already exists\nelse\n  scram p CMSSW CMSSW_7_1_15_patch1\nfi\ncd CMSSW_7_1_15_patch1/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/d91dc7801f60176f6b02d2ffd1d0b00307392e4f/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M2000_13TeV-madgraph_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M2000_13TeV-madgraph_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M2000_13TeV-madgraph_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M2000_13TeV-madgraph_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M2000_13TeV-madgraph_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.0733s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.0733s = 0.0733s\n# Which adds up to 0.0733s per event\n# Single core events that fit in validation duration: 20160s / 0.0733s = 275004\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 275004 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M2000_13TeV-madgraph_cff.py --python_filename EXO-RunIIWinter15wmLHE-00099_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00099.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00099_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00099_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00099_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00099 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00099_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00099_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00099_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22048/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22048/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22048/run_card.dat"
            },
            {
              "cms_confdb_id": "c410571db24e1dcd4e22c80eb52b739a",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZlephbb_narrow_M-2000_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_15_patch1",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01055\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01055_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01055_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_19/src ] ; then\n  echo release CMSSW_7_1_19 already exists\nelse\n  scram p CMSSW CMSSW_7_1_19\nfi\ncd CMSSW_7_1_19/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/d91dc7801f60176f6b02d2ffd1d0b00307392e4f/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 58.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 58.0000s = 58.0000s\n# Which adds up to 58.0000s per event\n# Single core events that fit in validation duration: 20160s / 58.0000s = 347\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 347 and 10000, but more than 0 -> 347\n# It is estimated that this validation will produce: 347 * 1.0000 = 347 events\nEVENTS=347\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-01055_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01055.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZlephbb_narrow_M-2000_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01055_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01055_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01055_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01055 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01055_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01055_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01055_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\n\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n    maxEventsToPrint = cms.untracked.int32(1),\n    pythiaPylistVerbosity = cms.untracked.int32(1),\n    filterEfficiency = cms.untracked.double(1.0),\n    pythiaHepMCVerbosity = cms.untracked.bool(False),\n    comEnergy = cms.double(13000.),\n    PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    )\n    )\n)\n\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/d91dc7801f60176f6b02d2ffd1d0b00307392e4f/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "9f4f3c630c8c5e86cd77ca22dbdf09a0",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZlephbb_narrow_M-2000_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_19",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01102_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01102_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01102_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01102_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZlephbb_narrow_M-2000_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01102_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01102_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01102_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01102 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01102_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01102.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01102_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01102_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01102_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01102_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01102 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01102_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01102_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01102_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "01ce611d190017da791ecf9a2ec0bccd",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "01ce611d190017da791ecf9a2ed033ec",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZlephbb_narrow_M-2000_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-00818_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-00818_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-00818_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-00818.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZprimeToZhToZlephbb_narrow_M-2000_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-00818_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-00818_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-00818_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-00818 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-00818_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-00818_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-00818_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "744109404cdf471f6e79fd983bdf69e1",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZlephbb_narrow_M-2000_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22048",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZlephbb_narrow_M-2000_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZlephbb_narrow_M-2000_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZlephbb_narrow_M-2500_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 50000,
      "number_files": 1,
      "size": 1871451203
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00100\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00100_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00100_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_15_patch1/src ] ; then\n  echo release CMSSW_7_1_15_patch1 already exists\nelse\n  scram p CMSSW CMSSW_7_1_15_patch1\nfi\ncd CMSSW_7_1_15_patch1/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/d91dc7801f60176f6b02d2ffd1d0b00307392e4f/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M2500_13TeV-madgraph_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M2500_13TeV-madgraph_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M2500_13TeV-madgraph_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M2500_13TeV-madgraph_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M2500_13TeV-madgraph_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.1241s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.1241s = 0.1241s\n# Which adds up to 0.1241s per event\n# Single core events that fit in validation duration: 20160s / 0.1241s = 162412\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 162412 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M2500_13TeV-madgraph_cff.py --python_filename EXO-RunIIWinter15wmLHE-00100_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00100.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00100_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00100_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00100_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00100 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00100_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00100_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00100_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22049/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22049/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22049/run_card.dat"
            },
            {
              "cms_confdb_id": "071990f7ba3b03db4584e88fe39c89de",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZlephbb_narrow_M-2500_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_15_patch1",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01056\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01056_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01056_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_19/src ] ; then\n  echo release CMSSW_7_1_19 already exists\nelse\n  scram p CMSSW CMSSW_7_1_19\nfi\ncd CMSSW_7_1_19/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/d91dc7801f60176f6b02d2ffd1d0b00307392e4f/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 144.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 144.0000s = 144.0000s\n# Which adds up to 144.0000s per event\n# Single core events that fit in validation duration: 20160s / 144.0000s = 140\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 140 and 10000, but more than 0 -> 140\n# It is estimated that this validation will produce: 140 * 1.0000 = 140 events\nEVENTS=140\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-01056_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01056.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZlephbb_narrow_M-2500_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01056_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01056_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01056_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01056 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01056_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01056_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01056_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\n\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n    maxEventsToPrint = cms.untracked.int32(1),\n    pythiaPylistVerbosity = cms.untracked.int32(1),\n    filterEfficiency = cms.untracked.double(1.0),\n    pythiaHepMCVerbosity = cms.untracked.bool(False),\n    comEnergy = cms.double(13000.),\n    PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    )\n    )\n)\n\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/d91dc7801f60176f6b02d2ffd1d0b00307392e4f/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "9f4f3c630c8c5e86cd77ca22dbdf09a0",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZlephbb_narrow_M-2500_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_19",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01103_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01103_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01103_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01103_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZlephbb_narrow_M-2500_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01103_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01103_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01103_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01103 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01103_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01103.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01103_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01103_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01103_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01103_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01103 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01103_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01103_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01103_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "01ce611d190017da791ecf9a2ec0bccd",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "01ce611d190017da791ecf9a2ed033ec",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZlephbb_narrow_M-2500_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-00819_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-00819_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-00819_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-00819.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZprimeToZhToZlephbb_narrow_M-2500_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-00819_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-00819_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-00819_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-00819 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-00819_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-00819_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-00819_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "744109404cdf471f6e79fd983bdf69e1",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZlephbb_narrow_M-2500_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22049",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZlephbb_narrow_M-2500_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZlephbb_narrow_M-2500_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZlephbb_narrow_M-3000_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 50000,
      "number_files": 1,
      "size": 1883392104
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00101\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00101_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00101_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_15_patch1/src ] ; then\n  echo release CMSSW_7_1_15_patch1 already exists\nelse\n  scram p CMSSW CMSSW_7_1_15_patch1\nfi\ncd CMSSW_7_1_15_patch1/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/d91dc7801f60176f6b02d2ffd1d0b00307392e4f/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M3000_13TeV-madgraph_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M3000_13TeV-madgraph_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M3000_13TeV-madgraph_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M3000_13TeV-madgraph_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M3000_13TeV-madgraph_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.0687s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.0687s = 0.0687s\n# Which adds up to 0.0687s per event\n# Single core events that fit in validation duration: 20160s / 0.0687s = 293357\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 293357 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M3000_13TeV-madgraph_cff.py --python_filename EXO-RunIIWinter15wmLHE-00101_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00101.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00101_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00101_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00101_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00101 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00101_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00101_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00101_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22050/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22050/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22050/run_card.dat"
            },
            {
              "cms_confdb_id": "071990f7ba3b03db4584e88fe3321c96",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZlephbb_narrow_M-3000_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_15_patch1",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01061\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01061_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01061_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_19/src ] ; then\n  echo release CMSSW_7_1_19 already exists\nelse\n  scram p CMSSW CMSSW_7_1_19\nfi\ncd CMSSW_7_1_19/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/d91dc7801f60176f6b02d2ffd1d0b00307392e4f/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 213.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 213.0000s = 213.0000s\n# Which adds up to 213.0000s per event\n# Single core events that fit in validation duration: 20160s / 213.0000s = 94\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 94 and 10000, but more than 0 -> 94\n# It is estimated that this validation will produce: 94 * 1.0000 = 94 events\nEVENTS=94\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-01061_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01061.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZlephbb_narrow_M-3000_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01061_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01061_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01061_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01061 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01061_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01061_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01061_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\n\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n    maxEventsToPrint = cms.untracked.int32(1),\n    pythiaPylistVerbosity = cms.untracked.int32(1),\n    filterEfficiency = cms.untracked.double(1.0),\n    pythiaHepMCVerbosity = cms.untracked.bool(False),\n    comEnergy = cms.double(13000.),\n    PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    )\n    )\n)\n\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/d91dc7801f60176f6b02d2ffd1d0b00307392e4f/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "9f4f3c630c8c5e86cd77ca22dbdf09a0",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZlephbb_narrow_M-3000_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_19",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01104_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01104_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01104_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01104_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZlephbb_narrow_M-3000_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01104_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01104_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01104_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01104 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01104_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01104.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01104_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01104_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01104_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01104_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01104 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01104_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01104_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01104_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "01ce611d190017da791ecf9a2ec0bccd",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "01ce611d190017da791ecf9a2ed033ec",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZlephbb_narrow_M-3000_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-00820_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-00820_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-00820_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-00820.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZprimeToZhToZlephbb_narrow_M-3000_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-00820_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-00820_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-00820_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-00820 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-00820_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-00820_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-00820_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "744109404cdf471f6e79fd983bdf69e1",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZlephbb_narrow_M-3000_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22050",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZlephbb_narrow_M-3000_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZlephbb_narrow_M-3000_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZlephbb_narrow_M-3500_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 50000,
      "number_files": 2,
      "size": 1915924327
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00102\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00102_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00102_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_15_patch1/src ] ; then\n  echo release CMSSW_7_1_15_patch1 already exists\nelse\n  scram p CMSSW CMSSW_7_1_15_patch1\nfi\ncd CMSSW_7_1_15_patch1/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/d91dc7801f60176f6b02d2ffd1d0b00307392e4f/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M3500_13TeV-madgraph_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M3500_13TeV-madgraph_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M3500_13TeV-madgraph_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M3500_13TeV-madgraph_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M3500_13TeV-madgraph_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.0621s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.0621s = 0.0621s\n# Which adds up to 0.0621s per event\n# Single core events that fit in validation duration: 20160s / 0.0621s = 324693\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 324693 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M3500_13TeV-madgraph_cff.py --python_filename EXO-RunIIWinter15wmLHE-00102_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00102.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00102_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00102_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00102_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00102 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00102_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00102_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00102_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22051/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22051/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22051/run_card.dat"
            },
            {
              "cms_confdb_id": "202442371903afb75013c87c298422cb",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZlephbb_narrow_M-3500_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_15_patch1",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01059\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01059_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01059_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_19/src ] ; then\n  echo release CMSSW_7_1_19 already exists\nelse\n  scram p CMSSW CMSSW_7_1_19\nfi\ncd CMSSW_7_1_19/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/d91dc7801f60176f6b02d2ffd1d0b00307392e4f/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 190.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 190.0000s = 190.0000s\n# Which adds up to 190.0000s per event\n# Single core events that fit in validation duration: 20160s / 190.0000s = 106\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 106 and 10000, but more than 0 -> 106\n# It is estimated that this validation will produce: 106 * 1.0000 = 106 events\nEVENTS=106\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-01059_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01059.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZlephbb_narrow_M-3500_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01059_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01059_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01059_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01059 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01059_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01059_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01059_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\n\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n    maxEventsToPrint = cms.untracked.int32(1),\n    pythiaPylistVerbosity = cms.untracked.int32(1),\n    filterEfficiency = cms.untracked.double(1.0),\n    pythiaHepMCVerbosity = cms.untracked.bool(False),\n    comEnergy = cms.double(13000.),\n    PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    )\n    )\n)\n\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/d91dc7801f60176f6b02d2ffd1d0b00307392e4f/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "9f4f3c630c8c5e86cd77ca22dbdf09a0",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZlephbb_narrow_M-3500_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_19",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01105_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01105_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01105_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01105_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZlephbb_narrow_M-3500_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01105_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01105_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01105_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01105 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01105_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01105.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01105_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01105_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01105_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01105_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01105 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01105_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01105_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01105_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "01ce611d190017da791ecf9a2ec0bccd",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "01ce611d190017da791ecf9a2ed033ec",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZlephbb_narrow_M-3500_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-00821_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-00821_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-00821_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-00821.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZprimeToZhToZlephbb_narrow_M-3500_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-00821_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-00821_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-00821_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-00821 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-00821_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-00821_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-00821_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "744109404cdf471f6e79fd983bdf69e1",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZlephbb_narrow_M-3500_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22051",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZlephbb_narrow_M-3500_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZlephbb_narrow_M-3500_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZlephbb_narrow_M-4000_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 50000,
      "number_files": 1,
      "size": 1917877711
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00103\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00103_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00103_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_15_patch1/src ] ; then\n  echo release CMSSW_7_1_15_patch1 already exists\nelse\n  scram p CMSSW CMSSW_7_1_15_patch1\nfi\ncd CMSSW_7_1_15_patch1/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/d91dc7801f60176f6b02d2ffd1d0b00307392e4f/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M4000_13TeV-madgraph_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M4000_13TeV-madgraph_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M4000_13TeV-madgraph_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M4000_13TeV-madgraph_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M4000_13TeV-madgraph_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.0625s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.0625s = 0.0625s\n# Which adds up to 0.0625s per event\n# Single core events that fit in validation duration: 20160s / 0.0625s = 322497\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 322497 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M4000_13TeV-madgraph_cff.py --python_filename EXO-RunIIWinter15wmLHE-00103_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00103.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00103_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00103_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00103_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00103 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00103_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00103_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00103_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22052/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22052/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22052/run_card.dat"
            },
            {
              "cms_confdb_id": "983b066ccca9897c4131e0559ae3c065",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZlephbb_narrow_M-4000_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_15_patch1",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01062\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01062_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01062_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_19/src ] ; then\n  echo release CMSSW_7_1_19 already exists\nelse\n  scram p CMSSW CMSSW_7_1_19\nfi\ncd CMSSW_7_1_19/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/d91dc7801f60176f6b02d2ffd1d0b00307392e4f/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 158.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 158.0000s = 158.0000s\n# Which adds up to 158.0000s per event\n# Single core events that fit in validation duration: 20160s / 158.0000s = 127\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 127 and 10000, but more than 0 -> 127\n# It is estimated that this validation will produce: 127 * 1.0000 = 127 events\nEVENTS=127\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-01062_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01062.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZlephbb_narrow_M-4000_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01062_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01062_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01062_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01062 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01062_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01062_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01062_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\n\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n    maxEventsToPrint = cms.untracked.int32(1),\n    pythiaPylistVerbosity = cms.untracked.int32(1),\n    filterEfficiency = cms.untracked.double(1.0),\n    pythiaHepMCVerbosity = cms.untracked.bool(False),\n    comEnergy = cms.double(13000.),\n    PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    )\n    )\n)\n\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/d91dc7801f60176f6b02d2ffd1d0b00307392e4f/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "9f4f3c630c8c5e86cd77ca22dbdf09a0",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZlephbb_narrow_M-4000_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_19",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01106_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01106_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01106_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01106_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZlephbb_narrow_M-4000_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01106_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01106_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01106_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01106 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01106_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01106.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01106_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01106_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01106_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01106_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01106 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01106_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01106_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01106_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "01ce611d190017da791ecf9a2ec0bccd",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "01ce611d190017da791ecf9a2ed033ec",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZlephbb_narrow_M-4000_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-00822_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-00822_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-00822_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-00822.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZprimeToZhToZlephbb_narrow_M-4000_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-00822_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-00822_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-00822_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-00822 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-00822_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-00822_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-00822_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "744109404cdf471f6e79fd983bdf69e1",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZlephbb_narrow_M-4000_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22052",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZlephbb_narrow_M-4000_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZlephbb_narrow_M-4000_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZlephbb_narrow_M-4500_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 50000,
      "number_files": 1,
      "size": 1927459813
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00104\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00104_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00104_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_15_patch1/src ] ; then\n  echo release CMSSW_7_1_15_patch1 already exists\nelse\n  scram p CMSSW CMSSW_7_1_15_patch1\nfi\ncd CMSSW_7_1_15_patch1/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/d91dc7801f60176f6b02d2ffd1d0b00307392e4f/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M4500_13TeV-madgraph_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M4500_13TeV-madgraph_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M4500_13TeV-madgraph_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M4500_13TeV-madgraph_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M4500_13TeV-madgraph_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.1262s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.1262s = 0.1262s\n# Which adds up to 0.1262s per event\n# Single core events that fit in validation duration: 20160s / 0.1262s = 159741\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 159741 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M4500_13TeV-madgraph_cff.py --python_filename EXO-RunIIWinter15wmLHE-00104_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00104.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00104_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00104_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00104_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00104 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00104_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00104_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00104_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22053/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22053/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22053/run_card.dat"
            },
            {
              "cms_confdb_id": "c410571db24e1dcd4e22c80eb516a18e",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZlephbb_narrow_M-4500_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v2/LHE",
          "release": "CMSSW_7_1_15_patch1",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01058\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01058_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01058_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/d91dc7801f60176f6b02d2ffd1d0b00307392e4f/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 327.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 327.0000s = 327.0000s\n# Which adds up to 327.0000s per event\n# Single core events that fit in validation duration: 20160s / 327.0000s = 61\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 61 and 10000, but more than 0 -> 61\n# It is estimated that this validation will produce: 61 * 1.0000 = 61 events\nEVENTS=61\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-01058_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01058.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZlephbb_narrow_M-4500_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v2/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01058_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01058_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01058_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01058 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01058_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01058_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01058_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\n\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n    maxEventsToPrint = cms.untracked.int32(1),\n    pythiaPylistVerbosity = cms.untracked.int32(1),\n    filterEfficiency = cms.untracked.double(1.0),\n    pythiaHepMCVerbosity = cms.untracked.bool(False),\n    comEnergy = cms.double(13000.),\n    PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    )\n    )\n)\n\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/d91dc7801f60176f6b02d2ffd1d0b00307392e4f/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "c4d03e96b97e6067c54800f6779ae2a0",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZlephbb_narrow_M-4500_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_20",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01696_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01696_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01696_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01696_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZlephbb_narrow_M-4500_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01696_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01696_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01696_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01696 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01696_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01696.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01696_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01696_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01696_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01696_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01696 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01696_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01696_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01696_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284ac4abf",
              "process": "RECO",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "de2326bfcaeb574958a7f549bfb4b5be",
              "process": "HLT",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZlephbb_narrow_M-4500_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "RECO HLT"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-00823_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-00823_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-00823_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-00823.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZprimeToZhToZlephbb_narrow_M-4500_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-00823_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-00823_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-00823_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-00823 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-00823_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-00823_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-00823_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "744109404cdf471f6e79fd983bdf69e1",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZlephbb_narrow_M-4500_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22053",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZlephbb_narrow_M-4500_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZlephbb_narrow_M-4500_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZlephbb_narrow_M-600_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 50000,
      "number_files": 1,
      "size": 1678657651
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00092\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00092_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00092_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_15_patch1/src ] ; then\n  echo release CMSSW_7_1_15_patch1 already exists\nelse\n  scram p CMSSW CMSSW_7_1_15_patch1\nfi\ncd CMSSW_7_1_15_patch1/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/d91dc7801f60176f6b02d2ffd1d0b00307392e4f/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M600_13TeV-madgraph_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M600_13TeV-madgraph_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M600_13TeV-madgraph_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M600_13TeV-madgraph_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M600_13TeV-madgraph_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.0473s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.0473s = 0.0473s\n# Which adds up to 0.0473s per event\n# Single core events that fit in validation duration: 20160s / 0.0473s = 426470\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 426470 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M600_13TeV-madgraph_cff.py --python_filename EXO-RunIIWinter15wmLHE-00092_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00092.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00092_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00092_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00092_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00092 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00092_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00092_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00092_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22054/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22054/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22054/run_card.dat"
            },
            {
              "cms_confdb_id": "c410571db24e1dcd4e22c80eb5373461",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZlephbb_narrow_M-600_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_15_patch1",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01048\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01048_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01048_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_19/src ] ; then\n  echo release CMSSW_7_1_19 already exists\nelse\n  scram p CMSSW CMSSW_7_1_19\nfi\ncd CMSSW_7_1_19/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/d91dc7801f60176f6b02d2ffd1d0b00307392e4f/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 65.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 65.0000s = 65.0000s\n# Which adds up to 65.0000s per event\n# Single core events that fit in validation duration: 20160s / 65.0000s = 310\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 310 and 10000, but more than 0 -> 310\n# It is estimated that this validation will produce: 310 * 1.0000 = 310 events\nEVENTS=310\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-01048_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01048.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZlephbb_narrow_M-600_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01048_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01048_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01048_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01048 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01048_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01048_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01048_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\n\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n    maxEventsToPrint = cms.untracked.int32(1),\n    pythiaPylistVerbosity = cms.untracked.int32(1),\n    filterEfficiency = cms.untracked.double(1.0),\n    pythiaHepMCVerbosity = cms.untracked.bool(False),\n    comEnergy = cms.double(13000.),\n    PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    )\n    )\n)\n\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/d91dc7801f60176f6b02d2ffd1d0b00307392e4f/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "9f4f3c630c8c5e86cd77ca22dbdf09a0",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZlephbb_narrow_M-600_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_19",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01095_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01095_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01095_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01095_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZlephbb_narrow_M-600_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01095_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01095_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01095_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01095 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01095_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01095.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01095_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01095_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01095_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01095_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01095 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01095_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01095_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01095_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "01ce611d190017da791ecf9a2ec0bccd",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "01ce611d190017da791ecf9a2ed033ec",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZlephbb_narrow_M-600_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-00811_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-00811_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-00811_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-00811.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZprimeToZhToZlephbb_narrow_M-600_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-00811_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-00811_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-00811_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-00811 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-00811_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-00811_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-00811_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "744109404cdf471f6e79fd983bdf69e1",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZlephbb_narrow_M-600_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22054",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZlephbb_narrow_M-600_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZlephbb_narrow_M-600_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZprimeToZhToZlephbb_narrow_M-800_13TeV-madgraph in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Exotica",
      "secondary": [
        "Heavy Gauge Bosons"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 50000,
      "number_files": 1,
      "size": 1779429723
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00093\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00093_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00093_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_15_patch1/src ] ; then\n  echo release CMSSW_7_1_15_patch1 already exists\nelse\n  scram p CMSSW CMSSW_7_1_15_patch1\nfi\ncd CMSSW_7_1_15_patch1/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/d91dc7801f60176f6b02d2ffd1d0b00307392e4f/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M800_13TeV-madgraph_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M800_13TeV-madgraph_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M800_13TeV-madgraph_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M800_13TeV-madgraph_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M800_13TeV-madgraph_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.0783s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.0783s = 0.0783s\n# Which adds up to 0.0783s per event\n# Single core events that fit in validation duration: 20160s / 0.0783s = 257622\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 257622 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Zprime_Zh_Zlephbb_narrow_M800_13TeV-madgraph_cff.py --python_filename EXO-RunIIWinter15wmLHE-00093_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00093.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00093_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00093_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00093_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00093 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00093_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00093_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00093_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22055/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22055/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/22055/run_card.dat"
            },
            {
              "cms_confdb_id": "c410571db24e1dcd4e22c80eb5134eb3",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZlephbb_narrow_M-800_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_15_patch1",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01049\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01049_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01049_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_19/src ] ; then\n  echo release CMSSW_7_1_19 already exists\nelse\n  scram p CMSSW CMSSW_7_1_19\nfi\ncd CMSSW_7_1_19/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/d91dc7801f60176f6b02d2ffd1d0b00307392e4f/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 160.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 160.0000s = 160.0000s\n# Which adds up to 160.0000s per event\n# Single core events that fit in validation duration: 20160s / 160.0000s = 126\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 126 and 10000, but more than 0 -> 126\n# It is estimated that this validation will produce: 126 * 1.0000 = 126 events\nEVENTS=126\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-01049_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01049.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZprimeToZhToZlephbb_narrow_M-800_13TeV-madgraph/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01049_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01049_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01049_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01049 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01049_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01049_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01049_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\n\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n    maxEventsToPrint = cms.untracked.int32(1),\n    pythiaPylistVerbosity = cms.untracked.int32(1),\n    filterEfficiency = cms.untracked.double(1.0),\n    pythiaHepMCVerbosity = cms.untracked.bool(False),\n    comEnergy = cms.double(13000.),\n    PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    )\n    )\n)\n\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/d91dc7801f60176f6b02d2ffd1d0b00307392e4f/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_generic_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "9f4f3c630c8c5e86cd77ca22dbdf09a0",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZprimeToZhToZlephbb_narrow_M-800_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_19",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01096_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01096_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01096_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01096_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZprimeToZhToZlephbb_narrow_M-800_13TeV-madgraph/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01096_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01096_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01096_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01096 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01096_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01096.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01096_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01096_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01096_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01096_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01096 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01096_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01096_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01096_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "01ce611d190017da791ecf9a2ec0bccd",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "01ce611d190017da791ecf9a2ed033ec",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZlephbb_narrow_M-800_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-00812_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-00812_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-00812_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-00812.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZprimeToZhToZlephbb_narrow_M-800_13TeV-madgraph/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-00812_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-00812_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-00812_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-00812 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-00812_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-00812_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-00812_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "744109404cdf471f6e79fd983bdf69e1",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZprimeToZhToZlephbb_narrow_M-800_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "22055",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZprimeToZhToZlephbb_narrow_M-800_13TeV-madgraph/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZprimeToZhToZlephbb_narrow_M-800_13TeV-madgraph in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZToEE_M_120_200_NNPDF30_13TeV_powheg_herwigpp in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Standard Model Physics",
      "secondary": [
        "ElectroWeak"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 99997,
      "number_files": 8,
      "size": 3125436001
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00342\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00342_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00342_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_16_patch2/src ] ; then\n  echo release CMSSW_7_1_16_patch2 already exists\nelse\n  scram p CMSSW CMSSW_7_1_16_patch2\nfi\ncd CMSSW_7_1_16_patch2/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-00342 --retry 3 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py\n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.4000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.4000s = 0.4000s\n# Which adds up to 0.4000s per event\n# Single core events that fit in validation duration: 20160s / 0.4000s = 50400\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 50400 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --python_filename EXO-RunIIWinter15wmLHE-00342_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00342.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00342_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00342_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00342_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00342 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00342_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00342_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00342_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: powheg.input",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21565/powheg.input"
            },
            {
              "cms_confdb_id": "961a7b714523afd33725092c3636c781",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZToEE_NNPDF30_13TeV-powheg_M_120_200/RunIIWinter15wmLHE-MCRUN2_71_V1-v3/LHE",
          "release": "CMSSW_7_1_16_patch2",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-07178\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-07178_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-07178_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_22/src ] ; then\n  echo release CMSSW_7_1_22 already exists\nelse\n  scram p CMSSW CMSSW_7_1_22\nfi\ncd CMSSW_7_1_22/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIISummer15GS-07178 --retry 3 --create-dirs -o Configuration/GenProduction/python/EXO-RunIISummer15GS-07178-fragment.py\n[ -s Configuration/GenProduction/python/EXO-RunIISummer15GS-07178-fragment.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/EXO-RunIISummer15GS-07178-fragment.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/EXO-RunIISummer15GS-07178-fragment.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 49.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 49.0000s = 49.0000s\n# Which adds up to 49.0000s per event\n# Single core events that fit in validation duration: 20160s / 49.0000s = 411\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 411 and 10000, but more than 0 -> 411\n# It is estimated that this validation will produce: 411 * 1.0000 = 411 events\nEVENTS=411\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/EXO-RunIISummer15GS-07178-fragment.py --python_filename EXO-RunIISummer15GS-07178_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-07178.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZToEE_NNPDF30_13TeV-powheg_M_120_200/RunIIWinter15wmLHE-MCRUN2_71_V1-v3/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-07178_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-07178_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-07178_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-07178 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-07178_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-07178_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-07178_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\n\nfrom Configuration.Generator.HerwigppDefaults_cfi import *\nfrom Configuration.Generator.HerwigppUE_EE_5C_cfi import *\nfrom Configuration.Generator.HerwigppPDF_CTEQ6_LO_cfi import *\t\t\t\t\t\t\t\t\t# Import CTEQ6L PDF as shower pdf\nfrom Configuration.Generator.HerwigppPDF_NNPDF30_NLO_cfi import herwigppPDFSettingsBlock as herwigppHardPDFSettingsBlock \t# Import NNPDF30 NLO as PDF of the hard subprocess\nfrom Configuration.Generator.HerwigppEnergy_13TeV_cfi import *\nfrom Configuration.Generator.HerwigppLHEFile_cfi import *\nfrom Configuration.Generator.HerwigppMECorrections_cfi import *\n\ngenerator = cms.EDFilter(\"ThePEGHadronizerFilter\",\n\therwigDefaultsBlock,\n\therwigppUESettingsBlock,\n\therwigppPDFSettingsBlock,\n\therwigppHardPDFSettingsBlock,\t\t\t# Implementing renamed NNPDF30 config block\n\therwigppEnergySettingsBlock,\n\therwigppLHEFileSettingsBlock,\n\therwigppMECorrectionsSettingsBlock,\n\n\tconfigFiles = cms.vstring(),\n\tparameterSets = cms.vstring(\n\t\t'hwpp_cmsDefaults',\n\t\t'hwpp_ue_EE5C',\n\t\t'hwpp_cm_13TeV',\n\t\t'hwpp_pdf_CTEQ6L1',\t\t\t# Shower PDF matching with the tune\n\t\t'hwpp_pdf_NNPDF30NLO_Hard',\t\t# PDF of hard subprocess\n\t\t'hwpp_LHE_Powheg_DifferentPDFs',\n\t\t'hwpp_MECorr_Off'\t\t\t# Switch off ME corrections while showering LHE files as recommended by Herwig++ authors\n    ),\n        crossSection = cms.untracked.double(-1),\n        filterEfficiency = cms.untracked.double(1.0),\n)\nProductionFilterSequence = cms.Sequence(generator)",
              "title": "Hadronizer parameters",
              "url": "https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIISummer15GS-07178"
            },
            {
              "cms_confdb_id": "385d5411979408b4638999f07542df73",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZToEE_M_120_200_NNPDF30_13TeV_powheg_herwigpp/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_22",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-04004_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-04004_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-04004_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-04004_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZToEE_M_120_200_NNPDF30_13TeV_powheg_herwigpp/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-04004_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-04004_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-04004_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-04004 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-04004_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-04004.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-04004_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-04004_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-04004_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-04004_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-04004 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-04004_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-04004_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-04004_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "95297f0e5af6ef9d7c80e61fa428d97b",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "95297f0e5af6ef9d7c80e61fa429ff4f",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZToEE_M_120_200_NNPDF30_13TeV_powheg_herwigpp/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-03840_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-03840_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-03840_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-03840.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZToEE_M_120_200_NNPDF30_13TeV_powheg_herwigpp/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-03840_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-03840_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-03840_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-03840 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-03840_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-03840_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-03840_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "8a116aab3e9d220dbe227045ccbab3e3",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZToEE_M_120_200_NNPDF30_13TeV_powheg_herwigpp/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21565",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZToEE_M_120_200_NNPDF30_13TeV_powheg_herwigpp/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZToEE_M_120_200_NNPDF30_13TeV_powheg_herwigpp in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZToEE_M_50_120_NNPDF30_13TeV_powheg_herwigpp in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Standard Model Physics",
      "secondary": [
        "ElectroWeak"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 2994802,
      "number_files": 76,
      "size": 89516222872
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00341\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00341_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00341_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_16_patch2/src ] ; then\n  echo release CMSSW_7_1_16_patch2 already exists\nelse\n  scram p CMSSW CMSSW_7_1_16_patch2\nfi\ncd CMSSW_7_1_16_patch2/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-00341 --retry 3 --create-dirs -o Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00341-fragment.py\n[ -s Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00341-fragment.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00341-fragment.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00341-fragment.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.7375s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.7375s = 0.7375s\n# Which adds up to 0.7375s per event\n# Single core events that fit in validation duration: 20160s / 0.7375s = 27334\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 27334 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00341-fragment.py --python_filename EXO-RunIIWinter15wmLHE-00341_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00341.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00341_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00341_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00341_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00341 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00341_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00341_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00341_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: powheg.input",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21566/powheg.input"
            },
            {
              "cms_confdb_id": "088906c6a625f463977989030f11e938",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZToEE_NNPDF30_13TeV-powheg_M_50_120/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_16_patch2",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-07037\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-07037_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-07037_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_21_patch2/src ] ; then\n  echo release CMSSW_7_1_21_patch2 already exists\nelse\n  scram p CMSSW CMSSW_7_1_21_patch2\nfi\ncd CMSSW_7_1_21_patch2/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIISummer15GS-07037 --retry 3 --create-dirs -o Configuration/GenProduction/python/EXO-RunIISummer15GS-07037-fragment.py\n[ -s Configuration/GenProduction/python/EXO-RunIISummer15GS-07037-fragment.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/EXO-RunIISummer15GS-07037-fragment.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/EXO-RunIISummer15GS-07037-fragment.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 27.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 27.0000s = 27.0000s\n# Which adds up to 27.0000s per event\n# Single core events that fit in validation duration: 20160s / 27.0000s = 746\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 746 and 10000, but more than 0 -> 746\n# It is estimated that this validation will produce: 746 * 1.0000 = 746 events\nEVENTS=746\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/EXO-RunIISummer15GS-07037-fragment.py --python_filename EXO-RunIISummer15GS-07037_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-07037.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZToEE_NNPDF30_13TeV-powheg_M_50_120/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-07037_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-07037_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-07037_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-07037 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-07037_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-07037_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-07037_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\n\nfrom Configuration.Generator.HerwigppDefaults_cfi import *\nfrom Configuration.Generator.HerwigppUE_EE_5C_cfi import *\nfrom Configuration.Generator.HerwigppPDF_CTEQ6_LO_cfi import *\t\t\t\t\t\t\t\t\t# Import CTEQ6L PDF as shower pdf\nfrom Configuration.Generator.HerwigppPDF_NNPDF30_NLO_cfi import herwigppPDFSettingsBlock as herwigppHardPDFSettingsBlock \t# Import NNPDF30 NLO as PDF of the hard subprocess\nfrom Configuration.Generator.HerwigppEnergy_13TeV_cfi import *\nfrom Configuration.Generator.HerwigppLHEFile_cfi import *\nfrom Configuration.Generator.HerwigppMECorrections_cfi import *\n\ngenerator = cms.EDFilter(\"ThePEGHadronizerFilter\",\n\therwigDefaultsBlock,\n\therwigppUESettingsBlock,\n\therwigppPDFSettingsBlock,\n\therwigppHardPDFSettingsBlock,\t\t\t# Implementing renamed NNPDF30 config block\n\therwigppEnergySettingsBlock,\n\therwigppLHEFileSettingsBlock,\n\therwigppMECorrectionsSettingsBlock,\n\n\tconfigFiles = cms.vstring(),\n\tparameterSets = cms.vstring(\n\t\t'hwpp_cmsDefaults',\n\t\t'hwpp_ue_EE5C',\n\t\t'hwpp_cm_13TeV',\n\t\t'hwpp_pdf_CTEQ6L1',\t\t\t# Shower PDF matching with the tune\n\t\t'hwpp_pdf_NNPDF30NLO_Hard',\t\t# PDF of hard subprocess\n\t\t'hwpp_LHE_Powheg_DifferentPDFs',\n\t\t'hwpp_MECorr_Off'\t\t\t# Switch off ME corrections while showering LHE files as recommended by Herwig++ authors\n    ),\n        crossSection = cms.untracked.double(-1),\n        filterEfficiency = cms.untracked.double(1.0),\n)\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIISummer15GS-07037"
            },
            {
              "cms_confdb_id": "5ce6a7f7c79c7f5c518205ca837eb16b",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZToEE_M_50_120_NNPDF30_13TeV_powheg_herwigpp/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_21_patch2",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-04000_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-04000_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-04000_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-04000_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZToEE_M_50_120_NNPDF30_13TeV_powheg_herwigpp/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-04000_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-04000_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-04000_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-04000 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-04000_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-04000.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-04000_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-04000_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-04000_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-04000_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-04000 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-04000_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-04000_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-04000_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "95297f0e5af6ef9d7c80e61fa428d97b",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "95297f0e5af6ef9d7c80e61fa429ff4f",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZToEE_M_50_120_NNPDF30_13TeV_powheg_herwigpp/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-03798_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-03798_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-03798_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-03798.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZToEE_M_50_120_NNPDF30_13TeV_powheg_herwigpp/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-03798_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-03798_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-03798_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-03798 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-03798_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-03798_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-03798_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "8a116aab3e9d220dbe227045ccbab3e3",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZToEE_M_50_120_NNPDF30_13TeV_powheg_herwigpp/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21566",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZToEE_M_50_120_NNPDF30_13TeV_powheg_herwigpp/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZToEE_M_50_120_NNPDF30_13TeV_powheg_herwigpp in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZToEE_NNPDF30_13TeV-powheg_M_120_200 in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Standard Model Physics",
      "secondary": [
        "ElectroWeak"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 100000,
      "number_files": 3,
      "size": 2499783752
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00342\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00342_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00342_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_16_patch2/src ] ; then\n  echo release CMSSW_7_1_16_patch2 already exists\nelse\n  scram p CMSSW CMSSW_7_1_16_patch2\nfi\ncd CMSSW_7_1_16_patch2/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-00342 --retry 3 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py\n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.4000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.4000s = 0.4000s\n# Which adds up to 0.4000s per event\n# Single core events that fit in validation duration: 20160s / 0.4000s = 50400\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 50400 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --python_filename EXO-RunIIWinter15wmLHE-00342_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00342.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00342_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00342_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00342_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00342 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00342_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00342_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00342_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: powheg.input",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21567/powheg.input"
            },
            {
              "cms_confdb_id": "961a7b714523afd33725092c3636c781",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZToEE_NNPDF30_13TeV-powheg_M_120_200/RunIIWinter15wmLHE-MCRUN2_71_V1-v3/LHE",
          "release": "CMSSW_7_1_16_patch2",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01260\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01260_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01260_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_19/src ] ; then\n  echo release CMSSW_7_1_19 already exists\nelse\n  scram p CMSSW CMSSW_7_1_19\nfi\ncd CMSSW_7_1_19/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/ee53ee495d94eac22b4a451a0ad46d0805b86f4b/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 71.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 71.0000s = 71.0000s\n# Which adds up to 71.0000s per event\n# Single core events that fit in validation duration: 20160s / 71.0000s = 283\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 283 and 10000, but more than 0 -> 283\n# It is estimated that this validation will produce: 283 * 1.0000 = 283 events\nEVENTS=283\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-01260_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01260.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZToEE_NNPDF30_13TeV-powheg_M_120_200/RunIIWinter15wmLHE-MCRUN2_71_V1-v3/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01260_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01260_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01260_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01260 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01260_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01260_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01260_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\nfrom Configuration.Generator.Pythia8PowhegEmissionVetoSettings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        pythia8PowhegEmissionVetoSettingsBlock,\n        processParameters = cms.vstring(\n            'POWHEG:nFinal = 1',   ## Number of final state particles\n                                   ## (BEFORE THE DECAYS) in the LHE\n                                   ## other than emitted extra parton\n          ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'pythia8PowhegEmissionVetoSettings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/ee53ee495d94eac22b4a451a0ad46d0805b86f4b/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "2557f311e3275b75b2e1ea1cb1c5cab4",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZToEE_NNPDF30_13TeV-powheg_M_120_200/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_19",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01288_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01288_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01288_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01288_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZToEE_NNPDF30_13TeV-powheg_M_120_200/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01288_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01288_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01288_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01288 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01288_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01288.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01288_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01288_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01288_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01288_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01288 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01288_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01288_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01288_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284abbc32",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284ac4abf",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZToEE_NNPDF30_13TeV-powheg_M_120_200/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-00973_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-00973_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-00973_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-00973.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZToEE_NNPDF30_13TeV-powheg_M_120_200/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-00973_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-00973_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-00973_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-00973 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-00973_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-00973_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-00973_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "744109404cdf471f6e79fd983bdf69e1",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZToEE_NNPDF30_13TeV-powheg_M_120_200/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21567",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZToEE_NNPDF30_13TeV-powheg_M_120_200/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZToEE_NNPDF30_13TeV-powheg_M_120_200 in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZToEE_NNPDF30_13TeV-powheg_M_1400_2300 in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Standard Model Physics",
      "secondary": [
        "ElectroWeak"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 100000,
      "number_files": 3,
      "size": 3046451636
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00346\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00346_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00346_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_16_patch2/src ] ; then\n  echo release CMSSW_7_1_16_patch2 already exists\nelse\n  scram p CMSSW CMSSW_7_1_16_patch2\nfi\ncd CMSSW_7_1_16_patch2/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-00346 --retry 3 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py\n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.6947s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.6947s = 0.6947s\n# Which adds up to 0.6947s per event\n# Single core events that fit in validation duration: 20160s / 0.6947s = 29019\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 29019 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --python_filename EXO-RunIIWinter15wmLHE-00346_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00346.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00346_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00346_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00346_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00346 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00346_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00346_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00346_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: powheg.input",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21568/powheg.input"
            },
            {
              "cms_confdb_id": "961a7b714523afd33725092c3636cbc1",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZToEE_NNPDF30_13TeV-powheg_M_1400_2300/RunIIWinter15wmLHE-MCRUN2_71_V1-v2/LHE",
          "release": "CMSSW_7_1_16_patch2",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01266\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01266_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01266_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_19/src ] ; then\n  echo release CMSSW_7_1_19 already exists\nelse\n  scram p CMSSW CMSSW_7_1_19\nfi\ncd CMSSW_7_1_19/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/ee53ee495d94eac22b4a451a0ad46d0805b86f4b/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 208.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 208.0000s = 208.0000s\n# Which adds up to 208.0000s per event\n# Single core events that fit in validation duration: 20160s / 208.0000s = 96\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 96 and 10000, but more than 0 -> 96\n# It is estimated that this validation will produce: 96 * 1.0000 = 96 events\nEVENTS=96\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-01266_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01266.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZToEE_NNPDF30_13TeV-powheg_M_1400_2300/RunIIWinter15wmLHE-MCRUN2_71_V1-v2/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01266_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01266_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01266_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01266 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01266_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01266_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01266_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\nfrom Configuration.Generator.Pythia8PowhegEmissionVetoSettings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        pythia8PowhegEmissionVetoSettingsBlock,\n        processParameters = cms.vstring(\n            'POWHEG:nFinal = 1',   ## Number of final state particles\n                                   ## (BEFORE THE DECAYS) in the LHE\n                                   ## other than emitted extra parton\n          ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'pythia8PowhegEmissionVetoSettings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/ee53ee495d94eac22b4a451a0ad46d0805b86f4b/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "2557f311e3275b75b2e1ea1cb1c5cab4",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZToEE_NNPDF30_13TeV-powheg_M_1400_2300/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_19",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01292_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01292_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01292_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01292_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZToEE_NNPDF30_13TeV-powheg_M_1400_2300/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01292_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01292_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01292_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01292 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01292_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01292.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01292_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01292_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01292_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01292_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01292 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01292_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01292_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01292_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284abbc32",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284ac4abf",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZToEE_NNPDF30_13TeV-powheg_M_1400_2300/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-01768_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-01768_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-01768_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-01768.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZToEE_NNPDF30_13TeV-powheg_M_1400_2300/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v2/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-01768_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-01768_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-01768_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-01768 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-01768_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-01768_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-01768_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "263bc77d99136bb88051f7972daa8663",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZToEE_NNPDF30_13TeV-powheg_M_1400_2300/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21568",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZToEE_NNPDF30_13TeV-powheg_M_1400_2300/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZToEE_NNPDF30_13TeV-powheg_M_1400_2300 in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZToEE_NNPDF30_13TeV-powheg_M_200_400 in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Standard Model Physics",
      "secondary": [
        "ElectroWeak"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 100000,
      "number_files": 3,
      "size": 2662059359
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00343\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00343_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00343_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_16_patch2/src ] ; then\n  echo release CMSSW_7_1_16_patch2 already exists\nelse\n  scram p CMSSW CMSSW_7_1_16_patch2\nfi\ncd CMSSW_7_1_16_patch2/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-00343 --retry 3 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py\n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.5474s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.5474s = 0.5474s\n# Which adds up to 0.5474s per event\n# Single core events that fit in validation duration: 20160s / 0.5474s = 36826\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 36826 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --python_filename EXO-RunIIWinter15wmLHE-00343_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00343.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00343_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00343_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00343_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00343 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00343_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00343_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00343_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: powheg.input",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21569/powheg.input"
            },
            {
              "cms_confdb_id": "961a7b714523afd33725092c3636c0d9",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZToEE_NNPDF30_13TeV-powheg_M_200_400/RunIIWinter15wmLHE-MCRUN2_71_V1-v2/LHE",
          "release": "CMSSW_7_1_16_patch2",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01262\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01262_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01262_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_19/src ] ; then\n  echo release CMSSW_7_1_19 already exists\nelse\n  scram p CMSSW CMSSW_7_1_19\nfi\ncd CMSSW_7_1_19/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/ee53ee495d94eac22b4a451a0ad46d0805b86f4b/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 56.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 56.0000s = 56.0000s\n# Which adds up to 56.0000s per event\n# Single core events that fit in validation duration: 20160s / 56.0000s = 360\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 360 and 10000, but more than 0 -> 360\n# It is estimated that this validation will produce: 360 * 1.0000 = 360 events\nEVENTS=360\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-01262_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01262.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZToEE_NNPDF30_13TeV-powheg_M_200_400/RunIIWinter15wmLHE-MCRUN2_71_V1-v2/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01262_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01262_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01262_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01262 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01262_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01262_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01262_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\nfrom Configuration.Generator.Pythia8PowhegEmissionVetoSettings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        pythia8PowhegEmissionVetoSettingsBlock,\n        processParameters = cms.vstring(\n            'POWHEG:nFinal = 1',   ## Number of final state particles\n                                   ## (BEFORE THE DECAYS) in the LHE\n                                   ## other than emitted extra parton\n          ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'pythia8PowhegEmissionVetoSettings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/ee53ee495d94eac22b4a451a0ad46d0805b86f4b/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "2557f311e3275b75b2e1ea1cb1c5cab4",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZToEE_NNPDF30_13TeV-powheg_M_200_400/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_19",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01289_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01289_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01289_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01289_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZToEE_NNPDF30_13TeV-powheg_M_200_400/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01289_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01289_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01289_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01289 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01289_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01289.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01289_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01289_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01289_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01289_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01289 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01289_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01289_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01289_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284abbc32",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284ac4abf",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZToEE_NNPDF30_13TeV-powheg_M_200_400/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-00974_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-00974_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-00974_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-00974.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZToEE_NNPDF30_13TeV-powheg_M_200_400/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-00974_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-00974_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-00974_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-00974 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-00974_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-00974_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-00974_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "744109404cdf471f6e79fd983bdf69e1",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZToEE_NNPDF30_13TeV-powheg_M_200_400/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21569",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZToEE_NNPDF30_13TeV-powheg_M_200_400/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZToEE_NNPDF30_13TeV-powheg_M_200_400 in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZToEE_NNPDF30_13TeV-powheg_M_2300_3500 in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Standard Model Physics",
      "secondary": [
        "ElectroWeak"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 100000,
      "number_files": 3,
      "size": 3057280473
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00347\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00347_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00347_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_16_patch2/src ] ; then\n  echo release CMSSW_7_1_16_patch2 already exists\nelse\n  scram p CMSSW CMSSW_7_1_16_patch2\nfi\ncd CMSSW_7_1_16_patch2/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-00347 --retry 3 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py\n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.7089s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.7089s = 0.7089s\n# Which adds up to 0.7089s per event\n# Single core events that fit in validation duration: 20160s / 0.7089s = 28439\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 28439 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --python_filename EXO-RunIIWinter15wmLHE-00347_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00347.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00347_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00347_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00347_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00347 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00347_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00347_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00347_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: powheg.input",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21570/powheg.input"
            },
            {
              "cms_confdb_id": "961a7b714523afd33725092c3636f2d7",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZToEE_NNPDF30_13TeV-powheg_M_2300_3500/RunIIWinter15wmLHE-MCRUN2_71_V1-v2/LHE",
          "release": "CMSSW_7_1_16_patch2",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01257\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01257_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01257_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_19/src ] ; then\n  echo release CMSSW_7_1_19 already exists\nelse\n  scram p CMSSW CMSSW_7_1_19\nfi\ncd CMSSW_7_1_19/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/ee53ee495d94eac22b4a451a0ad46d0805b86f4b/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 274.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 274.0000s = 274.0000s\n# Which adds up to 274.0000s per event\n# Single core events that fit in validation duration: 20160s / 274.0000s = 73\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 73 and 10000, but more than 0 -> 73\n# It is estimated that this validation will produce: 73 * 1.0000 = 73 events\nEVENTS=73\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-01257_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01257.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZToEE_NNPDF30_13TeV-powheg_M_2300_3500/RunIIWinter15wmLHE-MCRUN2_71_V1-v2/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01257_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01257_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01257_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01257 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01257_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01257_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01257_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\nfrom Configuration.Generator.Pythia8PowhegEmissionVetoSettings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        pythia8PowhegEmissionVetoSettingsBlock,\n        processParameters = cms.vstring(\n            'POWHEG:nFinal = 1',   ## Number of final state particles\n                                   ## (BEFORE THE DECAYS) in the LHE\n                                   ## other than emitted extra parton\n          ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'pythia8PowhegEmissionVetoSettings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/ee53ee495d94eac22b4a451a0ad46d0805b86f4b/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "2557f311e3275b75b2e1ea1cb1c5cab4",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZToEE_NNPDF30_13TeV-powheg_M_2300_3500/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_19",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01293_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01293_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01293_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01293_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZToEE_NNPDF30_13TeV-powheg_M_2300_3500/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01293_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01293_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01293_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01293 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01293_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01293.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01293_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01293_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01293_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01293_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01293 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01293_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01293_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01293_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284abbc32",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284ac4abf",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZToEE_NNPDF30_13TeV-powheg_M_2300_3500/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-01047_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-01047_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-01047_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-01047.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZToEE_NNPDF30_13TeV-powheg_M_2300_3500/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-01047_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-01047_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-01047_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-01047 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-01047_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-01047_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-01047_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "744109404cdf471f6e79fd983bdf69e1",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZToEE_NNPDF30_13TeV-powheg_M_2300_3500/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21570",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZToEE_NNPDF30_13TeV-powheg_M_2300_3500/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZToEE_NNPDF30_13TeV-powheg_M_2300_3500 in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZToEE_NNPDF30_13TeV-powheg_M_3500_4500 in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Standard Model Physics",
      "secondary": [
        "ElectroWeak"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 100000,
      "number_files": 8,
      "size": 3100950743
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00348\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00348_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00348_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_16_patch2/src ] ; then\n  echo release CMSSW_7_1_16_patch2 already exists\nelse\n  scram p CMSSW CMSSW_7_1_16_patch2\nfi\ncd CMSSW_7_1_16_patch2/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-00348 --retry 3 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py\n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --python_filename EXO-RunIIWinter15wmLHE-00348_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00348.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00348_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00348_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00348_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00348 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00348_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00348_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00348_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: powheg.input",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21571/powheg.input"
            },
            {
              "cms_confdb_id": "961a7b714523afd33725092c3636e8ab",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZToEE_NNPDF30_13TeV-powheg_M_3500_4500/RunIIWinter15wmLHE-MCRUN2_71_V1-v2/LHE",
          "release": "CMSSW_7_1_16_patch2",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01258\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01258_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01258_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_19/src ] ; then\n  echo release CMSSW_7_1_19 already exists\nelse\n  scram p CMSSW CMSSW_7_1_19\nfi\ncd CMSSW_7_1_19/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/ee53ee495d94eac22b4a451a0ad46d0805b86f4b/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 299.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 299.0000s = 299.0000s\n# Which adds up to 299.0000s per event\n# Single core events that fit in validation duration: 20160s / 299.0000s = 67\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 67 and 10000, but more than 0 -> 67\n# It is estimated that this validation will produce: 67 * 1.0000 = 67 events\nEVENTS=67\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-01258_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01258.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZToEE_NNPDF30_13TeV-powheg_M_3500_4500/RunIIWinter15wmLHE-MCRUN2_71_V1-v2/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01258_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01258_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01258_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01258 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01258_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01258_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01258_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\nfrom Configuration.Generator.Pythia8PowhegEmissionVetoSettings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        pythia8PowhegEmissionVetoSettingsBlock,\n        processParameters = cms.vstring(\n            'POWHEG:nFinal = 1',   ## Number of final state particles\n                                   ## (BEFORE THE DECAYS) in the LHE\n                                   ## other than emitted extra parton\n          ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'pythia8PowhegEmissionVetoSettings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/ee53ee495d94eac22b4a451a0ad46d0805b86f4b/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "2557f311e3275b75b2e1ea1cb1c5cab4",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZToEE_NNPDF30_13TeV-powheg_M_3500_4500/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_19",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01294_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01294_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01294_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01294_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZToEE_NNPDF30_13TeV-powheg_M_3500_4500/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01294_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01294_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01294_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01294 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01294_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01294.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01294_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01294_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01294_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01294_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01294 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01294_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01294_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01294_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284abbc32",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284ac4abf",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZToEE_NNPDF30_13TeV-powheg_M_3500_4500/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-01048_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-01048_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-01048_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-01048.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZToEE_NNPDF30_13TeV-powheg_M_3500_4500/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-01048_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-01048_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-01048_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-01048 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-01048_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-01048_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-01048_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "744109404cdf471f6e79fd983bdf69e1",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZToEE_NNPDF30_13TeV-powheg_M_3500_4500/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21571",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZToEE_NNPDF30_13TeV-powheg_M_3500_4500/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZToEE_NNPDF30_13TeV-powheg_M_3500_4500 in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZToEE_NNPDF30_13TeV-powheg_M_400_800 in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Standard Model Physics",
      "secondary": [
        "ElectroWeak"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 100000,
      "number_files": 3,
      "size": 2865723856
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00344\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00344_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00344_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_16_patch2/src ] ; then\n  echo release CMSSW_7_1_16_patch2 already exists\nelse\n  scram p CMSSW CMSSW_7_1_16_patch2\nfi\ncd CMSSW_7_1_16_patch2/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-00344 --retry 3 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py\n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.8283s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.8283s = 0.8283s\n# Which adds up to 0.8283s per event\n# Single core events that fit in validation duration: 20160s / 0.8283s = 24339\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 24339 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --python_filename EXO-RunIIWinter15wmLHE-00344_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00344.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00344_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00344_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00344_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00344 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00344_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00344_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00344_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: powheg.input",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21572/powheg.input"
            },
            {
              "cms_confdb_id": "961a7b714523afd33725092c3636c819",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZToEE_NNPDF30_13TeV-powheg_M_400_800/RunIIWinter15wmLHE-MCRUN2_71_V1-v2/LHE",
          "release": "CMSSW_7_1_16_patch2",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01256\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01256_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01256_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_19/src ] ; then\n  echo release CMSSW_7_1_19 already exists\nelse\n  scram p CMSSW CMSSW_7_1_19\nfi\ncd CMSSW_7_1_19/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/ee53ee495d94eac22b4a451a0ad46d0805b86f4b/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 53.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 53.0000s = 53.0000s\n# Which adds up to 53.0000s per event\n# Single core events that fit in validation duration: 20160s / 53.0000s = 380\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 380 and 10000, but more than 0 -> 380\n# It is estimated that this validation will produce: 380 * 1.0000 = 380 events\nEVENTS=380\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-01256_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01256.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZToEE_NNPDF30_13TeV-powheg_M_400_800/RunIIWinter15wmLHE-MCRUN2_71_V1-v2/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01256_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01256_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01256_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01256 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01256_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01256_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01256_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\nfrom Configuration.Generator.Pythia8PowhegEmissionVetoSettings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        pythia8PowhegEmissionVetoSettingsBlock,\n        processParameters = cms.vstring(\n            'POWHEG:nFinal = 1',   ## Number of final state particles\n                                   ## (BEFORE THE DECAYS) in the LHE\n                                   ## other than emitted extra parton\n          ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'pythia8PowhegEmissionVetoSettings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/ee53ee495d94eac22b4a451a0ad46d0805b86f4b/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "2557f311e3275b75b2e1ea1cb1c5cab4",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZToEE_NNPDF30_13TeV-powheg_M_400_800/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_19",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01290_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01290_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01290_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01290_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZToEE_NNPDF30_13TeV-powheg_M_400_800/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01290_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01290_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01290_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01290 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01290_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01290.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01290_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01290_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01290_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01290_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01290 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01290_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01290_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01290_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284abbc32",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284ac4abf",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZToEE_NNPDF30_13TeV-powheg_M_400_800/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-01045_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-01045_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-01045_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-01045.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZToEE_NNPDF30_13TeV-powheg_M_400_800/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-01045_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-01045_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-01045_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-01045 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-01045_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-01045_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-01045_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "744109404cdf471f6e79fd983bdf69e1",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZToEE_NNPDF30_13TeV-powheg_M_400_800/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21572",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZToEE_NNPDF30_13TeV-powheg_M_400_800/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZToEE_NNPDF30_13TeV-powheg_M_400_800 in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZToEE_NNPDF30_13TeV-powheg_M_4500_6000 in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Standard Model Physics",
      "secondary": [
        "ElectroWeak"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 99000,
      "number_files": 10,
      "size": 3056062419
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00349\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00349_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00349_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_16_patch2/src ] ; then\n  echo release CMSSW_7_1_16_patch2 already exists\nelse\n  scram p CMSSW CMSSW_7_1_16_patch2\nfi\ncd CMSSW_7_1_16_patch2/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-00349 --retry 3 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py\n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.6872s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.6872s = 0.6872s\n# Which adds up to 0.6872s per event\n# Single core events that fit in validation duration: 20160s / 0.6872s = 29336\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 29336 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --python_filename EXO-RunIIWinter15wmLHE-00349_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00349.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00349_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00349_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00349_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00349 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00349_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00349_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00349_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: powheg.input",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21573/powheg.input"
            },
            {
              "cms_confdb_id": "961a7b714523afd33725092c3636e626",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZToEE_NNPDF30_13TeV-powheg_M_4500_6000/RunIIWinter15wmLHE-MCRUN2_71_V1-v2/LHE",
          "release": "CMSSW_7_1_16_patch2",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01261\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01261_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01261_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/ee53ee495d94eac22b4a451a0ad46d0805b86f4b/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 164.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 164.0000s = 164.0000s\n# Which adds up to 164.0000s per event\n# Single core events that fit in validation duration: 20160s / 164.0000s = 122\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 122 and 10000, but more than 0 -> 122\n# It is estimated that this validation will produce: 122 * 1.0000 = 122 events\nEVENTS=122\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-01261_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01261.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZToEE_NNPDF30_13TeV-powheg_M_4500_6000/RunIIWinter15wmLHE-MCRUN2_71_V1-v2/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01261_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01261_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01261_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01261 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01261_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01261_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01261_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\nfrom Configuration.Generator.Pythia8PowhegEmissionVetoSettings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        pythia8PowhegEmissionVetoSettingsBlock,\n        processParameters = cms.vstring(\n            'POWHEG:nFinal = 1',   ## Number of final state particles\n                                   ## (BEFORE THE DECAYS) in the LHE\n                                   ## other than emitted extra parton\n          ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'pythia8PowhegEmissionVetoSettings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/ee53ee495d94eac22b4a451a0ad46d0805b86f4b/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "a1aaf4e90c0d3383800722a5ea23caa6",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZToEE_NNPDF30_13TeV-powheg_M_4500_6000/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_20",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-03940_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-03940_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-03940_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-03940_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZToEE_NNPDF30_13TeV-powheg_M_4500_6000/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-03940_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-03940_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-03940_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-03940 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-03940_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-03940.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-03940_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-03940_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-03940_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-03940_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-03940 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-03940_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-03940_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-03940_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "12e2510b340a993fb46563ca93fca333",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "4246795564e60923f7de0af0060834e5",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZToEE_NNPDF30_13TeV-powheg_M_4500_6000/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-03787_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-03787_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-03787_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-03787.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein file:EXO-RunIIFall15DR76-03940.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-03787_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-03787_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-03787_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-03787 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-03787_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-03787_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-03787_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "ddb3e1cd1254f391df1211ebc78d05bb",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZToEE_NNPDF30_13TeV-powheg_M_4500_6000/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21573",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZToEE_NNPDF30_13TeV-powheg_M_4500_6000/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZToEE_NNPDF30_13TeV-powheg_M_4500_6000 in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZToEE_NNPDF30_13TeV-powheg_M_50_120 in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Standard Model Physics",
      "secondary": [
        "ElectroWeak"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 2984400,
      "number_files": 74,
      "size": 70837534456
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00341\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00341_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00341_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_16_patch2/src ] ; then\n  echo release CMSSW_7_1_16_patch2 already exists\nelse\n  scram p CMSSW CMSSW_7_1_16_patch2\nfi\ncd CMSSW_7_1_16_patch2/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-00341 --retry 3 --create-dirs -o Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00341-fragment.py\n[ -s Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00341-fragment.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00341-fragment.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00341-fragment.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.7375s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.7375s = 0.7375s\n# Which adds up to 0.7375s per event\n# Single core events that fit in validation duration: 20160s / 0.7375s = 27334\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 27334 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00341-fragment.py --python_filename EXO-RunIIWinter15wmLHE-00341_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00341.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00341_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00341_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00341_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00341 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00341_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00341_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00341_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: powheg.input",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21574/powheg.input"
            },
            {
              "cms_confdb_id": "088906c6a625f463977989030f11e938",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZToEE_NNPDF30_13TeV-powheg_M_50_120/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_16_patch2",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01259\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01259_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01259_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_19/src ] ; then\n  echo release CMSSW_7_1_19 already exists\nelse\n  scram p CMSSW CMSSW_7_1_19\nfi\ncd CMSSW_7_1_19/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/ee53ee495d94eac22b4a451a0ad46d0805b86f4b/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 26.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 26.0000s = 26.0000s\n# Which adds up to 26.0000s per event\n# Single core events that fit in validation duration: 20160s / 26.0000s = 775\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 775 and 10000, but more than 0 -> 775\n# It is estimated that this validation will produce: 775 * 1.0000 = 775 events\nEVENTS=775\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-01259_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01259.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZToEE_NNPDF30_13TeV-powheg_M_50_120/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01259_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01259_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01259_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01259 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01259_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01259_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01259_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\nfrom Configuration.Generator.Pythia8PowhegEmissionVetoSettings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        pythia8PowhegEmissionVetoSettingsBlock,\n        processParameters = cms.vstring(\n            'POWHEG:nFinal = 1',   ## Number of final state particles\n                                   ## (BEFORE THE DECAYS) in the LHE\n                                   ## other than emitted extra parton\n          ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'pythia8PowhegEmissionVetoSettings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/ee53ee495d94eac22b4a451a0ad46d0805b86f4b/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "2557f311e3275b75b2e1ea1cb1c5cab4",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZToEE_NNPDF30_13TeV-powheg_M_50_120/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_19",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01287_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01287_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01287_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01287_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZToEE_NNPDF30_13TeV-powheg_M_50_120/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01287_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01287_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01287_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01287 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01287_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01287.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01287_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01287_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01287_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01287_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01287 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01287_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01287_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01287_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284abbc32",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284ac4abf",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZToEE_NNPDF30_13TeV-powheg_M_50_120/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-01965_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-01965_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-01965_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-01965.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZToEE_NNPDF30_13TeV-powheg_M_50_120/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-01965_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-01965_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-01965_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-01965 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-01965_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-01965_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-01965_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "33b9cac79bd8650401638666f780e8c5",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZToEE_NNPDF30_13TeV-powheg_M_50_120/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21574",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZToEE_NNPDF30_13TeV-powheg_M_50_120/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZToEE_NNPDF30_13TeV-powheg_M_50_120 in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZToEE_NNPDF30_13TeV-powheg_M_6000_Inf in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Standard Model Physics",
      "secondary": [
        "ElectroWeak"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 97600,
      "number_files": 3,
      "size": 2924038700
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00350\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00350_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00350_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_16_patch2/src ] ; then\n  echo release CMSSW_7_1_16_patch2 already exists\nelse\n  scram p CMSSW CMSSW_7_1_16_patch2\nfi\ncd CMSSW_7_1_16_patch2/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-00350 --retry 3 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py\n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.7556s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.7556s = 0.7556s\n# Which adds up to 0.7556s per event\n# Single core events that fit in validation duration: 20160s / 0.7556s = 26681\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 26681 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --python_filename EXO-RunIIWinter15wmLHE-00350_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00350.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00350_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00350_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00350_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00350 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00350_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00350_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00350_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: powheg.input",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21575/powheg.input"
            },
            {
              "cms_confdb_id": "961a7b714523afd33725092c3636f2eb",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZToEE_NNPDF30_13TeV-powheg_M_6000_Inf/RunIIWinter15wmLHE-MCRUN2_71_V1-v2/LHE",
          "release": "CMSSW_7_1_16_patch2",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01263\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01263_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01263_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_19/src ] ; then\n  echo release CMSSW_7_1_19 already exists\nelse\n  scram p CMSSW CMSSW_7_1_19\nfi\ncd CMSSW_7_1_19/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/ee53ee495d94eac22b4a451a0ad46d0805b86f4b/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 545.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 545.0000s = 545.0000s\n# Which adds up to 545.0000s per event\n# Single core events that fit in validation duration: 20160s / 545.0000s = 36\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 36 and 10000, but more than 0 -> 36\n# It is estimated that this validation will produce: 36 * 1.0000 = 36 events\nEVENTS=36\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-01263_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01263.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZToEE_NNPDF30_13TeV-powheg_M_6000_Inf/RunIIWinter15wmLHE-MCRUN2_71_V1-v2/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01263_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01263_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01263_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01263 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01263_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01263_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01263_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\nfrom Configuration.Generator.Pythia8PowhegEmissionVetoSettings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        pythia8PowhegEmissionVetoSettingsBlock,\n        processParameters = cms.vstring(\n            'POWHEG:nFinal = 1',   ## Number of final state particles\n                                   ## (BEFORE THE DECAYS) in the LHE\n                                   ## other than emitted extra parton\n          ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'pythia8PowhegEmissionVetoSettings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/ee53ee495d94eac22b4a451a0ad46d0805b86f4b/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "2557f311e3275b75b2e1ea1cb1c5cab4",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZToEE_NNPDF30_13TeV-powheg_M_6000_Inf/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_19",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01295_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01295_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01295_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01295_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZToEE_NNPDF30_13TeV-powheg_M_6000_Inf/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01295_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01295_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01295_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01295 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01295_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01295.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01295_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01295_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01295_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01295_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01295 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01295_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01295_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01295_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284abbc32",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284ac4abf",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZToEE_NNPDF30_13TeV-powheg_M_6000_Inf/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-01049_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-01049_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-01049_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-01049.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZToEE_NNPDF30_13TeV-powheg_M_6000_Inf/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-01049_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-01049_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-01049_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-01049 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-01049_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-01049_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-01049_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "744109404cdf471f6e79fd983bdf69e1",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZToEE_NNPDF30_13TeV-powheg_M_6000_Inf/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21575",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZToEE_NNPDF30_13TeV-powheg_M_6000_Inf/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZToEE_NNPDF30_13TeV-powheg_M_6000_Inf in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZToEE_NNPDF30_13TeV-powheg_M_800_1400 in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Standard Model Physics",
      "secondary": [
        "ElectroWeak"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 100000,
      "number_files": 3,
      "size": 2975461365
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00345\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00345_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00345_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_16_patch2/src ] ; then\n  echo release CMSSW_7_1_16_patch2 already exists\nelse\n  scram p CMSSW CMSSW_7_1_16_patch2\nfi\ncd CMSSW_7_1_16_patch2/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-00345 --retry 3 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py\n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.9429s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.9429s = 0.9429s\n# Which adds up to 0.9429s per event\n# Single core events that fit in validation duration: 20160s / 0.9429s = 21381\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 21381 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --python_filename EXO-RunIIWinter15wmLHE-00345_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00345.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00345_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00345_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00345_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00345 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00345_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00345_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00345_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: powheg.input",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21576/powheg.input"
            },
            {
              "cms_confdb_id": "961a7b714523afd33725092c3636dfb6",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZToEE_NNPDF30_13TeV-powheg_M_800_1400/RunIIWinter15wmLHE-MCRUN2_71_V1-v2/LHE",
          "release": "CMSSW_7_1_16_patch2",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01264\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01264_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01264_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_19/src ] ; then\n  echo release CMSSW_7_1_19 already exists\nelse\n  scram p CMSSW CMSSW_7_1_19\nfi\ncd CMSSW_7_1_19/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/ee53ee495d94eac22b4a451a0ad46d0805b86f4b/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 152.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 152.0000s = 152.0000s\n# Which adds up to 152.0000s per event\n# Single core events that fit in validation duration: 20160s / 152.0000s = 132\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 132 and 10000, but more than 0 -> 132\n# It is estimated that this validation will produce: 132 * 1.0000 = 132 events\nEVENTS=132\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-01264_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01264.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZToEE_NNPDF30_13TeV-powheg_M_800_1400/RunIIWinter15wmLHE-MCRUN2_71_V1-v2/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01264_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01264_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01264_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01264 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01264_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01264_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01264_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\nfrom Configuration.Generator.Pythia8PowhegEmissionVetoSettings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        pythia8PowhegEmissionVetoSettingsBlock,\n        processParameters = cms.vstring(\n            'POWHEG:nFinal = 1',   ## Number of final state particles\n                                   ## (BEFORE THE DECAYS) in the LHE\n                                   ## other than emitted extra parton\n          ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'pythia8PowhegEmissionVetoSettings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/ee53ee495d94eac22b4a451a0ad46d0805b86f4b/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "2557f311e3275b75b2e1ea1cb1c5cab4",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZToEE_NNPDF30_13TeV-powheg_M_800_1400/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_19",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01291_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01291_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01291_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01291_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZToEE_NNPDF30_13TeV-powheg_M_800_1400/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01291_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01291_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01291_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01291 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01291_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01291.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01291_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01291_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01291_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01291_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01291 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01291_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01291_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01291_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284abbc32",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284ac4abf",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZToEE_NNPDF30_13TeV-powheg_M_800_1400/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-01046_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-01046_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-01046_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-01046.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZToEE_NNPDF30_13TeV-powheg_M_800_1400/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-01046_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-01046_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-01046_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-01046 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-01046_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-01046_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-01046_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "744109404cdf471f6e79fd983bdf69e1",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZToEE_NNPDF30_13TeV-powheg_M_800_1400/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21576",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZToEE_NNPDF30_13TeV-powheg_M_800_1400/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZToEE_NNPDF30_13TeV-powheg_M_800_1400 in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZToEE_TuneCUETP8M1_13TeV-pythia8 in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Standard Model Physics",
      "secondary": [
        "ElectroWeak"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 9967696,
      "number_files": 302,
      "size": 193111248197
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EGM-RunIISummer15GS-00014\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EGM-RunIISummer15GS-00014_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EGM-RunIISummer15GS-00014_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20_patch3/src ] ; then\n  echo release CMSSW_7_1_20_patch3 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20_patch3\nfi\ncd CMSSW_7_1_20_patch3/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EGM-RunIISummer15GS-00014 --retry 3 --create-dirs -o Configuration/GenProduction/python/EGM-RunIISummer15GS-00014-fragment.py\n[ -s Configuration/GenProduction/python/EGM-RunIISummer15GS-00014-fragment.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/EGM-RunIISummer15GS-00014-fragment.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/EGM-RunIISummer15GS-00014-fragment.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 28.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 28.0000s = 28.0000s\n# Which adds up to 28.0000s per event\n# Single core events that fit in validation duration: 20160s / 28.0000s = 720\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 720 and 10000, but more than 0 -> 720\n# It is estimated that this validation will produce: 720 * 1.0000 = 720 events\nEVENTS=720\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/EGM-RunIISummer15GS-00014-fragment.py --python_filename EGM-RunIISummer15GS-00014_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EGM-RunIISummer15GS-00014.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollisionZeroTesla --step GEN,SIM --magField 0T --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EGM-RunIISummer15GS-00014_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EGM-RunIISummer15GS-00014_1_cfg.py || exit $? ;\n\n# Parse values from EGM-RunIISummer15GS-00014_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EGM-RunIISummer15GS-00014 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EGM-RunIISummer15GS-00014_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EGM-RunIISummer15GS-00014_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EGM-RunIISummer15GS-00014_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8GeneratorFilter\",\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         maxEventsToPrint = cms.untracked.int32(0),\n                         pythiaPylistVerbosity = cms.untracked.int32(0),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         comEnergy = cms.double(13000.0),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        processParameters = cms.vstring(\n            'WeakSingleBoson:ffbar2gmZ = on',\n            '23:onMode = off',\n            '23:onIfAny = 11',\n            'PhaseSpace:mHatMin = 75.',\n            ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'processParameters',\n                                    )\n        )\n                         )\n",
              "title": "Generator parameters",
              "url": "https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EGM-RunIISummer15GS-00014"
            },
            {
              "cms_confdb_id": "04e74a4673e263a2a2838135b4df3bc0",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "Pythia8"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZToEE_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-magnetOffBS0T_MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_20_patch3",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EGM-RunIIFall15DR76-00014_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EGM-RunIIFall15DR76-00014_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3_patch2/src ] ; then\n  echo release CMSSW_7_6_3_patch2 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3_patch2\nfi\ncd CMSSW_7_6_3_patch2/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EGM-RunIIFall15DR76-00014_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EGM-RunIIFall15DR76-00014_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-magnetOffBS0T_MCRUN2_71_V1-v1/GEN-SIM\" --conditions 76X_mcRun2_0T_v1 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZToEE_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-magnetOffBS0T_MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EGM-RunIIFall15DR76-00014_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EGM-RunIIFall15DR76-00014_1_cfg.py || exit $? ;\n\n# Parse values from EGM-RunIIFall15DR76-00014_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EGM-RunIIFall15DR76-00014 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EGM-RunIIFall15DR76-00014_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EGM-RunIIFall15DR76-00014.root --conditions 76X_mcRun2_0T_v1 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EGM-RunIIFall15DR76-00014_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EGM-RunIIFall15DR76-00014_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EGM-RunIIFall15DR76-00014_2_cfg.py || exit $? ;\n\n# Parse values from EGM-RunIIFall15DR76-00014_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EGM-RunIIFall15DR76-00014 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EGM-RunIIFall15DR76-00014_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EGM-RunIIFall15DR76-00014_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EGM-RunIIFall15DR76-00014_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "39d5a6d6a1ac8ea9b302ae6b3923a1de",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "39d5a6d6a1ac8ea9b302ae6b3944deea",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_0T_v1",
          "output_dataset": "/ZToEE_TuneCUETP8M1_13TeV-pythia8/RunIIFall15DR76-PU25nsData2015v1_0T_magnetOffBS0T_76X_mcRun2_0T_v1-v1/AODSIM",
          "release": "CMSSW_7_6_3_patch2",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EGM-RunIIFall15MiniAODv2-00013_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EGM-RunIIFall15MiniAODv2-00013_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3_patch2/src ] ; then\n  echo release CMSSW_7_6_3_patch2 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3_patch2\nfi\ncd CMSSW_7_6_3_patch2/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EGM-RunIIFall15MiniAODv2-00013_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EGM-RunIIFall15MiniAODv2-00013.root --conditions 76X_mcRun2_0T_v1 --step PAT --filein file:EGM-RunIIFall15DR76-00014.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EGM-RunIIFall15MiniAODv2-00013_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EGM-RunIIFall15MiniAODv2-00013_1_cfg.py || exit $? ;\n\n# Parse values from EGM-RunIIFall15MiniAODv2-00013_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EGM-RunIIFall15MiniAODv2-00013 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EGM-RunIIFall15MiniAODv2-00013_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EGM-RunIIFall15MiniAODv2-00013_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EGM-RunIIFall15MiniAODv2-00013_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "39d5a6d6a1ac8ea9b302ae6b394fd940",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_0T_v1",
          "output_dataset": "/ZToEE_TuneCUETP8M1_13TeV-pythia8/RunIIFall15MiniAODv2-PU25nsData2015v1_0T_magnetOffBS0T_76X_mcRun2_0T_v1-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3_patch2",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> from the dataset <code>/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-magnetOffBS0T_MCRUN2_71_V1-v1/GEN-SIM</code> are added to the simulated event in this step.</p>"
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21577",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZToEE_TuneCUETP8M1_13TeV-pythia8/RunIIFall15MiniAODv2-PU25nsData2015v1_0T_magnetOffBS0T_76X_mcRun2_0T_v1-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZToEE_TuneCUETP8M1_13TeV-pythia8 in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZToMuMu_M_120_200_NNPDF30_13TeV_powheg_herwigpp in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Standard Model Physics",
      "secondary": [
        "ElectroWeak"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 96997,
      "number_files": 26,
      "size": 2771899677
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00352\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00352_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00352_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_16_patch2/src ] ; then\n  echo release CMSSW_7_1_16_patch2 already exists\nelse\n  scram p CMSSW CMSSW_7_1_16_patch2\nfi\ncd CMSSW_7_1_16_patch2/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-00352 --retry 3 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py\n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.4003s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.4003s = 0.4003s\n# Which adds up to 0.4003s per event\n# Single core events that fit in validation duration: 20160s / 0.4003s = 50357\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 50357 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --python_filename EXO-RunIIWinter15wmLHE-00352_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00352.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00352_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00352_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00352_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00352 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00352_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00352_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00352_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: powheg.input",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21578/powheg.input"
            },
            {
              "cms_confdb_id": "961a7b714523afd33725092c36370ac3",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZToMuMu_NNPDF30_13TeV-powheg_M_120_200/RunIIWinter15wmLHE-MCRUN2_71_V1-v3/LHE",
          "release": "CMSSW_7_1_16_patch2",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-07177\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-07177_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-07177_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_22/src ] ; then\n  echo release CMSSW_7_1_22 already exists\nelse\n  scram p CMSSW CMSSW_7_1_22\nfi\ncd CMSSW_7_1_22/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIISummer15GS-07177 --retry 3 --create-dirs -o Configuration/GenProduction/python/EXO-RunIISummer15GS-07177-fragment.py\n[ -s Configuration/GenProduction/python/EXO-RunIISummer15GS-07177-fragment.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/EXO-RunIISummer15GS-07177-fragment.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/EXO-RunIISummer15GS-07177-fragment.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 42.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 42.0000s = 42.0000s\n# Which adds up to 42.0000s per event\n# Single core events that fit in validation duration: 20160s / 42.0000s = 480\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 480 and 10000, but more than 0 -> 480\n# It is estimated that this validation will produce: 480 * 1.0000 = 480 events\nEVENTS=480\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/EXO-RunIISummer15GS-07177-fragment.py --python_filename EXO-RunIISummer15GS-07177_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-07177.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZToMuMu_NNPDF30_13TeV-powheg_M_120_200/RunIIWinter15wmLHE-MCRUN2_71_V1-v3/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-07177_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-07177_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-07177_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-07177 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-07177_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-07177_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-07177_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\n\nfrom Configuration.Generator.HerwigppDefaults_cfi import *\nfrom Configuration.Generator.HerwigppUE_EE_5C_cfi import *\nfrom Configuration.Generator.HerwigppPDF_CTEQ6_LO_cfi import *\t\t\t\t\t\t\t\t\t# Import CTEQ6L PDF as shower pdf\nfrom Configuration.Generator.HerwigppPDF_NNPDF30_NLO_cfi import herwigppPDFSettingsBlock as herwigppHardPDFSettingsBlock \t# Import NNPDF30 NLO as PDF of the hard subprocess\nfrom Configuration.Generator.HerwigppEnergy_13TeV_cfi import *\nfrom Configuration.Generator.HerwigppLHEFile_cfi import *\nfrom Configuration.Generator.HerwigppMECorrections_cfi import *\n\ngenerator = cms.EDFilter(\"ThePEGHadronizerFilter\",\n\therwigDefaultsBlock,\n\therwigppUESettingsBlock,\n\therwigppPDFSettingsBlock,\n\therwigppHardPDFSettingsBlock,\t\t\t# Implementing renamed NNPDF30 config block\n\therwigppEnergySettingsBlock,\n\therwigppLHEFileSettingsBlock,\n\therwigppMECorrectionsSettingsBlock,\n\n\tconfigFiles = cms.vstring(),\n\tparameterSets = cms.vstring(\n\t\t'hwpp_cmsDefaults',\n\t\t'hwpp_ue_EE5C',\n\t\t'hwpp_cm_13TeV',\n\t\t'hwpp_pdf_CTEQ6L1',\t\t\t# Shower PDF matching with the tune\n\t\t'hwpp_pdf_NNPDF30NLO_Hard',\t\t# PDF of hard subprocess\n\t\t'hwpp_LHE_Powheg_DifferentPDFs',\n\t\t'hwpp_MECorr_Off'\t\t\t# Switch off ME corrections while showering LHE files as recommended by Herwig++ authors\n    ),\n        crossSection = cms.untracked.double(-1),\n        filterEfficiency = cms.untracked.double(1.0),\n)\nProductionFilterSequence = cms.Sequence(generator)",
              "title": "Hadronizer parameters",
              "url": "https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIISummer15GS-07177"
            },
            {
              "cms_confdb_id": "385d5411979408b4638999f07542df73",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZToMuMu_M_120_200_NNPDF30_13TeV_powheg_herwigpp/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_22",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-04003_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-04003_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 10.0000s, 10.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 10.0000s = 10.0000s, 1 * 10.0000s = 10.0000s\n# Which adds up to 20.0000s per event\n# Single core events that fit in validation duration: 20160s / 20.0000s = 1008\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 1008 and 10000, but more than 0 -> 1008\n# It is estimated that this validation will produce: 1008 * 1.0000 = 1008 events\nEVENTS=1008\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-04003_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-04003_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZToMuMu_M_120_200_NNPDF30_13TeV_powheg_herwigpp/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-04003_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-04003_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-04003_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-04003 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-04003_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-04003.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-04003_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-04003_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-04003_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-04003_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-04003 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-04003_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-04003_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-04003_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "95297f0e5af6ef9d7c80e61fa428d97b",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "95297f0e5af6ef9d7c80e61fa429ff4f",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZToMuMu_M_120_200_NNPDF30_13TeV_powheg_herwigpp/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-03839_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-03839_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.9904s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.9904s = 0.9904s\n# Which adds up to 0.9904s per event\n# Single core events that fit in validation duration: 20160s / 0.9904s = 20355\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20355 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-03839_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-03839.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZToMuMu_M_120_200_NNPDF30_13TeV_powheg_herwigpp/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-03839_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-03839_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-03839_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-03839 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-03839_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-03839_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-03839_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "8a116aab3e9d220dbe227045ccbab3e3",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZToMuMu_M_120_200_NNPDF30_13TeV_powheg_herwigpp/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21578",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZToMuMu_M_120_200_NNPDF30_13TeV_powheg_herwigpp/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZToMuMu_M_120_200_NNPDF30_13TeV_powheg_herwigpp in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZToMuMu_M_50_120_NNPDF30_13TeV_powheg_herwigpp in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Standard Model Physics",
      "secondary": [
        "ElectroWeak"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 2497941,
      "number_files": 68,
      "size": 66677184220
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00351\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00351_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00351_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_16_patch2/src ] ; then\n  echo release CMSSW_7_1_16_patch2 already exists\nelse\n  scram p CMSSW CMSSW_7_1_16_patch2\nfi\ncd CMSSW_7_1_16_patch2/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-00351 --retry 3 --create-dirs -o Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00351-fragment.py\n[ -s Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00351-fragment.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00351-fragment.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00351-fragment.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.3230s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.3230s = 0.3230s\n# Which adds up to 0.3230s per event\n# Single core events that fit in validation duration: 20160s / 0.3230s = 62413\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 62413 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00351-fragment.py --python_filename EXO-RunIIWinter15wmLHE-00351_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00351.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00351_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00351_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00351_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00351 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00351_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00351_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00351_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: powheg.input",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21579/powheg.input"
            },
            {
              "cms_confdb_id": "5ad703d7f171c646c40b597c47c84ae3",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZToMuMu_NNPDF30_13TeV-powheg_M_50_120/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_16_patch2",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-07038\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-07038_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-07038_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_21_patch2/src ] ; then\n  echo release CMSSW_7_1_21_patch2 already exists\nelse\n  scram p CMSSW CMSSW_7_1_21_patch2\nfi\ncd CMSSW_7_1_21_patch2/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIISummer15GS-07038 --retry 3 --create-dirs -o Configuration/GenProduction/python/EXO-RunIISummer15GS-07038-fragment.py\n[ -s Configuration/GenProduction/python/EXO-RunIISummer15GS-07038-fragment.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/EXO-RunIISummer15GS-07038-fragment.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/EXO-RunIISummer15GS-07038-fragment.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 21.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 21.0000s = 21.0000s\n# Which adds up to 21.0000s per event\n# Single core events that fit in validation duration: 20160s / 21.0000s = 960\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 960 and 10000, but more than 0 -> 960\n# It is estimated that this validation will produce: 960 * 1.0000 = 960 events\nEVENTS=960\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/EXO-RunIISummer15GS-07038-fragment.py --python_filename EXO-RunIISummer15GS-07038_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-07038.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZToMuMu_NNPDF30_13TeV-powheg_M_50_120/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-07038_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-07038_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-07038_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-07038 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-07038_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-07038_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-07038_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\n\nfrom Configuration.Generator.HerwigppDefaults_cfi import *\nfrom Configuration.Generator.HerwigppUE_EE_5C_cfi import *\nfrom Configuration.Generator.HerwigppPDF_CTEQ6_LO_cfi import *\t\t\t\t\t\t\t\t\t# Import CTEQ6L PDF as shower pdf\nfrom Configuration.Generator.HerwigppPDF_NNPDF30_NLO_cfi import herwigppPDFSettingsBlock as herwigppHardPDFSettingsBlock \t# Import NNPDF30 NLO as PDF of the hard subprocess\nfrom Configuration.Generator.HerwigppEnergy_13TeV_cfi import *\nfrom Configuration.Generator.HerwigppLHEFile_cfi import *\nfrom Configuration.Generator.HerwigppMECorrections_cfi import *\n\ngenerator = cms.EDFilter(\"ThePEGHadronizerFilter\",\n\therwigDefaultsBlock,\n\therwigppUESettingsBlock,\n\therwigppPDFSettingsBlock,\n\therwigppHardPDFSettingsBlock,\t\t\t# Implementing renamed NNPDF30 config block\n\therwigppEnergySettingsBlock,\n\therwigppLHEFileSettingsBlock,\n\therwigppMECorrectionsSettingsBlock,\n\n\tconfigFiles = cms.vstring(),\n\tparameterSets = cms.vstring(\n\t\t'hwpp_cmsDefaults',\n\t\t'hwpp_ue_EE5C',\n\t\t'hwpp_cm_13TeV',\n\t\t'hwpp_pdf_CTEQ6L1',\t\t\t# Shower PDF matching with the tune\n\t\t'hwpp_pdf_NNPDF30NLO_Hard',\t\t# PDF of hard subprocess\n\t\t'hwpp_LHE_Powheg_DifferentPDFs',\n\t\t'hwpp_MECorr_Off'\t\t\t# Switch off ME corrections while showering LHE files as recommended by Herwig++ authors\n    ),\n        crossSection = cms.untracked.double(-1),\n        filterEfficiency = cms.untracked.double(1.0),\n)\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIISummer15GS-07038"
            },
            {
              "cms_confdb_id": "5ce6a7f7c79c7f5c518205ca837eb16b",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZToMuMu_M_50_120_NNPDF30_13TeV_powheg_herwigpp/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_21_patch2",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-04005_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-04005_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-04005_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-04005_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZToMuMu_M_50_120_NNPDF30_13TeV_powheg_herwigpp/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-04005_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-04005_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-04005_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-04005 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-04005_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-04005.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-04005_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-04005_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-04005_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-04005_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-04005 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-04005_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-04005_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-04005_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "c12d2633a53b94f13142847a8a2daa8f",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "c12d2633a53b94f13142847a8a2dd108",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZToMuMu_M_50_120_NNPDF30_13TeV_powheg_herwigpp/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-03862_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-03862_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-03862_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-03862.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZToMuMu_M_50_120_NNPDF30_13TeV_powheg_herwigpp/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-03862_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-03862_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-03862_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-03862 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-03862_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-03862_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-03862_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "151ffa83a4944cc721f5cdc0eabb7ada",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZToMuMu_M_50_120_NNPDF30_13TeV_powheg_herwigpp/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21579",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZToMuMu_M_50_120_NNPDF30_13TeV_powheg_herwigpp/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZToMuMu_M_50_120_NNPDF30_13TeV_powheg_herwigpp in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZToMuMu_NNPDF30_13TeV-powheg_M_120_200 in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Standard Model Physics",
      "secondary": [
        "ElectroWeak"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 100000,
      "number_files": 4,
      "size": 2134442576
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00352\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00352_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00352_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_16_patch2/src ] ; then\n  echo release CMSSW_7_1_16_patch2 already exists\nelse\n  scram p CMSSW CMSSW_7_1_16_patch2\nfi\ncd CMSSW_7_1_16_patch2/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-00352 --retry 3 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py\n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.4003s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.4003s = 0.4003s\n# Which adds up to 0.4003s per event\n# Single core events that fit in validation duration: 20160s / 0.4003s = 50357\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 50357 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --python_filename EXO-RunIIWinter15wmLHE-00352_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00352.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00352_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00352_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00352_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00352 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00352_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00352_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00352_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: powheg.input",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21580/powheg.input"
            },
            {
              "cms_confdb_id": "961a7b714523afd33725092c36370ac3",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZToMuMu_NNPDF30_13TeV-powheg_M_120_200/RunIIWinter15wmLHE-MCRUN2_71_V1-v3/LHE",
          "release": "CMSSW_7_1_16_patch2",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01267\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01267_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01267_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_19/src ] ; then\n  echo release CMSSW_7_1_19 already exists\nelse\n  scram p CMSSW CMSSW_7_1_19\nfi\ncd CMSSW_7_1_19/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/ee53ee495d94eac22b4a451a0ad46d0805b86f4b/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 38.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 38.0000s = 38.0000s\n# Which adds up to 38.0000s per event\n# Single core events that fit in validation duration: 20160s / 38.0000s = 530\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 530 and 10000, but more than 0 -> 530\n# It is estimated that this validation will produce: 530 * 1.0000 = 530 events\nEVENTS=530\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-01267_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01267.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZToMuMu_NNPDF30_13TeV-powheg_M_120_200/RunIIWinter15wmLHE-MCRUN2_71_V1-v3/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01267_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01267_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01267_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01267 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01267_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01267_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01267_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\nfrom Configuration.Generator.Pythia8PowhegEmissionVetoSettings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        pythia8PowhegEmissionVetoSettingsBlock,\n        processParameters = cms.vstring(\n            'POWHEG:nFinal = 1',   ## Number of final state particles\n                                   ## (BEFORE THE DECAYS) in the LHE\n                                   ## other than emitted extra parton\n          ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'pythia8PowhegEmissionVetoSettings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/ee53ee495d94eac22b4a451a0ad46d0805b86f4b/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "2557f311e3275b75b2e1ea1cb1c5cab4",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZToMuMu_NNPDF30_13TeV-powheg_M_120_200/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_19",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01297_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01297_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01297_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01297_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZToMuMu_NNPDF30_13TeV-powheg_M_120_200/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01297_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01297_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01297_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01297 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01297_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01297.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01297_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01297_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01297_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01297_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01297 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01297_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01297_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01297_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284abbc32",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284ac4abf",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZToMuMu_NNPDF30_13TeV-powheg_M_120_200/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-01051_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-01051_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-01051_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-01051.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZToMuMu_NNPDF30_13TeV-powheg_M_120_200/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-01051_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-01051_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-01051_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-01051 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-01051_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-01051_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-01051_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "744109404cdf471f6e79fd983bdf69e1",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZToMuMu_NNPDF30_13TeV-powheg_M_120_200/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21580",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZToMuMu_NNPDF30_13TeV-powheg_M_120_200/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZToMuMu_NNPDF30_13TeV-powheg_M_120_200 in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZToMuMu_NNPDF30_13TeV-powheg_M_1400_2300 in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Standard Model Physics",
      "secondary": [
        "ElectroWeak"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 99200,
      "number_files": 4,
      "size": 2674849177
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00356\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00356_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00356_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_16_patch2/src ] ; then\n  echo release CMSSW_7_1_16_patch2 already exists\nelse\n  scram p CMSSW CMSSW_7_1_16_patch2\nfi\ncd CMSSW_7_1_16_patch2/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-00356 --retry 3 --create-dirs -o Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00356-fragment.py\n[ -s Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00356-fragment.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00356-fragment.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00356-fragment.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 2.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 2.0000s = 2.0000s\n# Which adds up to 2.0000s per event\n# Single core events that fit in validation duration: 20160s / 2.0000s = 10080\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 10080 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00356-fragment.py --python_filename EXO-RunIIWinter15wmLHE-00356_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00356.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00356_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00356_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00356_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00356 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00356_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00356_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00356_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: powheg.input",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21581/powheg.input"
            },
            {
              "cms_confdb_id": "5ad703d7f171c646c40b597c47c89417",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZToMuMu_NNPDF30_13TeV-powheg_M_1400_2300/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_16_patch2",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01271\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01271_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01271_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_19/src ] ; then\n  echo release CMSSW_7_1_19 already exists\nelse\n  scram p CMSSW CMSSW_7_1_19\nfi\ncd CMSSW_7_1_19/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/ee53ee495d94eac22b4a451a0ad46d0805b86f4b/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 39.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 39.0000s = 39.0000s\n# Which adds up to 39.0000s per event\n# Single core events that fit in validation duration: 20160s / 39.0000s = 516\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 516 and 10000, but more than 0 -> 516\n# It is estimated that this validation will produce: 516 * 1.0000 = 516 events\nEVENTS=516\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-01271_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01271.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZToMuMu_NNPDF30_13TeV-powheg_M_1400_2300/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01271_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01271_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01271_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01271 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01271_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01271_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01271_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\nfrom Configuration.Generator.Pythia8PowhegEmissionVetoSettings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        pythia8PowhegEmissionVetoSettingsBlock,\n        processParameters = cms.vstring(\n            'POWHEG:nFinal = 1',   ## Number of final state particles\n                                   ## (BEFORE THE DECAYS) in the LHE\n                                   ## other than emitted extra parton\n          ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'pythia8PowhegEmissionVetoSettings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/ee53ee495d94eac22b4a451a0ad46d0805b86f4b/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "2557f311e3275b75b2e1ea1cb1c5cab4",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZToMuMu_NNPDF30_13TeV-powheg_M_1400_2300/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_19",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01300_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01300_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01300_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01300_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZToMuMu_NNPDF30_13TeV-powheg_M_1400_2300/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01300_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01300_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01300_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01300 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01300_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01300.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01300_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01300_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01300_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01300_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01300 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01300_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01300_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01300_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284abbc32",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284ac4abf",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZToMuMu_NNPDF30_13TeV-powheg_M_1400_2300/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-01054_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-01054_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-01054_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-01054.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZToMuMu_NNPDF30_13TeV-powheg_M_1400_2300/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-01054_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-01054_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-01054_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-01054 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-01054_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-01054_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-01054_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "744109404cdf471f6e79fd983bdf69e1",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZToMuMu_NNPDF30_13TeV-powheg_M_1400_2300/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21581",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZToMuMu_NNPDF30_13TeV-powheg_M_1400_2300/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZToMuMu_NNPDF30_13TeV-powheg_M_1400_2300 in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZToMuMu_NNPDF30_13TeV-powheg_M_200_400 in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Standard Model Physics",
      "secondary": [
        "ElectroWeak"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 100000,
      "number_files": 3,
      "size": 2261071983
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00353\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00353_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00353_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_16_patch2/src ] ; then\n  echo release CMSSW_7_1_16_patch2 already exists\nelse\n  scram p CMSSW CMSSW_7_1_16_patch2\nfi\ncd CMSSW_7_1_16_patch2/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-00353 --retry 3 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py\n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.3988s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.3988s = 0.3988s\n# Which adds up to 0.3988s per event\n# Single core events that fit in validation duration: 20160s / 0.3988s = 50554\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 50554 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --python_filename EXO-RunIIWinter15wmLHE-00353_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00353.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00353_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00353_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00353_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00353 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00353_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00353_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00353_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: powheg.input",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21582/powheg.input"
            },
            {
              "cms_confdb_id": "961a7b714523afd33725092c36370eae",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZToMuMu_NNPDF30_13TeV-powheg_M_200_400/RunIIWinter15wmLHE-MCRUN2_71_V1-v2/LHE",
          "release": "CMSSW_7_1_16_patch2",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01306\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01306_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01306_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/ee53ee495d94eac22b4a451a0ad46d0805b86f4b/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 60.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 60.0000s = 60.0000s\n# Which adds up to 60.0000s per event\n# Single core events that fit in validation duration: 20160s / 60.0000s = 336\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 336 and 10000, but more than 0 -> 336\n# It is estimated that this validation will produce: 336 * 1.0000 = 336 events\nEVENTS=336\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-01306_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01306.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZToMuMu_NNPDF30_13TeV-powheg_M_200_400/RunIIWinter15wmLHE-MCRUN2_71_V1-v2/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01306_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01306_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01306_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01306 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01306_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01306_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01306_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\nfrom Configuration.Generator.Pythia8PowhegEmissionVetoSettings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        pythia8PowhegEmissionVetoSettingsBlock,\n        processParameters = cms.vstring(\n            'POWHEG:nFinal = 1',   ## Number of final state particles\n                                   ## (BEFORE THE DECAYS) in the LHE\n                                   ## other than emitted extra parton\n          ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'pythia8PowhegEmissionVetoSettings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/ee53ee495d94eac22b4a451a0ad46d0805b86f4b/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "cb29c0fa84ef2f32fa149a4e90057975",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZToMuMu_NNPDF30_13TeV-powheg_M_200_400/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_20",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-02299_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-02299_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-02299_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-02299_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZToMuMu_NNPDF30_13TeV-powheg_M_200_400/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-02299_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-02299_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-02299_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-02299 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-02299_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-02299.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-02299_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-02299_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-02299_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-02299_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-02299 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-02299_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-02299_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-02299_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "c4018c94e85aa96db10807711068192a",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "c4018c94e85aa96db108077110682653",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZToMuMu_NNPDF30_13TeV-powheg_M_200_400/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-02154_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-02154_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-02154_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-02154.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZToMuMu_NNPDF30_13TeV-powheg_M_200_400/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-02154_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-02154_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-02154_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-02154 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-02154_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-02154_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-02154_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "33b9cac79bd8650401638666f780e8c5",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZToMuMu_NNPDF30_13TeV-powheg_M_200_400/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21582",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZToMuMu_NNPDF30_13TeV-powheg_M_200_400/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZToMuMu_NNPDF30_13TeV-powheg_M_200_400 in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZToMuMu_NNPDF30_13TeV-powheg_M_2300_3500 in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Standard Model Physics",
      "secondary": [
        "ElectroWeak"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 100000,
      "number_files": 4,
      "size": 2740991198
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00357\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00357_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00357_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_16_patch2/src ] ; then\n  echo release CMSSW_7_1_16_patch2 already exists\nelse\n  scram p CMSSW CMSSW_7_1_16_patch2\nfi\ncd CMSSW_7_1_16_patch2/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-00357 --retry 3 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py\n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.3666s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.3666s = 0.3666s\n# Which adds up to 0.3666s per event\n# Single core events that fit in validation duration: 20160s / 0.3666s = 54988\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 54988 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --python_filename EXO-RunIIWinter15wmLHE-00357_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00357.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00357_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00357_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00357_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00357 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00357_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00357_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00357_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: powheg.input",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21583/powheg.input"
            },
            {
              "cms_confdb_id": "961a7b714523afd33725092c36372289",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZToMuMu_NNPDF30_13TeV-powheg_M_2300_3500/RunIIWinter15wmLHE-MCRUN2_71_V1-v2/LHE",
          "release": "CMSSW_7_1_16_patch2",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01272\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01272_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01272_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_19/src ] ; then\n  echo release CMSSW_7_1_19 already exists\nelse\n  scram p CMSSW CMSSW_7_1_19\nfi\ncd CMSSW_7_1_19/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/ee53ee495d94eac22b4a451a0ad46d0805b86f4b/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 73.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 73.0000s = 73.0000s\n# Which adds up to 73.0000s per event\n# Single core events that fit in validation duration: 20160s / 73.0000s = 276\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 276 and 10000, but more than 0 -> 276\n# It is estimated that this validation will produce: 276 * 1.0000 = 276 events\nEVENTS=276\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-01272_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01272.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZToMuMu_NNPDF30_13TeV-powheg_M_2300_3500/RunIIWinter15wmLHE-MCRUN2_71_V1-v2/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01272_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01272_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01272_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01272 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01272_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01272_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01272_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\nfrom Configuration.Generator.Pythia8PowhegEmissionVetoSettings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        pythia8PowhegEmissionVetoSettingsBlock,\n        processParameters = cms.vstring(\n            'POWHEG:nFinal = 1',   ## Number of final state particles\n                                   ## (BEFORE THE DECAYS) in the LHE\n                                   ## other than emitted extra parton\n          ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'pythia8PowhegEmissionVetoSettings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/ee53ee495d94eac22b4a451a0ad46d0805b86f4b/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "2557f311e3275b75b2e1ea1cb1c5cab4",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZToMuMu_NNPDF30_13TeV-powheg_M_2300_3500/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_19",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01301_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01301_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01301_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01301_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZToMuMu_NNPDF30_13TeV-powheg_M_2300_3500/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01301_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01301_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01301_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01301 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01301_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01301.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01301_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01301_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01301_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01301_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01301 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01301_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01301_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01301_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284abbc32",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284ac4abf",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZToMuMu_NNPDF30_13TeV-powheg_M_2300_3500/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-01055_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-01055_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-01055_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-01055.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZToMuMu_NNPDF30_13TeV-powheg_M_2300_3500/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-01055_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-01055_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-01055_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-01055 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-01055_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-01055_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-01055_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "744109404cdf471f6e79fd983bdf69e1",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZToMuMu_NNPDF30_13TeV-powheg_M_2300_3500/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21583",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZToMuMu_NNPDF30_13TeV-powheg_M_2300_3500/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZToMuMu_NNPDF30_13TeV-powheg_M_2300_3500 in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZToMuMu_NNPDF30_13TeV-powheg_M_3500_4500 in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Standard Model Physics",
      "secondary": [
        "ElectroWeak"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 100000,
      "number_files": 8,
      "size": 2788493208
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00358\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00358_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00358_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_16_patch2/src ] ; then\n  echo release CMSSW_7_1_16_patch2 already exists\nelse\n  scram p CMSSW CMSSW_7_1_16_patch2\nfi\ncd CMSSW_7_1_16_patch2/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-00358 --retry 3 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py\n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.3805s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.3805s = 0.3805s\n# Which adds up to 0.3805s per event\n# Single core events that fit in validation duration: 20160s / 0.3805s = 52980\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 52980 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --python_filename EXO-RunIIWinter15wmLHE-00358_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00358.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00358_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00358_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00358_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00358 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00358_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00358_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00358_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: powheg.input",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21584/powheg.input"
            },
            {
              "cms_confdb_id": "961a7b714523afd33725092c3645eb9c",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZToMuMu_NNPDF30_13TeV-powheg_M_3500_4500/RunIIWinter15wmLHE-MCRUN2_71_V1-v2/LHE",
          "release": "CMSSW_7_1_16_patch2",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01273\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01273_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01273_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_19/src ] ; then\n  echo release CMSSW_7_1_19 already exists\nelse\n  scram p CMSSW CMSSW_7_1_19\nfi\ncd CMSSW_7_1_19/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/ee53ee495d94eac22b4a451a0ad46d0805b86f4b/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 29.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 29.0000s = 29.0000s\n# Which adds up to 29.0000s per event\n# Single core events that fit in validation duration: 20160s / 29.0000s = 695\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 695 and 10000, but more than 0 -> 695\n# It is estimated that this validation will produce: 695 * 1.0000 = 695 events\nEVENTS=695\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-01273_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01273.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZToMuMu_NNPDF30_13TeV-powheg_M_3500_4500/RunIIWinter15wmLHE-MCRUN2_71_V1-v2/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01273_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01273_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01273_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01273 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01273_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01273_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01273_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\nfrom Configuration.Generator.Pythia8PowhegEmissionVetoSettings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        pythia8PowhegEmissionVetoSettingsBlock,\n        processParameters = cms.vstring(\n            'POWHEG:nFinal = 1',   ## Number of final state particles\n                                   ## (BEFORE THE DECAYS) in the LHE\n                                   ## other than emitted extra parton\n          ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'pythia8PowhegEmissionVetoSettings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/ee53ee495d94eac22b4a451a0ad46d0805b86f4b/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "2557f311e3275b75b2e1ea1cb1c5cab4",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZToMuMu_NNPDF30_13TeV-powheg_M_3500_4500/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_19",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01302_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01302_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01302_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01302_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZToMuMu_NNPDF30_13TeV-powheg_M_3500_4500/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01302_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01302_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01302_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01302 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01302_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01302.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01302_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01302_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01302_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01302_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01302 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01302_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01302_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01302_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284abbc32",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284ac4abf",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZToMuMu_NNPDF30_13TeV-powheg_M_3500_4500/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-01056_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-01056_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-01056_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-01056.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZToMuMu_NNPDF30_13TeV-powheg_M_3500_4500/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-01056_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-01056_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-01056_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-01056 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-01056_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-01056_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-01056_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "744109404cdf471f6e79fd983bdf69e1",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZToMuMu_NNPDF30_13TeV-powheg_M_3500_4500/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21584",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZToMuMu_NNPDF30_13TeV-powheg_M_3500_4500/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZToMuMu_NNPDF30_13TeV-powheg_M_3500_4500 in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZToMuMu_NNPDF30_13TeV-powheg_M_400_800 in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Standard Model Physics",
      "secondary": [
        "ElectroWeak"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 99600,
      "number_files": 3,
      "size": 2443479720
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00354\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00354_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00354_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_16_patch2/src ] ; then\n  echo release CMSSW_7_1_16_patch2 already exists\nelse\n  scram p CMSSW CMSSW_7_1_16_patch2\nfi\ncd CMSSW_7_1_16_patch2/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-00354 --retry 3 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py\n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.4781s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.4781s = 0.4781s\n# Which adds up to 0.4781s per event\n# Single core events that fit in validation duration: 20160s / 0.4781s = 42165\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 42165 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --python_filename EXO-RunIIWinter15wmLHE-00354_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00354.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00354_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00354_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00354_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00354 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00354_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00354_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00354_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: powheg.input",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21585/powheg.input"
            },
            {
              "cms_confdb_id": "961a7b714523afd33725092c363722ca",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZToMuMu_NNPDF30_13TeV-powheg_M_400_800/RunIIWinter15wmLHE-MCRUN2_71_V1-v2/LHE",
          "release": "CMSSW_7_1_16_patch2",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01269\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01269_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01269_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_19/src ] ; then\n  echo release CMSSW_7_1_19 already exists\nelse\n  scram p CMSSW CMSSW_7_1_19\nfi\ncd CMSSW_7_1_19/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/ee53ee495d94eac22b4a451a0ad46d0805b86f4b/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 54.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 54.0000s = 54.0000s\n# Which adds up to 54.0000s per event\n# Single core events that fit in validation duration: 20160s / 54.0000s = 373\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 373 and 10000, but more than 0 -> 373\n# It is estimated that this validation will produce: 373 * 1.0000 = 373 events\nEVENTS=373\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-01269_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01269.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZToMuMu_NNPDF30_13TeV-powheg_M_400_800/RunIIWinter15wmLHE-MCRUN2_71_V1-v2/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01269_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01269_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01269_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01269 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01269_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01269_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01269_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\nfrom Configuration.Generator.Pythia8PowhegEmissionVetoSettings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        pythia8PowhegEmissionVetoSettingsBlock,\n        processParameters = cms.vstring(\n            'POWHEG:nFinal = 1',   ## Number of final state particles\n                                   ## (BEFORE THE DECAYS) in the LHE\n                                   ## other than emitted extra parton\n          ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'pythia8PowhegEmissionVetoSettings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/ee53ee495d94eac22b4a451a0ad46d0805b86f4b/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "2557f311e3275b75b2e1ea1cb1c5cab4",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZToMuMu_NNPDF30_13TeV-powheg_M_400_800/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_19",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01298_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01298_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01298_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01298_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZToMuMu_NNPDF30_13TeV-powheg_M_400_800/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01298_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01298_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01298_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01298 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01298_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01298.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01298_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01298_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01298_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01298_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01298 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01298_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01298_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01298_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284abbc32",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284ac4abf",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZToMuMu_NNPDF30_13TeV-powheg_M_400_800/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-01052_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-01052_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-01052_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-01052.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZToMuMu_NNPDF30_13TeV-powheg_M_400_800/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-01052_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-01052_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-01052_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-01052 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-01052_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-01052_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-01052_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "744109404cdf471f6e79fd983bdf69e1",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZToMuMu_NNPDF30_13TeV-powheg_M_400_800/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21585",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZToMuMu_NNPDF30_13TeV-powheg_M_400_800/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZToMuMu_NNPDF30_13TeV-powheg_M_400_800 in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZToMuMu_NNPDF30_13TeV-powheg_M_4500_6000 in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Standard Model Physics",
      "secondary": [
        "ElectroWeak"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 100000,
      "number_files": 3,
      "size": 2744332117
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00359\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00359_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00359_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_16_patch2/src ] ; then\n  echo release CMSSW_7_1_16_patch2 already exists\nelse\n  scram p CMSSW CMSSW_7_1_16_patch2\nfi\ncd CMSSW_7_1_16_patch2/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-00359 --retry 3 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py\n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.6234s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.6234s = 0.6234s\n# Which adds up to 0.6234s per event\n# Single core events that fit in validation duration: 20160s / 0.6234s = 32339\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 32339 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --python_filename EXO-RunIIWinter15wmLHE-00359_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00359.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00359_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00359_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00359_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00359 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00359_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00359_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00359_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: powheg.input",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21586/powheg.input"
            },
            {
              "cms_confdb_id": "961a7b714523afd33725092c364de2e5",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZToMuMu_NNPDF30_13TeV-powheg_M_4500_6000/RunIIWinter15wmLHE-MCRUN2_71_V1-v2/LHE",
          "release": "CMSSW_7_1_16_patch2",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01274\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01274_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01274_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_19/src ] ; then\n  echo release CMSSW_7_1_19 already exists\nelse\n  scram p CMSSW CMSSW_7_1_19\nfi\ncd CMSSW_7_1_19/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/ee53ee495d94eac22b4a451a0ad46d0805b86f4b/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 74.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 74.0000s = 74.0000s\n# Which adds up to 74.0000s per event\n# Single core events that fit in validation duration: 20160s / 74.0000s = 272\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 272 and 10000, but more than 0 -> 272\n# It is estimated that this validation will produce: 272 * 1.0000 = 272 events\nEVENTS=272\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-01274_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01274.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZToMuMu_NNPDF30_13TeV-powheg_M_4500_6000/RunIIWinter15wmLHE-MCRUN2_71_V1-v2/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01274_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01274_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01274_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01274 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01274_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01274_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01274_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\nfrom Configuration.Generator.Pythia8PowhegEmissionVetoSettings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        pythia8PowhegEmissionVetoSettingsBlock,\n        processParameters = cms.vstring(\n            'POWHEG:nFinal = 1',   ## Number of final state particles\n                                   ## (BEFORE THE DECAYS) in the LHE\n                                   ## other than emitted extra parton\n          ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'pythia8PowhegEmissionVetoSettings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/ee53ee495d94eac22b4a451a0ad46d0805b86f4b/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "2557f311e3275b75b2e1ea1cb1c5cab4",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZToMuMu_NNPDF30_13TeV-powheg_M_4500_6000/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_19",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01303_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01303_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01303_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01303_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZToMuMu_NNPDF30_13TeV-powheg_M_4500_6000/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01303_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01303_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01303_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01303 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01303_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01303.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01303_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01303_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01303_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01303_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01303 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01303_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01303_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01303_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284abbc32",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284ac4abf",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZToMuMu_NNPDF30_13TeV-powheg_M_4500_6000/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v3/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-01057_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-01057_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-01057_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-01057.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZToMuMu_NNPDF30_13TeV-powheg_M_4500_6000/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v3/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-01057_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-01057_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-01057_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-01057 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-01057_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-01057_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-01057_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "744109404cdf471f6e79fd983bdf69e1",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZToMuMu_NNPDF30_13TeV-powheg_M_4500_6000/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21586",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZToMuMu_NNPDF30_13TeV-powheg_M_4500_6000/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZToMuMu_NNPDF30_13TeV-powheg_M_4500_6000 in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZToMuMu_NNPDF30_13TeV-powheg_M_50_120 in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Standard Model Physics",
      "secondary": [
        "ElectroWeak"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 2972000,
      "number_files": 74,
      "size": 61142379602
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00351\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00351_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00351_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_16_patch2/src ] ; then\n  echo release CMSSW_7_1_16_patch2 already exists\nelse\n  scram p CMSSW CMSSW_7_1_16_patch2\nfi\ncd CMSSW_7_1_16_patch2/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-00351 --retry 3 --create-dirs -o Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00351-fragment.py\n[ -s Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00351-fragment.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00351-fragment.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00351-fragment.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.3230s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.3230s = 0.3230s\n# Which adds up to 0.3230s per event\n# Single core events that fit in validation duration: 20160s / 0.3230s = 62413\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 62413 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/EXO-RunIIWinter15wmLHE-00351-fragment.py --python_filename EXO-RunIIWinter15wmLHE-00351_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00351.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00351_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00351_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00351_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00351 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00351_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00351_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00351_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: powheg.input",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21587/powheg.input"
            },
            {
              "cms_confdb_id": "5ad703d7f171c646c40b597c47c84ae3",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZToMuMu_NNPDF30_13TeV-powheg_M_50_120/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_16_patch2",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01265\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01265_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01265_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_19/src ] ; then\n  echo release CMSSW_7_1_19 already exists\nelse\n  scram p CMSSW CMSSW_7_1_19\nfi\ncd CMSSW_7_1_19/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/ee53ee495d94eac22b4a451a0ad46d0805b86f4b/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s\n# Which adds up to 17.0000s per event\n# Single core events that fit in validation duration: 20160s / 17.0000s = 1185\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 1185 and 10000, but more than 0 -> 1185\n# It is estimated that this validation will produce: 1185 * 1.0000 = 1185 events\nEVENTS=1185\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-01265_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01265.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZToMuMu_NNPDF30_13TeV-powheg_M_50_120/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01265_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01265_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01265_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01265 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01265_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01265_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01265_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\nfrom Configuration.Generator.Pythia8PowhegEmissionVetoSettings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        pythia8PowhegEmissionVetoSettingsBlock,\n        processParameters = cms.vstring(\n            'POWHEG:nFinal = 1',   ## Number of final state particles\n                                   ## (BEFORE THE DECAYS) in the LHE\n                                   ## other than emitted extra parton\n          ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'pythia8PowhegEmissionVetoSettings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/ee53ee495d94eac22b4a451a0ad46d0805b86f4b/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "2557f311e3275b75b2e1ea1cb1c5cab4",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZToMuMu_NNPDF30_13TeV-powheg_M_50_120/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_19",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01296_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01296_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01296_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01296_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZToMuMu_NNPDF30_13TeV-powheg_M_50_120/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01296_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01296_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01296_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01296 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01296_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01296.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01296_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01296_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01296_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01296_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01296 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01296_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01296_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01296_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284abbc32",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284ac4abf",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZToMuMu_NNPDF30_13TeV-powheg_M_50_120/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-01050_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-01050_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-01050_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-01050.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZToMuMu_NNPDF30_13TeV-powheg_M_50_120/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-01050_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-01050_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-01050_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-01050 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-01050_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-01050_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-01050_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "744109404cdf471f6e79fd983bdf69e1",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZToMuMu_NNPDF30_13TeV-powheg_M_50_120/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21587",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZToMuMu_NNPDF30_13TeV-powheg_M_50_120/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZToMuMu_NNPDF30_13TeV-powheg_M_50_120 in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZToMuMu_NNPDF30_13TeV-powheg_M_6000_Inf in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Standard Model Physics",
      "secondary": [
        "ElectroWeak"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 99200,
      "number_files": 3,
      "size": 2682939640
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00360\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00360_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00360_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_16_patch2/src ] ; then\n  echo release CMSSW_7_1_16_patch2 already exists\nelse\n  scram p CMSSW CMSSW_7_1_16_patch2\nfi\ncd CMSSW_7_1_16_patch2/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-00360 --retry 3 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py\n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.4399s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.4399s = 0.4399s\n# Which adds up to 0.4399s per event\n# Single core events that fit in validation duration: 20160s / 0.4399s = 45827\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 45827 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --python_filename EXO-RunIIWinter15wmLHE-00360_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00360.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00360_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00360_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00360_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00360 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00360_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00360_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00360_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: powheg.input",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21588/powheg.input"
            },
            {
              "cms_confdb_id": "961a7b714523afd33725092c364de888",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZToMuMu_NNPDF30_13TeV-powheg_M_6000_Inf/RunIIWinter15wmLHE-MCRUN2_71_V1-v2/LHE",
          "release": "CMSSW_7_1_16_patch2",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01275\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01275_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01275_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_19/src ] ; then\n  echo release CMSSW_7_1_19 already exists\nelse\n  scram p CMSSW CMSSW_7_1_19\nfi\ncd CMSSW_7_1_19/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/ee53ee495d94eac22b4a451a0ad46d0805b86f4b/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 81.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 81.0000s = 81.0000s\n# Which adds up to 81.0000s per event\n# Single core events that fit in validation duration: 20160s / 81.0000s = 248\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 248 and 10000, but more than 0 -> 248\n# It is estimated that this validation will produce: 248 * 1.0000 = 248 events\nEVENTS=248\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-01275_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01275.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZToMuMu_NNPDF30_13TeV-powheg_M_6000_Inf/RunIIWinter15wmLHE-MCRUN2_71_V1-v2/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01275_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01275_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01275_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01275 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01275_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01275_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01275_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\nfrom Configuration.Generator.Pythia8PowhegEmissionVetoSettings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        pythia8PowhegEmissionVetoSettingsBlock,\n        processParameters = cms.vstring(\n            'POWHEG:nFinal = 1',   ## Number of final state particles\n                                   ## (BEFORE THE DECAYS) in the LHE\n                                   ## other than emitted extra parton\n          ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'pythia8PowhegEmissionVetoSettings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/ee53ee495d94eac22b4a451a0ad46d0805b86f4b/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "2557f311e3275b75b2e1ea1cb1c5cab4",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZToMuMu_NNPDF30_13TeV-powheg_M_6000_Inf/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_19",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01304_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01304_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01304_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01304_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZToMuMu_NNPDF30_13TeV-powheg_M_6000_Inf/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01304_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01304_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01304_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01304 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01304_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01304.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01304_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01304_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01304_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01304_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01304 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01304_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01304_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01304_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284abbc32",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284ac4abf",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZToMuMu_NNPDF30_13TeV-powheg_M_6000_Inf/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-01058_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-01058_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-01058_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-01058.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZToMuMu_NNPDF30_13TeV-powheg_M_6000_Inf/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-01058_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-01058_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-01058_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-01058 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-01058_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-01058_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-01058_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "744109404cdf471f6e79fd983bdf69e1",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZToMuMu_NNPDF30_13TeV-powheg_M_6000_Inf/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21588",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZToMuMu_NNPDF30_13TeV-powheg_M_6000_Inf/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZToMuMu_NNPDF30_13TeV-powheg_M_6000_Inf in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZToMuMu_NNPDF30_13TeV-powheg_M_800_1400 in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Standard Model Physics",
      "secondary": [
        "ElectroWeak"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 97600,
      "number_files": 3,
      "size": 2552916269
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIIWinter15wmLHE-00355\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIIWinter15wmLHE-00355_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIWinter15wmLHE-00355_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_16_patch2/src ] ; then\n  echo release CMSSW_7_1_16_patch2 already exists\nelse\n  scram p CMSSW CMSSW_7_1_16_patch2\nfi\ncd CMSSW_7_1_16_patch2/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/EXO-RunIIWinter15wmLHE-00355 --retry 3 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py\n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.3564s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.3564s = 0.3564s\n# Which adds up to 0.3564s per event\n# Single core events that fit in validation duration: 20160s / 0.3564s = 56562\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 56562 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --python_filename EXO-RunIIWinter15wmLHE-00355_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:EXO-RunIIWinter15wmLHE-00355.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIWinter15wmLHE-00355_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIWinter15wmLHE-00355_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIWinter15wmLHE-00355_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIWinter15wmLHE-00355 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIWinter15wmLHE-00355_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIWinter15wmLHE-00355_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIWinter15wmLHE-00355_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: powheg.input",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21589/powheg.input"
            },
            {
              "cms_confdb_id": "961a7b714523afd33725092c36371b72",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "madgraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZToMuMu_NNPDF30_13TeV-powheg_M_800_1400/RunIIWinter15wmLHE-MCRUN2_71_V1-v2/LHE",
          "release": "CMSSW_7_1_16_patch2",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid EXO-RunIISummer15GS-01270\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a EXO-RunIISummer15GS-01270_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIISummer15GS-01270_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_19/src ] ; then\n  echo release CMSSW_7_1_19 already exists\nelse\n  scram p CMSSW CMSSW_7_1_19\nfi\ncd CMSSW_7_1_19/src\neval `scram runtime -sh`\n\n# Retrieve fragment from github and ensure it is there\ncurl  -s https://raw.githubusercontent.com/cms-sw/genproductions/ee53ee495d94eac22b4a451a0ad46d0805b86f4b/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --retry 2 --create-dirs -o Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py \n[ -s Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 29.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 29.0000s = 29.0000s\n# Which adds up to 29.0000s per event\n# Single core events that fit in validation duration: 20160s / 29.0000s = 695\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 695 and 10000, but more than 0 -> 695\n# It is estimated that this validation will produce: 695 * 1.0000 = 695 events\nEVENTS=695\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py --python_filename EXO-RunIISummer15GS-01270_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:EXO-RunIISummer15GS-01270.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZToMuMu_NNPDF30_13TeV-powheg_M_800_1400/RunIIWinter15wmLHE-MCRUN2_71_V1-v2/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIISummer15GS-01270_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIISummer15GS-01270_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIISummer15GS-01270_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIISummer15GS-01270 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIISummer15GS-01270_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIISummer15GS-01270_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIISummer15GS-01270_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\nfrom Configuration.Generator.Pythia8PowhegEmissionVetoSettings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        pythia8PowhegEmissionVetoSettingsBlock,\n        processParameters = cms.vstring(\n            'POWHEG:nFinal = 1',   ## Number of final state particles\n                                   ## (BEFORE THE DECAYS) in the LHE\n                                   ## other than emitted extra parton\n          ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'pythia8PowhegEmissionVetoSettings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://raw.githubusercontent.com/cms-sw/genproductions/ee53ee495d94eac22b4a451a0ad46d0805b86f4b/python/ThirteenTeV/Hadronizer_TuneCUETP8M1_13TeV_powhegEmissionVeto_1p_LHE_pythia8_cff.py"
            },
            {
              "cms_confdb_id": "2557f311e3275b75b2e1ea1cb1c5cab4",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZToMuMu_NNPDF30_13TeV-powheg_M_800_1400/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_19",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15DR76-01299_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15DR76-01299_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01299_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:EXO-RunIIFall15DR76-01299_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZToMuMu_NNPDF30_13TeV-powheg_M_800_1400/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01299_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01299_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01299_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01299 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15DR76-01299_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:EXO-RunIIFall15DR76-01299.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:EXO-RunIIFall15DR76-01299_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15DR76-01299_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15DR76-01299_2_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15DR76-01299_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15DR76-01299 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15DR76-01299_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15DR76-01299_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15DR76-01299_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284abbc32",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284ac4abf",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZToMuMu_NNPDF30_13TeV-powheg_M_800_1400/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a EXO-RunIIFall15MiniAODv2-01053_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > EXO-RunIIFall15MiniAODv2-01053_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename EXO-RunIIFall15MiniAODv2-01053_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:EXO-RunIIFall15MiniAODv2-01053.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZToMuMu_NNPDF30_13TeV-powheg_M_800_1400/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=EXO-RunIIFall15MiniAODv2-01053_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME EXO-RunIIFall15MiniAODv2-01053_1_cfg.py || exit $? ;\n\n# Parse values from EXO-RunIIFall15MiniAODv2-01053_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of EXO-RunIIFall15MiniAODv2-01053 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of EXO-RunIIFall15MiniAODv2-01053_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x EXO-RunIIFall15MiniAODv2-01053_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/EXO-RunIIFall15MiniAODv2-01053_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "744109404cdf471f6e79fd983bdf69e1",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZToMuMu_NNPDF30_13TeV-powheg_M_800_1400/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21589",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZToMuMu_NNPDF30_13TeV-powheg_M_800_1400/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZToMuMu_NNPDF30_13TeV-powheg_M_800_1400 in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZZJJTo4L_13TeV-madgraph-pythia8 in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Miscellaneous",
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 1998636,
      "number_files": 48,
      "size": 76756924111
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid SMP-RunIIWinter15wmLHE-00060\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a SMP-RunIIWinter15wmLHE-00060_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > SMP-RunIIWinter15wmLHE-00060_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/SMP-RunIIWinter15wmLHE-00060 --retry 3 --create-dirs -o Configuration/GenProduction/python/SMP-RunIIWinter15wmLHE-00060-fragment.py\n[ -s Configuration/GenProduction/python/SMP-RunIIWinter15wmLHE-00060-fragment.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/SMP-RunIIWinter15wmLHE-00060-fragment.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/SMP-RunIIWinter15wmLHE-00060-fragment.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 12.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 12.0000s = 12.0000s\n# Which adds up to 12.0000s per event\n# Single core events that fit in validation duration: 20160s / 12.0000s = 1680\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 1680 and 10000, but more than 0 -> 1680\n# It is estimated that this validation will produce: 1680 * 1.0000 = 1680 events\nEVENTS=1680\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/SMP-RunIIWinter15wmLHE-00060-fragment.py --python_filename SMP-RunIIWinter15wmLHE-00060_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:SMP-RunIIWinter15wmLHE-00060.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=SMP-RunIIWinter15wmLHE-00060_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME SMP-RunIIWinter15wmLHE-00060_1_cfg.py || exit $? ;\n\n# Parse values from SMP-RunIIWinter15wmLHE-00060_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of SMP-RunIIWinter15wmLHE-00060 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of SMP-RunIIWinter15wmLHE-00060_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x SMP-RunIIWinter15wmLHE-00060_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/SMP-RunIIWinter15wmLHE-00060_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21590/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21590/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21590/run_card.dat"
            },
            {
              "cms_confdb_id": "cacede1754dca84e49ba7f9b70eb72f5",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "MadGraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZZJJTo4L_13TeV-madgraph-pythia8/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_20",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid SMP-RunIISummer15GS-00044\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a SMP-RunIISummer15GS-00044_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > SMP-RunIISummer15GS-00044_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/SMP-RunIISummer15GS-00044 --retry 3 --create-dirs -o Configuration/GenProduction/python/SMP-RunIISummer15GS-00044-fragment.py\n[ -s Configuration/GenProduction/python/SMP-RunIISummer15GS-00044-fragment.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/SMP-RunIISummer15GS-00044-fragment.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/SMP-RunIISummer15GS-00044-fragment.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 139.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 139.0000s = 139.0000s\n# Which adds up to 139.0000s per event\n# Single core events that fit in validation duration: 20160s / 139.0000s = 145\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 145 and 10000, but more than 0 -> 145\n# It is estimated that this validation will produce: 145 * 1.0000 = 145 events\nEVENTS=145\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/SMP-RunIISummer15GS-00044-fragment.py --python_filename SMP-RunIISummer15GS-00044_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:SMP-RunIISummer15GS-00044.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZZJJTo4L_13TeV-madgraph-pythia8/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=SMP-RunIISummer15GS-00044_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME SMP-RunIISummer15GS-00044_1_cfg.py || exit $? ;\n\n# Parse values from SMP-RunIISummer15GS-00044_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of SMP-RunIISummer15GS-00044 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of SMP-RunIISummer15GS-00044_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x SMP-RunIISummer15GS-00044_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/SMP-RunIISummer15GS-00044_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\n\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n    maxEventsToPrint = cms.untracked.int32(1),\n    pythiaPylistVerbosity = cms.untracked.int32(1),\n    filterEfficiency = cms.untracked.double(1.0),\n    pythiaHepMCVerbosity = cms.untracked.bool(False),\n    comEnergy = cms.double(13000.),\n    PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    )\n    )\n)",
              "title": "Hadronizer parameters",
              "url": "https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/SMP-RunIISummer15GS-00044"
            },
            {
              "cms_confdb_id": "777937efec6a48ae59af88df12ba6f23",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZZJJTo4L_13TeV-madgraph-pythia8/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_20",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a SMP-RunIIFall15DR76-00050_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > SMP-RunIIFall15DR76-00050_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename SMP-RunIIFall15DR76-00050_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:SMP-RunIIFall15DR76-00050_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZZJJTo4L_13TeV-madgraph-pythia8/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=SMP-RunIIFall15DR76-00050_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME SMP-RunIIFall15DR76-00050_1_cfg.py || exit $? ;\n\n# Parse values from SMP-RunIIFall15DR76-00050_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of SMP-RunIIFall15DR76-00050 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename SMP-RunIIFall15DR76-00050_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:SMP-RunIIFall15DR76-00050.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:SMP-RunIIFall15DR76-00050_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=SMP-RunIIFall15DR76-00050_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME SMP-RunIIFall15DR76-00050_2_cfg.py || exit $? ;\n\n# Parse values from SMP-RunIIFall15DR76-00050_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of SMP-RunIIFall15DR76-00050 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of SMP-RunIIFall15DR76-00050_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x SMP-RunIIFall15DR76-00050_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/SMP-RunIIFall15DR76-00050_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "770bdbbc9f2f053016bcb30e98b191fb",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "770bdbbc9f2f053016bcb30e98b2ae6a",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZZJJTo4L_13TeV-madgraph-pythia8/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a SMP-RunIIFall15MiniAODv2-00042_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > SMP-RunIIFall15MiniAODv2-00042_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename SMP-RunIIFall15MiniAODv2-00042_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:SMP-RunIIFall15MiniAODv2-00042.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZZJJTo4L_13TeV-madgraph-pythia8/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=SMP-RunIIFall15MiniAODv2-00042_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME SMP-RunIIFall15MiniAODv2-00042_1_cfg.py || exit $? ;\n\n# Parse values from SMP-RunIIFall15MiniAODv2-00042_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of SMP-RunIIFall15MiniAODv2-00042 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of SMP-RunIIFall15MiniAODv2-00042_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x SMP-RunIIFall15MiniAODv2-00042_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/SMP-RunIIFall15MiniAODv2-00042_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "33b9cac79bd8650401638666f780e8c5",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZZJJTo4L_13TeV-madgraph-pythia8/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21590",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZZJJTo4L_13TeV-madgraph-pythia8/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZZJJTo4L_13TeV-madgraph-pythia8 in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZZJJTo4L_EWK_13TeV-madgraph-pythia8 in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Miscellaneous",
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 1853904,
      "number_files": 41,
      "size": 71642959441
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid SMP-RunIIWinter15wmLHE-00061\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a SMP-RunIIWinter15wmLHE-00061_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > SMP-RunIIWinter15wmLHE-00061_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/SMP-RunIIWinter15wmLHE-00061 --retry 3 --create-dirs -o Configuration/GenProduction/python/SMP-RunIIWinter15wmLHE-00061-fragment.py\n[ -s Configuration/GenProduction/python/SMP-RunIIWinter15wmLHE-00061-fragment.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/SMP-RunIIWinter15wmLHE-00061-fragment.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/SMP-RunIIWinter15wmLHE-00061-fragment.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 9.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 9.0000s = 9.0000s\n# Which adds up to 9.0000s per event\n# Single core events that fit in validation duration: 20160s / 9.0000s = 2240\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 2240 and 10000, but more than 0 -> 2240\n# It is estimated that this validation will produce: 2240 * 1.0000 = 2240 events\nEVENTS=2240\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/SMP-RunIIWinter15wmLHE-00061-fragment.py --python_filename SMP-RunIIWinter15wmLHE-00061_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:SMP-RunIIWinter15wmLHE-00061.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=SMP-RunIIWinter15wmLHE-00061_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME SMP-RunIIWinter15wmLHE-00061_1_cfg.py || exit $? ;\n\n# Parse values from SMP-RunIIWinter15wmLHE-00061_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of SMP-RunIIWinter15wmLHE-00061 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of SMP-RunIIWinter15wmLHE-00061_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x SMP-RunIIWinter15wmLHE-00061_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/SMP-RunIIWinter15wmLHE-00061_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21591/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21591/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21591/run_card.dat"
            },
            {
              "cms_confdb_id": "d40c8b483f276a75ce73bc1107199d42",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "MadGraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZZJJTo4L_EWK_13TeV-madgraph-pythia8/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_20",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid SMP-RunIISummer15GS-00045\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a SMP-RunIISummer15GS-00045_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > SMP-RunIISummer15GS-00045_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/SMP-RunIISummer15GS-00045 --retry 3 --create-dirs -o Configuration/GenProduction/python/SMP-RunIISummer15GS-00045-fragment.py\n[ -s Configuration/GenProduction/python/SMP-RunIISummer15GS-00045-fragment.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/SMP-RunIISummer15GS-00045-fragment.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/SMP-RunIISummer15GS-00045-fragment.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 100.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 100.0000s = 100.0000s\n# Which adds up to 100.0000s per event\n# Single core events that fit in validation duration: 20160s / 100.0000s = 201\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 201 and 10000, but more than 0 -> 201\n# It is estimated that this validation will produce: 201 * 1.0000 = 201 events\nEVENTS=201\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/SMP-RunIISummer15GS-00045-fragment.py --python_filename SMP-RunIISummer15GS-00045_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:SMP-RunIISummer15GS-00045.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZZJJTo4L_EWK_13TeV-madgraph-pythia8/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=SMP-RunIISummer15GS-00045_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME SMP-RunIISummer15GS-00045_1_cfg.py || exit $? ;\n\n# Parse values from SMP-RunIISummer15GS-00045_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of SMP-RunIISummer15GS-00045 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of SMP-RunIISummer15GS-00045_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x SMP-RunIISummer15GS-00045_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/SMP-RunIISummer15GS-00045_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\n\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n    maxEventsToPrint = cms.untracked.int32(1),\n    pythiaPylistVerbosity = cms.untracked.int32(1),\n    filterEfficiency = cms.untracked.double(1.0),\n    pythiaHepMCVerbosity = cms.untracked.bool(False),\n    comEnergy = cms.double(13000.),\n    PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    )\n    )\n)",
              "title": "Hadronizer parameters",
              "url": "https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/SMP-RunIISummer15GS-00045"
            },
            {
              "cms_confdb_id": "777937efec6a48ae59af88df12ba6f23",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZZJJTo4L_EWK_13TeV-madgraph-pythia8/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_20",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a SMP-RunIIFall15DR76-00044_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > SMP-RunIIFall15DR76-00044_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename SMP-RunIIFall15DR76-00044_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:SMP-RunIIFall15DR76-00044_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZZJJTo4L_EWK_13TeV-madgraph-pythia8/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=SMP-RunIIFall15DR76-00044_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME SMP-RunIIFall15DR76-00044_1_cfg.py || exit $? ;\n\n# Parse values from SMP-RunIIFall15DR76-00044_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of SMP-RunIIFall15DR76-00044 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename SMP-RunIIFall15DR76-00044_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:SMP-RunIIFall15DR76-00044.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:SMP-RunIIFall15DR76-00044_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=SMP-RunIIFall15DR76-00044_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME SMP-RunIIFall15DR76-00044_2_cfg.py || exit $? ;\n\n# Parse values from SMP-RunIIFall15DR76-00044_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of SMP-RunIIFall15DR76-00044 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of SMP-RunIIFall15DR76-00044_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x SMP-RunIIFall15DR76-00044_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/SMP-RunIIFall15DR76-00044_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "c54bcac03a1744a7d7cbc50e5164d4ab",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "c54bcac03a1744a7d7cbc50e516575fe",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZZJJTo4L_EWK_13TeV-madgraph-pythia8/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a SMP-RunIIFall15MiniAODv2-00071_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > SMP-RunIIFall15MiniAODv2-00071_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename SMP-RunIIFall15MiniAODv2-00071_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:SMP-RunIIFall15MiniAODv2-00071.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZZJJTo4L_EWK_13TeV-madgraph-pythia8/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=SMP-RunIIFall15MiniAODv2-00071_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME SMP-RunIIFall15MiniAODv2-00071_1_cfg.py || exit $? ;\n\n# Parse values from SMP-RunIIFall15MiniAODv2-00071_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of SMP-RunIIFall15MiniAODv2-00071 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of SMP-RunIIFall15MiniAODv2-00071_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x SMP-RunIIFall15MiniAODv2-00071_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/SMP-RunIIFall15MiniAODv2-00071_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "0b0733caff183debb05f4a3bbd24b635",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZZJJTo4L_EWK_13TeV-madgraph-pythia8/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21591",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZZJJTo4L_EWK_13TeV-madgraph-pythia8/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZZJJTo4L_EWK_13TeV-madgraph-pythia8 in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZZJJTo4L_QCD_13TeV-madgraph-pythia8 in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Miscellaneous",
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 1924801,
      "number_files": 41,
      "size": 72770414347
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid SMP-RunIIWinter15wmLHE-00062\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a SMP-RunIIWinter15wmLHE-00062_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > SMP-RunIIWinter15wmLHE-00062_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/SMP-RunIIWinter15wmLHE-00062 --retry 3 --create-dirs -o Configuration/GenProduction/python/SMP-RunIIWinter15wmLHE-00062-fragment.py\n[ -s Configuration/GenProduction/python/SMP-RunIIWinter15wmLHE-00062-fragment.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/SMP-RunIIWinter15wmLHE-00062-fragment.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/SMP-RunIIWinter15wmLHE-00062-fragment.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.5783s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.5783s = 0.5783s\n# Which adds up to 0.5783s per event\n# Single core events that fit in validation duration: 20160s / 0.5783s = 34859\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 34859 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/SMP-RunIIWinter15wmLHE-00062-fragment.py --python_filename SMP-RunIIWinter15wmLHE-00062_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:SMP-RunIIWinter15wmLHE-00062.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=SMP-RunIIWinter15wmLHE-00062_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME SMP-RunIIWinter15wmLHE-00062_1_cfg.py || exit $? ;\n\n# Parse values from SMP-RunIIWinter15wmLHE-00062_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of SMP-RunIIWinter15wmLHE-00062 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of SMP-RunIIWinter15wmLHE-00062_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x SMP-RunIIWinter15wmLHE-00062_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/SMP-RunIIWinter15wmLHE-00062_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21592/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21592/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21592/run_card.dat"
            },
            {
              "cms_confdb_id": "478a847da29f046a67b92f4224f20adc",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "MadGraph"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZZJJTo4L_QCD_13TeV-madgraph-pythia8/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_20",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid SMP-RunIISummer15GS-00046\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a SMP-RunIISummer15GS-00046_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > SMP-RunIISummer15GS-00046_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/SMP-RunIISummer15GS-00046 --retry 3 --create-dirs -o Configuration/GenProduction/python/SMP-RunIISummer15GS-00046-fragment.py\n[ -s Configuration/GenProduction/python/SMP-RunIISummer15GS-00046-fragment.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/SMP-RunIISummer15GS-00046-fragment.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/SMP-RunIISummer15GS-00046-fragment.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 41.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 41.0000s = 41.0000s\n# Which adds up to 41.0000s per event\n# Single core events that fit in validation duration: 20160s / 41.0000s = 491\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 491 and 10000, but more than 0 -> 491\n# It is estimated that this validation will produce: 491 * 1.0000 = 491 events\nEVENTS=491\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/SMP-RunIISummer15GS-00046-fragment.py --python_filename SMP-RunIISummer15GS-00046_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:SMP-RunIISummer15GS-00046.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZZJJTo4L_QCD_13TeV-madgraph-pythia8/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=SMP-RunIISummer15GS-00046_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME SMP-RunIISummer15GS-00046_1_cfg.py || exit $? ;\n\n# Parse values from SMP-RunIISummer15GS-00046_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of SMP-RunIISummer15GS-00046 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of SMP-RunIISummer15GS-00046_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x SMP-RunIISummer15GS-00046_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/SMP-RunIISummer15GS-00046_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\n\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n    maxEventsToPrint = cms.untracked.int32(1),\n    pythiaPylistVerbosity = cms.untracked.int32(1),\n    filterEfficiency = cms.untracked.double(1.0),\n    pythiaHepMCVerbosity = cms.untracked.bool(False),\n    comEnergy = cms.double(13000.),\n    PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    )\n    )\n)",
              "title": "Hadronizer parameters",
              "url": "https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/SMP-RunIISummer15GS-00046"
            },
            {
              "cms_confdb_id": "478a847da29f046a67b92f4224f236a1",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZZJJTo4L_QCD_13TeV-madgraph-pythia8/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_20",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a SMP-RunIIFall15DR76-00049_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > SMP-RunIIFall15DR76-00049_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename SMP-RunIIFall15DR76-00049_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:SMP-RunIIFall15DR76-00049_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZZJJTo4L_QCD_13TeV-madgraph-pythia8/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=SMP-RunIIFall15DR76-00049_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME SMP-RunIIFall15DR76-00049_1_cfg.py || exit $? ;\n\n# Parse values from SMP-RunIIFall15DR76-00049_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of SMP-RunIIFall15DR76-00049 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename SMP-RunIIFall15DR76-00049_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:SMP-RunIIFall15DR76-00049.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:SMP-RunIIFall15DR76-00049_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=SMP-RunIIFall15DR76-00049_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME SMP-RunIIFall15DR76-00049_2_cfg.py || exit $? ;\n\n# Parse values from SMP-RunIIFall15DR76-00049_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of SMP-RunIIFall15DR76-00049 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of SMP-RunIIFall15DR76-00049_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x SMP-RunIIFall15DR76-00049_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/SMP-RunIIFall15DR76-00049_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "c54bcac03a1744a7d7cbc50e5164d4ab",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "c54bcac03a1744a7d7cbc50e516575fe",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZZJJTo4L_QCD_13TeV-madgraph-pythia8/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a SMP-RunIIFall15MiniAODv2-00041_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > SMP-RunIIFall15MiniAODv2-00041_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename SMP-RunIIFall15MiniAODv2-00041_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:SMP-RunIIFall15MiniAODv2-00041.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZZJJTo4L_QCD_13TeV-madgraph-pythia8/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=SMP-RunIIFall15MiniAODv2-00041_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME SMP-RunIIFall15MiniAODv2-00041_1_cfg.py || exit $? ;\n\n# Parse values from SMP-RunIIFall15MiniAODv2-00041_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of SMP-RunIIFall15MiniAODv2-00041 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of SMP-RunIIFall15MiniAODv2-00041_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x SMP-RunIIFall15MiniAODv2-00041_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/SMP-RunIIFall15MiniAODv2-00041_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "33b9cac79bd8650401638666f780e8c5",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZZJJTo4L_QCD_13TeV-madgraph-pythia8/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21592",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZZJJTo4L_QCD_13TeV-madgraph-pythia8/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZZJJTo4L_QCD_13TeV-madgraph-pythia8 in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZZTo2L2Nu_13TeV_powheg_pythia8 in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Standard Model Physics",
      "secondary": [
        "ElectroWeak"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 8785050,
      "number_files": 226,
      "size": 208665474894
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid HIG-RunIIWinter15wmLHE-00282\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a HIG-RunIIWinter15wmLHE-00282_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > HIG-RunIIWinter15wmLHE-00282_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_16/src ] ; then\n  echo release CMSSW_7_1_16 already exists\nelse\n  scram p CMSSW CMSSW_7_1_16\nfi\ncd CMSSW_7_1_16/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/HIG-RunIIWinter15wmLHE-00282 --retry 3 --create-dirs -o Configuration/GenProduction/python/HIG-RunIIWinter15wmLHE-00282-fragment.py\n[ -s Configuration/GenProduction/python/HIG-RunIIWinter15wmLHE-00282-fragment.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/HIG-RunIIWinter15wmLHE-00282-fragment.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/HIG-RunIIWinter15wmLHE-00282-fragment.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 13.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 13.0000s = 13.0000s\n# Which adds up to 13.0000s per event\n# Single core events that fit in validation duration: 20160s / 13.0000s = 1550\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 1550 and 10000, but more than 0 -> 1550\n# It is estimated that this validation will produce: 1550 * 1.0000 = 1550 events\nEVENTS=1550\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/HIG-RunIIWinter15wmLHE-00282-fragment.py --python_filename HIG-RunIIWinter15wmLHE-00282_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:HIG-RunIIWinter15wmLHE-00282.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=HIG-RunIIWinter15wmLHE-00282_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME HIG-RunIIWinter15wmLHE-00282_1_cfg.py || exit $? ;\n\n# Parse values from HIG-RunIIWinter15wmLHE-00282_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of HIG-RunIIWinter15wmLHE-00282 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of HIG-RunIIWinter15wmLHE-00282_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x HIG-RunIIWinter15wmLHE-00282_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/HIG-RunIIWinter15wmLHE-00282_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: powheg.input",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21593/powheg.input"
            },
            {
              "cms_confdb_id": "4ec578f09135f0f1c9e85030b069ff8e",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "powheg ZZ"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZZTo2L2Nu_13TeV_powheg_pythia8/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_16",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid HIG-RunIISummer15GS-00261\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a HIG-RunIISummer15GS-00261_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > HIG-RunIISummer15GS-00261_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/HIG-RunIISummer15GS-00261 --retry 3 --create-dirs -o Configuration/GenProduction/python/HIG-RunIISummer15GS-00261-fragment.py\n[ -s Configuration/GenProduction/python/HIG-RunIISummer15GS-00261-fragment.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/HIG-RunIISummer15GS-00261-fragment.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/HIG-RunIISummer15GS-00261-fragment.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 48.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 48.0000s = 48.0000s\n# Which adds up to 48.0000s per event\n# Single core events that fit in validation duration: 20160s / 48.0000s = 420\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 420 and 10000, but more than 0 -> 420\n# It is estimated that this validation will produce: 420 * 1.0000 = 420 events\nEVENTS=420\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/HIG-RunIISummer15GS-00261-fragment.py --python_filename HIG-RunIISummer15GS-00261_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:HIG-RunIISummer15GS-00261.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZZTo2L2Nu_13TeV_powheg_pythia8/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=HIG-RunIISummer15GS-00261_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME HIG-RunIISummer15GS-00261_1_cfg.py || exit $? ;\n\n# Parse values from HIG-RunIISummer15GS-00261_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of HIG-RunIISummer15GS-00261 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of HIG-RunIISummer15GS-00261_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x HIG-RunIISummer15GS-00261_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/HIG-RunIISummer15GS-00261_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\nfrom Configuration.Generator.Pythia8PowhegEmissionVetoSettings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        pythia8PowhegEmissionVetoSettingsBlock,\n        processParameters = cms.vstring(\n            'POWHEG:nFinal = 2',   ## Number of final state particles\n                                   ## (BEFORE THE DECAYS) in the LHE\n                                   ## other than emitted extra parton\n          ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'pythia8PowhegEmissionVetoSettings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)",
              "title": "Hadronizer parameters",
              "url": "https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/HIG-RunIISummer15GS-00261"
            },
            {
              "cms_confdb_id": "c4d03e96b97e6067c54800f677b06aac",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZZTo2L2Nu_13TeV_powheg_pythia8/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_20",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a HIG-RunIIFall15DR76-00829_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > HIG-RunIIFall15DR76-00829_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename HIG-RunIIFall15DR76-00829_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:HIG-RunIIFall15DR76-00829_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZZTo2L2Nu_13TeV_powheg_pythia8/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=HIG-RunIIFall15DR76-00829_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME HIG-RunIIFall15DR76-00829_1_cfg.py || exit $? ;\n\n# Parse values from HIG-RunIIFall15DR76-00829_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of HIG-RunIIFall15DR76-00829 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename HIG-RunIIFall15DR76-00829_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:HIG-RunIIFall15DR76-00829.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:HIG-RunIIFall15DR76-00829_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=HIG-RunIIFall15DR76-00829_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME HIG-RunIIFall15DR76-00829_2_cfg.py || exit $? ;\n\n# Parse values from HIG-RunIIFall15DR76-00829_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of HIG-RunIIFall15DR76-00829 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of HIG-RunIIFall15DR76-00829_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x HIG-RunIIFall15DR76-00829_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/HIG-RunIIFall15DR76-00829_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "1afa7fc4132ca1afecdba4b11c0d3b18",
              "process": "RECO",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "8941377dce285a78c913aa0df0f8481b",
              "process": "HLT",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZZTo2L2Nu_13TeV_powheg_pythia8/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "RECO HLT"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a HIG-RunIIFall15MiniAODv2-00294_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > HIG-RunIIFall15MiniAODv2-00294_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename HIG-RunIIFall15MiniAODv2-00294_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:HIG-RunIIFall15MiniAODv2-00294.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZZTo2L2Nu_13TeV_powheg_pythia8/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=HIG-RunIIFall15MiniAODv2-00294_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME HIG-RunIIFall15MiniAODv2-00294_1_cfg.py || exit $? ;\n\n# Parse values from HIG-RunIIFall15MiniAODv2-00294_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of HIG-RunIIFall15MiniAODv2-00294 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of HIG-RunIIFall15MiniAODv2-00294_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x HIG-RunIIFall15MiniAODv2-00294_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/HIG-RunIIFall15MiniAODv2-00294_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "744109404cdf471f6e79fd983bdf69e1",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZZTo2L2Nu_13TeV_powheg_pythia8/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21593",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZZTo2L2Nu_13TeV_powheg_pythia8/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZZTo2L2Nu_13TeV_powheg_pythia8 in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZZTo2L2Q_13TeV_amcatnloFXFX_madspin_pythia8 in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Standard Model Physics",
      "secondary": [
        "ElectroWeak"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 15301695,
      "number_files": 465,
      "size": 395452270243
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid HIG-RunIIWinter15wmLHE-00100\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a HIG-RunIIWinter15wmLHE-00100_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > HIG-RunIIWinter15wmLHE-00100_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_16_patch1/src ] ; then\n  echo release CMSSW_7_1_16_patch1 already exists\nelse\n  scram p CMSSW CMSSW_7_1_16_patch1\nfi\ncd CMSSW_7_1_16_patch1/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/HIG-RunIIWinter15wmLHE-00100 --retry 3 --create-dirs -o Configuration/GenProduction/python/HIG-RunIIWinter15wmLHE-00100-fragment.py\n[ -s Configuration/GenProduction/python/HIG-RunIIWinter15wmLHE-00100-fragment.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/HIG-RunIIWinter15wmLHE-00100-fragment.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/HIG-RunIIWinter15wmLHE-00100-fragment.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 2.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 2.0000s = 2.0000s\n# Which adds up to 2.0000s per event\n# Single core events that fit in validation duration: 20160s / 2.0000s = 10080\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 10080 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/HIG-RunIIWinter15wmLHE-00100-fragment.py --python_filename HIG-RunIIWinter15wmLHE-00100_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:HIG-RunIIWinter15wmLHE-00100.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=HIG-RunIIWinter15wmLHE-00100_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME HIG-RunIIWinter15wmLHE-00100_1_cfg.py || exit $? ;\n\n# Parse values from HIG-RunIIWinter15wmLHE-00100_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of HIG-RunIIWinter15wmLHE-00100 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of HIG-RunIIWinter15wmLHE-00100_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x HIG-RunIIWinter15wmLHE-00100_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/HIG-RunIIWinter15wmLHE-00100_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21594/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21594/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21594/run_card.dat"
            },
            {
              "cms_confdb_id": "99463893bfa68894665f332745b18c3f",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "Madgraph5_aMC@NLO",
            "Madspin"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZZTo2L2Q_13TeV_amcatnloFXFX_madspin_pythia8/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_16_patch1",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid HIG-RunIISummer15GS-00081\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a HIG-RunIISummer15GS-00081_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > HIG-RunIISummer15GS-00081_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/HIG-RunIISummer15GS-00081 --retry 3 --create-dirs -o Configuration/GenProduction/python/HIG-RunIISummer15GS-00081-fragment.py\n[ -s Configuration/GenProduction/python/HIG-RunIISummer15GS-00081-fragment.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/HIG-RunIISummer15GS-00081-fragment.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/HIG-RunIISummer15GS-00081-fragment.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 21.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 21.0000s = 21.0000s\n# Which adds up to 21.0000s per event\n# Single core events that fit in validation duration: 20160s / 21.0000s = 960\n# Produced events limit in McM is 10000\n# According to 0.6000 efficiency, validation should run 10000 / 0.6000 = 16666 events to reach the limit of 10000\n# Take the minimum of 960 and 16666, but more than 0 -> 960\n# It is estimated that this validation will produce: 960 * 0.6000 = 576 events\nEVENTS=960\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/HIG-RunIISummer15GS-00081-fragment.py --python_filename HIG-RunIISummer15GS-00081_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:HIG-RunIISummer15GS-00081.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZZTo2L2Q_13TeV_amcatnloFXFX_madspin_pythia8/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=HIG-RunIISummer15GS-00081_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME HIG-RunIISummer15GS-00081_1_cfg.py || exit $? ;\n\n# Parse values from HIG-RunIISummer15GS-00081_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of HIG-RunIISummer15GS-00081 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of HIG-RunIISummer15GS-00081_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x HIG-RunIISummer15GS-00081_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/HIG-RunIISummer15GS-00081_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "# https://github.com/cms-sw/cmssw/blob/CMSSW_7_1_X/Configuration/Generator/python/Hadronizer_TuneCUETP8M1_13TeV_aMCatNLO_FXFX_5f_max1j_max1p_LHE_pythia8_cff.py\n\nimport FWCore.ParameterSet.Config as cms\n\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\nfrom Configuration.Generator.Pythia8aMCatNLOSettings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n    maxEventsToPrint = cms.untracked.int32(1),\n    pythiaPylistVerbosity = cms.untracked.int32(1),\n    filterEfficiency = cms.untracked.double(1.0),\n    pythiaHepMCVerbosity = cms.untracked.bool(False),\n    comEnergy = cms.double(13000.),\n    PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        pythia8aMCatNLOSettingsBlock,\n        processParameters = cms.vstring(\n            'JetMatching:setMad = off',\n            'JetMatching:scheme = 1',\n            'JetMatching:merge = on',\n            'JetMatching:jetAlgorithm = 2',\n            'JetMatching:etaJetMax = 999.',\n            'JetMatching:coneRadius = 1.',\n            'JetMatching:slowJetPower = 1',\n            'JetMatching:qCut = 30.', #this is the actual merging scale\n            'JetMatching:doFxFx = on',\n            'JetMatching:qCutME = 20.',#this must match the ptj cut in the lhe generation step\n            'JetMatching:nQmatch = 5', #4 corresponds to 4-flavour scheme (no matching of b-quarks), 5 for 5-flavour scheme\n            'JetMatching:nJetMax = 1', #number of partons in born matrix element for highest multiplicity\n        ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'pythia8aMCatNLOSettings',\n                                    'processParameters',\n                                    )\n    )\n)",
              "title": "Hadronizer parameters",
              "url": "https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/HIG-RunIISummer15GS-00081"
            },
            {
              "cms_confdb_id": "c4d03e96b97e6067c54800f677a0ebab",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZZTo2L2Q_13TeV_amcatnloFXFX_madspin_pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM",
          "release": "CMSSW_7_1_20",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a HIG-RunIIFall15DR76-01119_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > HIG-RunIIFall15DR76-01119_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename HIG-RunIIFall15DR76-01119_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:HIG-RunIIFall15DR76-01119_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZZTo2L2Q_13TeV_amcatnloFXFX_madspin_pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=HIG-RunIIFall15DR76-01119_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME HIG-RunIIFall15DR76-01119_1_cfg.py || exit $? ;\n\n# Parse values from HIG-RunIIFall15DR76-01119_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of HIG-RunIIFall15DR76-01119 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename HIG-RunIIFall15DR76-01119_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:HIG-RunIIFall15DR76-01119.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:HIG-RunIIFall15DR76-01119_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=HIG-RunIIFall15DR76-01119_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME HIG-RunIIFall15DR76-01119_2_cfg.py || exit $? ;\n\n# Parse values from HIG-RunIIFall15DR76-01119_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of HIG-RunIIFall15DR76-01119 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of HIG-RunIIFall15DR76-01119_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x HIG-RunIIFall15DR76-01119_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/HIG-RunIIFall15DR76-01119_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "deee2173631893af9152071f2a35c475",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "deee2173631893af9152071f2a36bfd8",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZZTo2L2Q_13TeV_amcatnloFXFX_madspin_pythia8/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a HIG-RunIIFall15MiniAODv2-00961_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > HIG-RunIIFall15MiniAODv2-00961_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename HIG-RunIIFall15MiniAODv2-00961_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:HIG-RunIIFall15MiniAODv2-00961.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein file:HIG-RunIIFall15DR76-01119.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=HIG-RunIIFall15MiniAODv2-00961_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME HIG-RunIIFall15MiniAODv2-00961_1_cfg.py || exit $? ;\n\n# Parse values from HIG-RunIIFall15MiniAODv2-00961_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of HIG-RunIIFall15MiniAODv2-00961 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of HIG-RunIIFall15MiniAODv2-00961_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x HIG-RunIIFall15MiniAODv2-00961_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/HIG-RunIIFall15MiniAODv2-00961_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "deee2173631893af9152071f2a37ff32",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZZTo2L2Q_13TeV_amcatnloFXFX_madspin_pythia8/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21594",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZZTo2L2Q_13TeV_amcatnloFXFX_madspin_pythia8/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZZTo2L2Q_13TeV_amcatnloFXFX_madspin_pythia8 in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZZTo2Q2Nu_13TeV_amcatnloFXFX_madspin_pythia8 in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Standard Model Physics",
      "secondary": [
        "ElectroWeak"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 30806034,
      "number_files": 732,
      "size": 682365142566
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid HIG-RunIIWinter15wmLHE-00099\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a HIG-RunIIWinter15wmLHE-00099_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > HIG-RunIIWinter15wmLHE-00099_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_16_patch1/src ] ; then\n  echo release CMSSW_7_1_16_patch1 already exists\nelse\n  scram p CMSSW CMSSW_7_1_16_patch1\nfi\ncd CMSSW_7_1_16_patch1/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/HIG-RunIIWinter15wmLHE-00099 --retry 3 --create-dirs -o Configuration/GenProduction/python/HIG-RunIIWinter15wmLHE-00099-fragment.py\n[ -s Configuration/GenProduction/python/HIG-RunIIWinter15wmLHE-00099-fragment.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/HIG-RunIIWinter15wmLHE-00099-fragment.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/HIG-RunIIWinter15wmLHE-00099-fragment.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.8993s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.8993s = 0.8993s\n# Which adds up to 0.8993s per event\n# Single core events that fit in validation duration: 20160s / 0.8993s = 22416\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 22416 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/HIG-RunIIWinter15wmLHE-00099-fragment.py --python_filename HIG-RunIIWinter15wmLHE-00099_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:HIG-RunIIWinter15wmLHE-00099.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=HIG-RunIIWinter15wmLHE-00099_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME HIG-RunIIWinter15wmLHE-00099_1_cfg.py || exit $? ;\n\n# Parse values from HIG-RunIIWinter15wmLHE-00099_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of HIG-RunIIWinter15wmLHE-00099 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of HIG-RunIIWinter15wmLHE-00099_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x HIG-RunIIWinter15wmLHE-00099_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/HIG-RunIIWinter15wmLHE-00099_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21595/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21595/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21595/run_card.dat"
            },
            {
              "cms_confdb_id": "99463893bfa68894665f332745b18982",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "Madgraph5_aMC@NLO",
            "Madspin"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZZTo2Q2Nu_13TeV_amcatnloFXFX_madspin_pythia8/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_16_patch1",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid HIG-RunIISummer15GS-00080\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a HIG-RunIISummer15GS-00080_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > HIG-RunIISummer15GS-00080_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_18/src ] ; then\n  echo release CMSSW_7_1_18 already exists\nelse\n  scram p CMSSW CMSSW_7_1_18\nfi\ncd CMSSW_7_1_18/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/HIG-RunIISummer15GS-00080 --retry 3 --create-dirs -o Configuration/GenProduction/python/HIG-RunIISummer15GS-00080-fragment.py\n[ -s Configuration/GenProduction/python/HIG-RunIISummer15GS-00080-fragment.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/HIG-RunIISummer15GS-00080-fragment.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/HIG-RunIISummer15GS-00080-fragment.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 43.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 43.0000s = 43.0000s\n# Which adds up to 43.0000s per event\n# Single core events that fit in validation duration: 20160s / 43.0000s = 468\n# Produced events limit in McM is 10000\n# According to 0.6000 efficiency, validation should run 10000 / 0.6000 = 16666 events to reach the limit of 10000\n# Take the minimum of 468 and 16666, but more than 0 -> 468\n# It is estimated that this validation will produce: 468 * 0.6000 = 280 events\nEVENTS=468\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/HIG-RunIISummer15GS-00080-fragment.py --python_filename HIG-RunIISummer15GS-00080_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:HIG-RunIISummer15GS-00080.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZZTo2Q2Nu_13TeV_amcatnloFXFX_madspin_pythia8/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=HIG-RunIISummer15GS-00080_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME HIG-RunIISummer15GS-00080_1_cfg.py || exit $? ;\n\n# Parse values from HIG-RunIISummer15GS-00080_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of HIG-RunIISummer15GS-00080 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of HIG-RunIISummer15GS-00080_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x HIG-RunIISummer15GS-00080_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/HIG-RunIISummer15GS-00080_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "# https://github.com/cms-sw/cmssw/blob/CMSSW_7_1_X/Configuration/Generator/python/Hadronizer_TuneCUETP8M1_13TeV_aMCatNLO_FXFX_5f_max1j_max1p_LHE_pythia8_cff.py\n\nimport FWCore.ParameterSet.Config as cms\n\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\nfrom Configuration.Generator.Pythia8aMCatNLOSettings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n    maxEventsToPrint = cms.untracked.int32(1),\n    pythiaPylistVerbosity = cms.untracked.int32(1),\n    filterEfficiency = cms.untracked.double(1.0),\n    pythiaHepMCVerbosity = cms.untracked.bool(False),\n    comEnergy = cms.double(13000.),\n    PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        pythia8aMCatNLOSettingsBlock,\n        processParameters = cms.vstring(\n            'JetMatching:setMad = off',\n            'JetMatching:scheme = 1',\n            'JetMatching:merge = on',\n            'JetMatching:jetAlgorithm = 2',\n            'JetMatching:etaJetMax = 999.',\n            'JetMatching:coneRadius = 1.',\n            'JetMatching:slowJetPower = 1',\n            'JetMatching:qCut = 30.', #this is the actual merging scale\n            'JetMatching:doFxFx = on',\n            'JetMatching:qCutME = 20.',#this must match the ptj cut in the lhe generation step\n            'JetMatching:nQmatch = 5', #4 corresponds to 4-flavour scheme (no matching of b-quarks), 5 for 5-flavour scheme\n            'JetMatching:nJetMax = 1', #number of partons in born matrix element for highest multiplicity\n        ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'pythia8aMCatNLOSettings',\n                                    'processParameters',\n                                    )\n    )\n)",
              "title": "Hadronizer parameters",
              "url": "https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/HIG-RunIISummer15GS-00080"
            },
            {
              "cms_confdb_id": "59238b38278d45bcbd1d69610833d3d7",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZZTo2Q2Nu_13TeV_amcatnloFXFX_madspin_pythia8/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_18",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a HIG-RunIIFall15DR76-00163_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > HIG-RunIIFall15DR76-00163_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename HIG-RunIIFall15DR76-00163_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:HIG-RunIIFall15DR76-00163_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZZTo2Q2Nu_13TeV_amcatnloFXFX_madspin_pythia8/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=HIG-RunIIFall15DR76-00163_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME HIG-RunIIFall15DR76-00163_1_cfg.py || exit $? ;\n\n# Parse values from HIG-RunIIFall15DR76-00163_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of HIG-RunIIFall15DR76-00163 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename HIG-RunIIFall15DR76-00163_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:HIG-RunIIFall15DR76-00163.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:HIG-RunIIFall15DR76-00163_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=HIG-RunIIFall15DR76-00163_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME HIG-RunIIFall15DR76-00163_2_cfg.py || exit $? ;\n\n# Parse values from HIG-RunIIFall15DR76-00163_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of HIG-RunIIFall15DR76-00163 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of HIG-RunIIFall15DR76-00163_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x HIG-RunIIFall15DR76-00163_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/HIG-RunIIFall15DR76-00163_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "1e9350c183633616a34f138ead3d24c5",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "1e9350c183633616a34f138ead3dece6",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZZTo2Q2Nu_13TeV_amcatnloFXFX_madspin_pythia8/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a HIG-RunIIFall15MiniAODv2-00827_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > HIG-RunIIFall15MiniAODv2-00827_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename HIG-RunIIFall15MiniAODv2-00827_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:HIG-RunIIFall15MiniAODv2-00827.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZZTo2Q2Nu_13TeV_amcatnloFXFX_madspin_pythia8/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=HIG-RunIIFall15MiniAODv2-00827_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME HIG-RunIIFall15MiniAODv2-00827_1_cfg.py || exit $? ;\n\n# Parse values from HIG-RunIIFall15MiniAODv2-00827_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of HIG-RunIIFall15MiniAODv2-00827 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of HIG-RunIIFall15MiniAODv2-00827_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x HIG-RunIIFall15MiniAODv2-00827_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/HIG-RunIIFall15MiniAODv2-00827_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "51807415bb49655b2bcdae283c1d9ada",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZZTo2Q2Nu_13TeV_amcatnloFXFX_madspin_pythia8/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21595",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZZTo2Q2Nu_13TeV_amcatnloFXFX_madspin_pythia8/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZZTo2Q2Nu_13TeV_amcatnloFXFX_madspin_pythia8 in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZZTo4L_13TeV-amcatnloFXFX-pythia8 in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Standard Model Physics",
      "secondary": [
        "ElectroWeak"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 10747136,
      "number_files": 264,
      "size": 243260678081
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid SMP-RunIIWinter15wmLHE-00005\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a SMP-RunIIWinter15wmLHE-00005_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > SMP-RunIIWinter15wmLHE-00005_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_16_patch1/src ] ; then\n  echo release CMSSW_7_1_16_patch1 already exists\nelse\n  scram p CMSSW CMSSW_7_1_16_patch1\nfi\ncd CMSSW_7_1_16_patch1/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/SMP-RunIIWinter15wmLHE-00005 --retry 3 --create-dirs -o Configuration/GenProduction/python/SMP-RunIIWinter15wmLHE-00005-fragment.py\n[ -s Configuration/GenProduction/python/SMP-RunIIWinter15wmLHE-00005-fragment.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/SMP-RunIIWinter15wmLHE-00005-fragment.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/SMP-RunIIWinter15wmLHE-00005-fragment.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 5.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 5.0000s = 5.0000s\n# Which adds up to 5.0000s per event\n# Single core events that fit in validation duration: 20160s / 5.0000s = 4032\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 4032 and 10000, but more than 0 -> 4032\n# It is estimated that this validation will produce: 4032 * 1.0000 = 4032 events\nEVENTS=4032\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/SMP-RunIIWinter15wmLHE-00005-fragment.py --python_filename SMP-RunIIWinter15wmLHE-00005_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:SMP-RunIIWinter15wmLHE-00005.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=SMP-RunIIWinter15wmLHE-00005_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME SMP-RunIIWinter15wmLHE-00005_1_cfg.py || exit $? ;\n\n# Parse values from SMP-RunIIWinter15wmLHE-00005_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of SMP-RunIIWinter15wmLHE-00005 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of SMP-RunIIWinter15wmLHE-00005_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x SMP-RunIIWinter15wmLHE-00005_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/SMP-RunIIWinter15wmLHE-00005_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21596/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21596/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21596/run_card.dat"
            },
            {
              "cms_confdb_id": "c318fb65cf17fb8d526e0aa2f5ef1b45",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "amcatnlo"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZZTo4L_13TeV-amcatnloFXFX-pythia8/RunIIWinter15wmLHE-MCRUN2_71_V1-v2/LHE",
          "release": "CMSSW_7_1_16_patch1",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid SMP-RunIISummer15GS-00027\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a SMP-RunIISummer15GS-00027_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > SMP-RunIISummer15GS-00027_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/SMP-RunIISummer15GS-00027 --retry 3 --create-dirs -o Configuration/GenProduction/python/SMP-RunIISummer15GS-00027-fragment.py\n[ -s Configuration/GenProduction/python/SMP-RunIISummer15GS-00027-fragment.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/SMP-RunIISummer15GS-00027-fragment.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/SMP-RunIISummer15GS-00027-fragment.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 23.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 23.0000s = 23.0000s\n# Which adds up to 23.0000s per event\n# Single core events that fit in validation duration: 20160s / 23.0000s = 876\n# Produced events limit in McM is 10000\n# According to 0.5960 efficiency, validation should run 10000 / 0.5960 = 16778 events to reach the limit of 10000\n# Take the minimum of 876 and 16778, but more than 0 -> 876\n# It is estimated that this validation will produce: 876 * 0.5960 = 522 events\nEVENTS=876\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/SMP-RunIISummer15GS-00027-fragment.py --python_filename SMP-RunIISummer15GS-00027_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:SMP-RunIISummer15GS-00027.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZZTo4L_13TeV-amcatnloFXFX-pythia8/RunIIWinter15wmLHE-MCRUN2_71_V1-v2/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=SMP-RunIISummer15GS-00027_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME SMP-RunIISummer15GS-00027_1_cfg.py || exit $? ;\n\n# Parse values from SMP-RunIISummer15GS-00027_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of SMP-RunIISummer15GS-00027 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of SMP-RunIISummer15GS-00027_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x SMP-RunIISummer15GS-00027_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/SMP-RunIISummer15GS-00027_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\n\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\nfrom Configuration.Generator.Pythia8aMCatNLOSettings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n    maxEventsToPrint = cms.untracked.int32(1),\n    pythiaPylistVerbosity = cms.untracked.int32(1),\n    filterEfficiency = cms.untracked.double(1.0),\n    pythiaHepMCVerbosity = cms.untracked.bool(False),\n    comEnergy = cms.double(13000.),\n    PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        pythia8aMCatNLOSettingsBlock,\n        processParameters = cms.vstring(\n            'JetMatching:setMad = off',\n            'JetMatching:scheme = 1',\n            'JetMatching:merge = on',\n            'JetMatching:jetAlgorithm = 2',\n            'JetMatching:etaJetMax = 999.',\n            'JetMatching:coneRadius = 1.',\n            'JetMatching:slowJetPower = 1',\n            'JetMatching:qCut = 30.', #this is the actual merging scale\n            'JetMatching:doFxFx = on',\n            'JetMatching:qCutME = 15.',#this must match the ptj cut in the lhe generation step\n            'JetMatching:nQmatch = 5', #4 corresponds to 4-flavour scheme (no matching of b-quarks), 5 for 5-flavour scheme\n            'JetMatching:nJetMax = 1', #number of partons in born matrix element for highest multiplicity\n        ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'pythia8aMCatNLOSettings',\n                                    'processParameters',\n                                    )\n    )\n)",
              "title": "Hadronizer parameters",
              "url": "https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/SMP-RunIISummer15GS-00027"
            },
            {
              "cms_confdb_id": "72c9f370c2716841a61f17c61a56ab2d",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZZTo4L_13TeV-amcatnloFXFX-pythia8/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_20",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a SMP-RunIIFall15DR76-00031_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > SMP-RunIIFall15DR76-00031_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename SMP-RunIIFall15DR76-00031_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:SMP-RunIIFall15DR76-00031_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZZTo4L_13TeV-amcatnloFXFX-pythia8/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=SMP-RunIIFall15DR76-00031_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME SMP-RunIIFall15DR76-00031_1_cfg.py || exit $? ;\n\n# Parse values from SMP-RunIIFall15DR76-00031_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of SMP-RunIIFall15DR76-00031 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename SMP-RunIIFall15DR76-00031_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:SMP-RunIIFall15DR76-00031.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:SMP-RunIIFall15DR76-00031_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=SMP-RunIIFall15DR76-00031_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME SMP-RunIIFall15DR76-00031_2_cfg.py || exit $? ;\n\n# Parse values from SMP-RunIIFall15DR76-00031_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of SMP-RunIIFall15DR76-00031 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of SMP-RunIIFall15DR76-00031_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x SMP-RunIIFall15DR76-00031_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/SMP-RunIIFall15DR76-00031_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "1eb15c49b33ac90536ac14f847aeeec9",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "1eb15c49b33ac90536ac14f847af08db",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZZTo4L_13TeV-amcatnloFXFX-pythia8/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a SMP-RunIIFall15MiniAODv2-00007_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > SMP-RunIIFall15MiniAODv2-00007_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename SMP-RunIIFall15MiniAODv2-00007_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:SMP-RunIIFall15MiniAODv2-00007.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZZTo4L_13TeV-amcatnloFXFX-pythia8/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=SMP-RunIIFall15MiniAODv2-00007_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME SMP-RunIIFall15MiniAODv2-00007_1_cfg.py || exit $? ;\n\n# Parse values from SMP-RunIIFall15MiniAODv2-00007_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of SMP-RunIIFall15MiniAODv2-00007 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of SMP-RunIIFall15MiniAODv2-00007_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x SMP-RunIIFall15MiniAODv2-00007_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/SMP-RunIIFall15MiniAODv2-00007_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "744109404cdf471f6e79fd983bdf69e1",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZZTo4L_13TeV-amcatnloFXFX-pythia8/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21596",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZZTo4L_13TeV-amcatnloFXFX-pythia8/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZZTo4L_13TeV-amcatnloFXFX-pythia8 in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZZTo4L_13TeV_powheg_pythia8 in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Standard Model Physics",
      "secondary": [
        "ElectroWeak"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 6669188,
      "number_files": 154,
      "size": 154073886446
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid HIG-RunIIWinter15wmLHE-00130\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a HIG-RunIIWinter15wmLHE-00130_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > HIG-RunIIWinter15wmLHE-00130_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_16/src ] ; then\n  echo release CMSSW_7_1_16 already exists\nelse\n  scram p CMSSW CMSSW_7_1_16\nfi\ncd CMSSW_7_1_16/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/HIG-RunIIWinter15wmLHE-00130 --retry 3 --create-dirs -o Configuration/GenProduction/python/HIG-RunIIWinter15wmLHE-00130-fragment.py\n[ -s Configuration/GenProduction/python/HIG-RunIIWinter15wmLHE-00130-fragment.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/HIG-RunIIWinter15wmLHE-00130-fragment.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/HIG-RunIIWinter15wmLHE-00130-fragment.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 6.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 6.0000s = 6.0000s\n# Which adds up to 6.0000s per event\n# Single core events that fit in validation duration: 20160s / 6.0000s = 3360\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 3360 and 10000, but more than 0 -> 3360\n# It is estimated that this validation will produce: 3360 * 1.0000 = 3360 events\nEVENTS=3360\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/HIG-RunIIWinter15wmLHE-00130-fragment.py --python_filename HIG-RunIIWinter15wmLHE-00130_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:HIG-RunIIWinter15wmLHE-00130.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=HIG-RunIIWinter15wmLHE-00130_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME HIG-RunIIWinter15wmLHE-00130_1_cfg.py || exit $? ;\n\n# Parse values from HIG-RunIIWinter15wmLHE-00130_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of HIG-RunIIWinter15wmLHE-00130 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of HIG-RunIIWinter15wmLHE-00130_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x HIG-RunIIWinter15wmLHE-00130_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/HIG-RunIIWinter15wmLHE-00130_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: powheg.input",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21597/powheg.input"
            },
            {
              "cms_confdb_id": "27fb1f3caae564ab7ceee0fa340f3a95",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "powheg ZZ"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZZTo4L_13TeV_powheg_pythia8/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_16",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid HIG-RunIISummer15GS-00112\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a HIG-RunIISummer15GS-00112_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > HIG-RunIISummer15GS-00112_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20/src ] ; then\n  echo release CMSSW_7_1_20 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20\nfi\ncd CMSSW_7_1_20/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/HIG-RunIISummer15GS-00112 --retry 3 --create-dirs -o Configuration/GenProduction/python/HIG-RunIISummer15GS-00112-fragment.py\n[ -s Configuration/GenProduction/python/HIG-RunIISummer15GS-00112-fragment.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/HIG-RunIISummer15GS-00112-fragment.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/HIG-RunIISummer15GS-00112-fragment.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 50.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 50.0000s = 50.0000s\n# Which adds up to 50.0000s per event\n# Single core events that fit in validation duration: 20160s / 50.0000s = 403\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 403 and 10000, but more than 0 -> 403\n# It is estimated that this validation will produce: 403 * 1.0000 = 403 events\nEVENTS=403\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/HIG-RunIISummer15GS-00112-fragment.py --python_filename HIG-RunIISummer15GS-00112_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:HIG-RunIISummer15GS-00112.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZZTo4L_13TeV_powheg_pythia8/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=HIG-RunIISummer15GS-00112_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME HIG-RunIISummer15GS-00112_1_cfg.py || exit $? ;\n\n# Parse values from HIG-RunIISummer15GS-00112_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of HIG-RunIISummer15GS-00112 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of HIG-RunIISummer15GS-00112_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x HIG-RunIISummer15GS-00112_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/HIG-RunIISummer15GS-00112_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\nfrom Configuration.Generator.Pythia8PowhegEmissionVetoSettings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n                         maxEventsToPrint = cms.untracked.int32(1),\n                         pythiaPylistVerbosity = cms.untracked.int32(1),\n                         filterEfficiency = cms.untracked.double(1.0),\n                         pythiaHepMCVerbosity = cms.untracked.bool(False),\n                         comEnergy = cms.double(13000.),\n                         PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        pythia8PowhegEmissionVetoSettingsBlock,\n        processParameters = cms.vstring(\n            'POWHEG:nFinal = 2',   ## Number of final state particles\n                                   ## (BEFORE THE DECAYS) in the LHE\n                                   ## other than emitted extra parton\n          ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'pythia8PowhegEmissionVetoSettings',\n                                    'processParameters'\n                                    )\n        )\n                         )\n\nProductionFilterSequence = cms.Sequence(generator)\n",
              "title": "Hadronizer parameters",
              "url": "https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/HIG-RunIISummer15GS-00112"
            },
            {
              "cms_confdb_id": "c4d03e96b97e6067c54800f677aa3be4",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZZTo4L_13TeV_powheg_pythia8/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_20",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a HIG-RunIIFall15DR76-00899_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > HIG-RunIIFall15DR76-00899_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename HIG-RunIIFall15DR76-00899_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:HIG-RunIIFall15DR76-00899_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZZTo4L_13TeV_powheg_pythia8/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=HIG-RunIIFall15DR76-00899_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME HIG-RunIIFall15DR76-00899_1_cfg.py || exit $? ;\n\n# Parse values from HIG-RunIIFall15DR76-00899_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of HIG-RunIIFall15DR76-00899 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename HIG-RunIIFall15DR76-00899_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:HIG-RunIIFall15DR76-00899.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:HIG-RunIIFall15DR76-00899_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=HIG-RunIIFall15DR76-00899_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME HIG-RunIIFall15DR76-00899_2_cfg.py || exit $? ;\n\n# Parse values from HIG-RunIIFall15DR76-00899_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of HIG-RunIIFall15DR76-00899 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of HIG-RunIIFall15DR76-00899_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x HIG-RunIIFall15DR76-00899_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/HIG-RunIIFall15DR76-00899_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284abbc32",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "36d0857c8bdc7cc76a2f24d284ac4abf",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZZTo4L_13TeV_powheg_pythia8/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a HIG-RunIIFall15MiniAODv2-00171_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > HIG-RunIIFall15MiniAODv2-00171_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename HIG-RunIIFall15MiniAODv2-00171_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:HIG-RunIIFall15MiniAODv2-00171.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZZTo4L_13TeV_powheg_pythia8/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=HIG-RunIIFall15MiniAODv2-00171_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME HIG-RunIIFall15MiniAODv2-00171_1_cfg.py || exit $? ;\n\n# Parse values from HIG-RunIIFall15MiniAODv2-00171_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of HIG-RunIIFall15MiniAODv2-00171 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of HIG-RunIIFall15MiniAODv2-00171_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x HIG-RunIIFall15MiniAODv2-00171_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/HIG-RunIIFall15MiniAODv2-00171_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "744109404cdf471f6e79fd983bdf69e1",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZZTo4L_13TeV_powheg_pythia8/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21597",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZZTo4L_13TeV_powheg_pythia8/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZZTo4L_13TeV_powheg_pythia8 in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZZTo4Q_13TeV_amcatnloFXFX_madspin_pythia8 in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Standard Model Physics",
      "secondary": [
        "ElectroWeak"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 30707868,
      "number_files": 748,
      "size": 793217125642
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid HIG-RunIIWinter15wmLHE-00098\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a HIG-RunIIWinter15wmLHE-00098_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > HIG-RunIIWinter15wmLHE-00098_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_16_patch1/src ] ; then\n  echo release CMSSW_7_1_16_patch1 already exists\nelse\n  scram p CMSSW CMSSW_7_1_16_patch1\nfi\ncd CMSSW_7_1_16_patch1/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/HIG-RunIIWinter15wmLHE-00098 --retry 3 --create-dirs -o Configuration/GenProduction/python/HIG-RunIIWinter15wmLHE-00098-fragment.py\n[ -s Configuration/GenProduction/python/HIG-RunIIWinter15wmLHE-00098-fragment.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/HIG-RunIIWinter15wmLHE-00098-fragment.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/HIG-RunIIWinter15wmLHE-00098-fragment.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.8586s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.8586s = 0.8586s\n# Which adds up to 0.8586s per event\n# Single core events that fit in validation duration: 20160s / 0.8586s = 23481\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 23481 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/HIG-RunIIWinter15wmLHE-00098-fragment.py --python_filename HIG-RunIIWinter15wmLHE-00098_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:HIG-RunIIWinter15wmLHE-00098.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=HIG-RunIIWinter15wmLHE-00098_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME HIG-RunIIWinter15wmLHE-00098_1_cfg.py || exit $? ;\n\n# Parse values from HIG-RunIIWinter15wmLHE-00098_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of HIG-RunIIWinter15wmLHE-00098 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of HIG-RunIIWinter15wmLHE-00098_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x HIG-RunIIWinter15wmLHE-00098_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/HIG-RunIIWinter15wmLHE-00098_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21598/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21598/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21598/run_card.dat"
            },
            {
              "cms_confdb_id": "99463893bfa68894665f332745b19502",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "Madgraph5_aMC@NLO",
            "Madspin"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZZTo4Q_13TeV_amcatnloFXFX_madspin_pythia8/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_16_patch1",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid HIG-RunIISummer15GS-00079\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a HIG-RunIISummer15GS-00079_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > HIG-RunIISummer15GS-00079_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_18/src ] ; then\n  echo release CMSSW_7_1_18 already exists\nelse\n  scram p CMSSW CMSSW_7_1_18\nfi\ncd CMSSW_7_1_18/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/HIG-RunIISummer15GS-00079 --retry 3 --create-dirs -o Configuration/GenProduction/python/HIG-RunIISummer15GS-00079-fragment.py\n[ -s Configuration/GenProduction/python/HIG-RunIISummer15GS-00079-fragment.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/HIG-RunIISummer15GS-00079-fragment.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/HIG-RunIISummer15GS-00079-fragment.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 42.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 42.0000s = 42.0000s\n# Which adds up to 42.0000s per event\n# Single core events that fit in validation duration: 20160s / 42.0000s = 480\n# Produced events limit in McM is 10000\n# According to 0.6000 efficiency, validation should run 10000 / 0.6000 = 16666 events to reach the limit of 10000\n# Take the minimum of 480 and 16666, but more than 0 -> 480\n# It is estimated that this validation will produce: 480 * 0.6000 = 288 events\nEVENTS=480\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/HIG-RunIISummer15GS-00079-fragment.py --python_filename HIG-RunIISummer15GS-00079_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:HIG-RunIISummer15GS-00079.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZZTo4Q_13TeV_amcatnloFXFX_madspin_pythia8/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=HIG-RunIISummer15GS-00079_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME HIG-RunIISummer15GS-00079_1_cfg.py || exit $? ;\n\n# Parse values from HIG-RunIISummer15GS-00079_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of HIG-RunIISummer15GS-00079 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of HIG-RunIISummer15GS-00079_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x HIG-RunIISummer15GS-00079_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/HIG-RunIISummer15GS-00079_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "# https://github.com/cms-sw/cmssw/blob/CMSSW_7_1_X/Configuration/Generator/python/Hadronizer_TuneCUETP8M1_13TeV_aMCatNLO_FXFX_5f_max1j_max1p_LHE_pythia8_cff.py\n\nimport FWCore.ParameterSet.Config as cms\n\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\nfrom Configuration.Generator.Pythia8aMCatNLOSettings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n    maxEventsToPrint = cms.untracked.int32(1),\n    pythiaPylistVerbosity = cms.untracked.int32(1),\n    filterEfficiency = cms.untracked.double(1.0),\n    pythiaHepMCVerbosity = cms.untracked.bool(False),\n    comEnergy = cms.double(13000.),\n    PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        pythia8aMCatNLOSettingsBlock,\n        processParameters = cms.vstring(\n            'JetMatching:setMad = off',\n            'JetMatching:scheme = 1',\n            'JetMatching:merge = on',\n            'JetMatching:jetAlgorithm = 2',\n            'JetMatching:etaJetMax = 999.',\n            'JetMatching:coneRadius = 1.',\n            'JetMatching:slowJetPower = 1',\n            'JetMatching:qCut = 30.', #this is the actual merging scale\n            'JetMatching:doFxFx = on',\n            'JetMatching:qCutME = 20.',#this must match the ptj cut in the lhe generation step\n            'JetMatching:nQmatch = 5', #4 corresponds to 4-flavour scheme (no matching of b-quarks), 5 for 5-flavour scheme\n            'JetMatching:nJetMax = 1', #number of partons in born matrix element for highest multiplicity\n        ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'pythia8aMCatNLOSettings',\n                                    'processParameters',\n                                    )\n    )\n)",
              "title": "Hadronizer parameters",
              "url": "https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/HIG-RunIISummer15GS-00079"
            },
            {
              "cms_confdb_id": "59238b38278d45bcbd1d69610833d3d7",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZZTo4Q_13TeV_amcatnloFXFX_madspin_pythia8/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_18",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a HIG-RunIIFall15DR76-00162_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > HIG-RunIIFall15DR76-00162_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename HIG-RunIIFall15DR76-00162_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:HIG-RunIIFall15DR76-00162_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZZTo4Q_13TeV_amcatnloFXFX_madspin_pythia8/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=HIG-RunIIFall15DR76-00162_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME HIG-RunIIFall15DR76-00162_1_cfg.py || exit $? ;\n\n# Parse values from HIG-RunIIFall15DR76-00162_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of HIG-RunIIFall15DR76-00162 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename HIG-RunIIFall15DR76-00162_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:HIG-RunIIFall15DR76-00162.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:HIG-RunIIFall15DR76-00162_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=HIG-RunIIFall15DR76-00162_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME HIG-RunIIFall15DR76-00162_2_cfg.py || exit $? ;\n\n# Parse values from HIG-RunIIFall15DR76-00162_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of HIG-RunIIFall15DR76-00162 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of HIG-RunIIFall15DR76-00162_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x HIG-RunIIFall15DR76-00162_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/HIG-RunIIFall15DR76-00162_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "1e9350c183633616a34f138ead3d24c5",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "1e9350c183633616a34f138ead3dece6",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZZTo4Q_13TeV_amcatnloFXFX_madspin_pythia8/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a HIG-RunIIFall15MiniAODv2-00958_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > HIG-RunIIFall15MiniAODv2-00958_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename HIG-RunIIFall15MiniAODv2-00958_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:HIG-RunIIFall15MiniAODv2-00958.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZZTo4Q_13TeV_amcatnloFXFX_madspin_pythia8/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=HIG-RunIIFall15MiniAODv2-00958_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME HIG-RunIIFall15MiniAODv2-00958_1_cfg.py || exit $? ;\n\n# Parse values from HIG-RunIIFall15MiniAODv2-00958_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of HIG-RunIIFall15MiniAODv2-00958 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of HIG-RunIIFall15MiniAODv2-00958_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x HIG-RunIIFall15MiniAODv2-00958_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/HIG-RunIIFall15MiniAODv2-00958_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "263bc77d99136bb88051f7972daa8663",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZZTo4Q_13TeV_amcatnloFXFX_madspin_pythia8/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21598",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZZTo4Q_13TeV_amcatnloFXFX_madspin_pythia8/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZZTo4Q_13TeV_amcatnloFXFX_madspin_pythia8 in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZZ_TuneCUETP8M1_13TeV-pythia8 in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Standard Model Physics",
      "secondary": [
        "ElectroWeak"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 985600,
      "number_files": 24,
      "size": 22421760237
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid TOP-RunIISummer15GS-00003\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a TOP-RunIISummer15GS-00003_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > TOP-RunIISummer15GS-00003_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_19/src ] ; then\n  echo release CMSSW_7_1_19 already exists\nelse\n  scram p CMSSW CMSSW_7_1_19\nfi\ncd CMSSW_7_1_19/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/TOP-RunIISummer15GS-00003 --retry 3 --create-dirs -o Configuration/GenProduction/python/TOP-RunIISummer15GS-00003-fragment.py\n[ -s Configuration/GenProduction/python/TOP-RunIISummer15GS-00003-fragment.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/TOP-RunIISummer15GS-00003-fragment.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/TOP-RunIISummer15GS-00003-fragment.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 52.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 52.0000s = 52.0000s\n# Which adds up to 52.0000s per event\n# Single core events that fit in validation duration: 20160s / 52.0000s = 387\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 387 and 10000, but more than 0 -> 387\n# It is estimated that this validation will produce: 387 * 1.0000 = 387 events\nEVENTS=387\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/TOP-RunIISummer15GS-00003-fragment.py --python_filename TOP-RunIISummer15GS-00003_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:TOP-RunIISummer15GS-00003.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=TOP-RunIISummer15GS-00003_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME TOP-RunIISummer15GS-00003_1_cfg.py || exit $? ;\n\n# Parse values from TOP-RunIISummer15GS-00003_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of TOP-RunIISummer15GS-00003 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of TOP-RunIISummer15GS-00003_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x TOP-RunIISummer15GS-00003_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/TOP-RunIISummer15GS-00003_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\n\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8GeneratorFilter\",\n\tmaxEventsToPrint = cms.untracked.int32(1),\n\tpythiaPylistVerbosity = cms.untracked.int32(1),\n\tfilterEfficiency = cms.untracked.double(1.0),\n\tpythiaHepMCVerbosity = cms.untracked.bool(False),\n\tcomEnergy = cms.double(13000.0),\n\n\tcrossSection = cms.untracked.double(10.32),\n\t\n\tPythiaParameters = cms.PSet(\n            pythia8CommonSettingsBlock,\n            pythia8CUEP8M1SettingsBlock,\n\t        processParameters = cms.vstring(\n                        'WeakDoubleBoson:ffbar2gmZgmZ    = on',\n\t    ),\n            parameterSets = cms.vstring('pythia8CommonSettings',\n                                        'pythia8CUEP8M1Settings',\n                                        'processParameters',\n                                        )\n\t)\n)\n\nconfigurationMetadata = cms.untracked.PSet(\n    version = cms.untracked.string('\\$Revision$'),\n    name = cms.untracked.string('\\$Source$'),\n    annotation = cms.untracked.string('ZZ, 13 TeV, TuneCUETP8M1')\n)",
              "title": "Generator parameters",
              "url": "https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/TOP-RunIISummer15GS-00003"
            },
            {
              "cms_confdb_id": "03fc892f83f647bf942369a888f6cb29",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "pythia8"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZZ_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_19",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a TOP-RunIIFall15DR76-00005_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > TOP-RunIIFall15DR76-00005_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename TOP-RunIIFall15DR76-00005_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:TOP-RunIIFall15DR76-00005_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZZ_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=TOP-RunIIFall15DR76-00005_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME TOP-RunIIFall15DR76-00005_1_cfg.py || exit $? ;\n\n# Parse values from TOP-RunIIFall15DR76-00005_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of TOP-RunIIFall15DR76-00005 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename TOP-RunIIFall15DR76-00005_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:TOP-RunIIFall15DR76-00005.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:TOP-RunIIFall15DR76-00005_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=TOP-RunIIFall15DR76-00005_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME TOP-RunIIFall15DR76-00005_2_cfg.py || exit $? ;\n\n# Parse values from TOP-RunIIFall15DR76-00005_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of TOP-RunIIFall15DR76-00005 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of TOP-RunIIFall15DR76-00005_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x TOP-RunIIFall15DR76-00005_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/TOP-RunIIFall15DR76-00005_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "c803877eb2d4bb93b2a9594d663a09a6",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "c803877eb2d4bb93b2a9594d663a2c71",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZZ_TuneCUETP8M1_13TeV-pythia8/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a TOP-RunIIFall15MiniAODv2-00003_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > TOP-RunIIFall15MiniAODv2-00003_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename TOP-RunIIFall15MiniAODv2-00003_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:TOP-RunIIFall15MiniAODv2-00003.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZZ_TuneCUETP8M1_13TeV-pythia8/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=TOP-RunIIFall15MiniAODv2-00003_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME TOP-RunIIFall15MiniAODv2-00003_1_cfg.py || exit $? ;\n\n# Parse values from TOP-RunIIFall15MiniAODv2-00003_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of TOP-RunIIFall15MiniAODv2-00003 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of TOP-RunIIFall15MiniAODv2-00003_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x TOP-RunIIFall15MiniAODv2-00003_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/TOP-RunIIFall15MiniAODv2-00003_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "744109404cdf471f6e79fd983bdf69e1",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZZ_TuneCUETP8M1_13TeV-pythia8/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21600",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZZ_TuneCUETP8M1_13TeV-pythia8/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZZ_TuneCUETP8M1_13TeV-pythia8 in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  },
  {
    "abstract": {
      "description": "<p>Simulated dataset ZZZ_TuneCUETP8M1_13TeV-amcatnlo-pythia8 in MINIAODSIM format for 2015 collision data.</p><p>See the description of the simulated dataset names in: <a href=\"/about/CMS-Simulated-Dataset-Names\">About CMS simulated dataset names</a>.</p><p>These simulated datasets correspond to the collision data collected by the CMS experiment in 2015.</p>"
    },
    "accelerator": "CERN-LHC",
    "categories": {
      "primary": "Standard Model Physics",
      "secondary": [
        "ElectroWeak"
      ],
      "source": "CMS Collaboration"
    },
    "collaboration": {
      "name": "CMS Collaboration",
      "recid": ""
    },
    "collections": [
      "CMS-Simulated-Datasets"
    ],
    "collision_information": {
      "energy": "13TeV",
      "type": "pp"
    },
    "date_created": [
      "2015"
    ],
    "date_published": "2021",
    "date_reprocessed": "2015",
    "distribution": {
      "formats": [
        "miniaodsim",
        "root"
      ],
      "number_events": 250000,
      "number_files": 11,
      "size": 7299176996
    },
    "experiment": "CMS",
    "license": {
      "attribution": "CC0"
    },
    "methodology": {
      "description": "<p>These data were generated in several steps (see also <a href=\"/docs/cms-mc-production-overview\">CMS Monte Carlo production overview</a>):</p>",
      "steps": [
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid SUS-RunIIWinter15wmLHE-00058\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a SUS-RunIIWinter15wmLHE-00058_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > SUS-RunIIWinter15wmLHE-00058_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_19/src ] ; then\n  echo release CMSSW_7_1_19 already exists\nelse\n  scram p CMSSW CMSSW_7_1_19\nfi\ncd CMSSW_7_1_19/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/SUS-RunIIWinter15wmLHE-00058 --retry 3 --create-dirs -o Configuration/GenProduction/python/SUS-RunIIWinter15wmLHE-00058-fragment.py\n[ -s Configuration/GenProduction/python/SUS-RunIIWinter15wmLHE-00058-fragment.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/SUS-RunIIWinter15wmLHE-00058-fragment.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/SUS-RunIIWinter15wmLHE-00058-fragment.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 0.3642s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 0.3642s = 0.3642s\n# Which adds up to 0.3642s per event\n# Single core events that fit in validation duration: 20160s / 0.3642s = 55355\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 55355 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/SUS-RunIIWinter15wmLHE-00058-fragment.py --python_filename SUS-RunIIWinter15wmLHE-00058_1_cfg.py --eventcontent LHE --customise Configuration/DataProcessing/Utils.addMonitoring --datatier LHE --fileout file:SUS-RunIIWinter15wmLHE-00058.root --conditions MCRUN2_71_V1::All --step LHE --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=SUS-RunIIWinter15wmLHE-00058_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME SUS-RunIIWinter15wmLHE-00058_1_cfg.py || exit $? ;\n\n# Parse values from SUS-RunIIWinter15wmLHE-00058_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of SUS-RunIIWinter15wmLHE-00058 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of SUS-RunIIWinter15wmLHE-00058_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x SUS-RunIIWinter15wmLHE-00058_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/SUS-RunIIWinter15wmLHE-00058_test.sh)\n",
              "title": "Production script"
            },
            {
              "title": "Generator parameters: param_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21599/param_card.dat"
            },
            {
              "title": "Generator parameters: proc_card_mg5.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21599/proc_card_mg5.dat"
            },
            {
              "title": "Generator parameters: run_card.dat",
              "url": "/eos/opendata/cms/lhe_generators/2015-sim/gridpacks/21599/run_card.dat"
            },
            {
              "cms_confdb_id": "7ccc70fae700c795412b78429ad477f7",
              "process": "LHE",
              "title": "Configuration file"
            }
          ],
          "generators": [
            "aMCatNLO"
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZZZ_TuneCUETP8M1_13TeV-amcatnlo-pythia8/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE",
          "release": "CMSSW_7_1_19",
          "type": "LHE"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# GEN Script begin\nrm -f request_fragment_check.py\nwget -q https://raw.githubusercontent.com/cms-sw/genproductions/master/bin/utils/request_fragment_check.py\nchmod +x request_fragment_check.py\n./request_fragment_check.py --bypass_status --prepid SUS-RunIISummer15GS-00112\nGEN_ERR=$?\nif [ $GEN_ERR -ne 0 ]; then\n  echo \"GEN Checking Script returned exit code $GEN_ERR which means there are $GEN_ERR errors\"\n  echo \"Validation WILL NOT RUN\"\n  echo \"Please correct errors in the request and run validation again\"\n  exit $GEN_ERR\nfi\necho \"Running VALIDATION. GEN Request Checking Script returned no errors\"\n# GEN Script end\n\n# Dump actual test code to a SUS-RunIISummer15GS-00112_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > SUS-RunIISummer15GS-00112_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc481\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_1_20_patch3/src ] ; then\n  echo release CMSSW_7_1_20_patch3 already exists\nelse\n  scram p CMSSW CMSSW_7_1_20_patch3\nfi\ncd CMSSW_7_1_20_patch3/src\neval `scram runtime -sh`\n\n# Download fragment from McM\ncurl -s -k https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/SUS-RunIISummer15GS-00112 --retry 3 --create-dirs -o Configuration/GenProduction/python/SUS-RunIISummer15GS-00112-fragment.py\n[ -s Configuration/GenProduction/python/SUS-RunIISummer15GS-00112-fragment.py ] || exit $?;\n\n# Check if fragment contais gridpack path ant that it is in cvmfs\nif grep -q \"gridpacks\" Configuration/GenProduction/python/SUS-RunIISummer15GS-00112-fragment.py; then\n  if ! grep -q \"/cvmfs/cms.cern.ch/phys_generator/gridpacks\" Configuration/GenProduction/python/SUS-RunIISummer15GS-00112-fragment.py; then\n    echo \"Gridpack inside fragment is not in cvmfs.\"\n    exit -1\n  fi\nfi\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 51.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 51.0000s = 51.0000s\n# Which adds up to 51.0000s per event\n# Single core events that fit in validation duration: 20160s / 51.0000s = 395\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 395 and 10000, but more than 0 -> 395\n# It is estimated that this validation will produce: 395 * 1.0000 = 395 events\nEVENTS=395\n\n\n# cmsDriver command\ncmsDriver.py Configuration/GenProduction/python/SUS-RunIISummer15GS-00112-fragment.py --python_filename SUS-RunIISummer15GS-00112_1_cfg.py --eventcontent RAWSIM --customise SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1,Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM --fileout file:SUS-RunIISummer15GS-00112.root --conditions MCRUN2_71_V1::All --beamspot Realistic50ns13TeVCollision --step GEN,SIM --magField 38T_PostLS1 --filein \"dbs:/ZZZ_TuneCUETP8M1_13TeV-amcatnlo-pythia8/RunIIWinter15wmLHE-MCRUN2_71_V1-v1/LHE\" --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=SUS-RunIISummer15GS-00112_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME SUS-RunIISummer15GS-00112_1_cfg.py || exit $? ;\n\n# Parse values from SUS-RunIISummer15GS-00112_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of SUS-RunIISummer15GS-00112 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of SUS-RunIISummer15GS-00112_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x SUS-RunIISummer15GS-00112_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/SUS-RunIISummer15GS-00112_test.sh)\n",
              "title": "Production script"
            },
            {
              "script": "import FWCore.ParameterSet.Config as cms\n\nfrom Configuration.Generator.Pythia8CommonSettings_cfi import *\nfrom Configuration.Generator.Pythia8CUEP8M1Settings_cfi import *\nfrom Configuration.Generator.Pythia8aMCatNLOSettings_cfi import *\n\ngenerator = cms.EDFilter(\"Pythia8HadronizerFilter\",\n    maxEventsToPrint = cms.untracked.int32(1),\n    pythiaPylistVerbosity = cms.untracked.int32(1),\n    filterEfficiency = cms.untracked.double(1.0),\n    pythiaHepMCVerbosity = cms.untracked.bool(False),\n    comEnergy = cms.double(13000.),\n    PythiaParameters = cms.PSet(\n        pythia8CommonSettingsBlock,\n        pythia8CUEP8M1SettingsBlock,\n        pythia8aMCatNLOSettingsBlock,\n        processParameters = cms.vstring(\n            'TimeShower:nPartonsInBorn = 0', #number of coloured particles (before resonance decays) in born matrix element\n        ),\n        parameterSets = cms.vstring('pythia8CommonSettings',\n                                    'pythia8CUEP8M1Settings',\n                                    'pythia8aMCatNLOSettings',\n                                    'processParameters',\n                                    )\n    )\n)\n\n",
              "title": "Hadronizer parameters",
              "url": "https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get_fragment/SUS-RunIISummer15GS-00112"
            },
            {
              "cms_confdb_id": "12e2510b340a993fb46563ca9355d873",
              "process": "SIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "MCRUN2_71_V1::All",
          "output_dataset": "/ZZZ_TuneCUETP8M1_13TeV-amcatnlo-pythia8/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM",
          "release": "CMSSW_7_1_20_patch3",
          "type": "SIM"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a SUS-RunIIFall15DR76-00119_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > SUS-RunIIFall15DR76-00119_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_1/src ] ; then\n  echo release CMSSW_7_6_1 already exists\nelse\n  scram p CMSSW CMSSW_7_6_1\nfi\ncd CMSSW_7_6_1/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 17.0000s, 17.0000s\n# Threads for each sequence: 1, 1\n# Time per event for single thread for each sequence: 1 * 17.0000s = 17.0000s, 1 * 17.0000s = 17.0000s\n# Which adds up to 34.0000s per event\n# Single core events that fit in validation duration: 20160s / 34.0000s = 592\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 592 and 10000, but more than 0 -> 592\n# It is estimated that this validation will produce: 592 * 1.0000 = 592 events\nEVENTS=592\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename SUS-RunIIFall15DR76-00119_1_cfg.py --eventcontent RAWSIM --pileup 2015_25ns_FallMC_matchData_PoissonOOTPU --customise Configuration/DataProcessing/Utils.addMonitoring --datatier GEN-SIM-RAW --fileout file:SUS-RunIIFall15DR76-00119_0.root --pileup_input \"dbs:/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM\" --conditions 76X_mcRun2_asymptotic_v12 --step DIGI,L1,DIGI2RAW,HLT:@frozen25ns --filein \"dbs:/ZZZ_TuneCUETP8M1_13TeV-amcatnlo-pythia8/RunIISummer15GS-MCRUN2_71_V1-v1/GEN-SIM\" --era Run2_25ns --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=SUS-RunIIFall15DR76-00119_0_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME SUS-RunIIFall15DR76-00119_1_cfg.py || exit $? ;\n\n# Parse values from SUS-RunIIFall15DR76-00119_0_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of SUS-RunIIFall15DR76-00119 sequence 1/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# cmsDriver command\ncmsDriver.py  --python_filename SUS-RunIIFall15DR76-00119_2_cfg.py --eventcontent AODSIM,DQM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier AODSIM,DQMIO --fileout file:SUS-RunIIFall15DR76-00119.root --conditions 76X_mcRun2_asymptotic_v12 --step RAW2DIGI,L1Reco,RECO,EI,DQM:DQMOfflinePOGMC --filein file:SUS-RunIIFall15DR76-00119_0.root --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=SUS-RunIIFall15DR76-00119_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME SUS-RunIIFall15DR76-00119_2_cfg.py || exit $? ;\n\n# Parse values from SUS-RunIIFall15DR76-00119_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of SUS-RunIIFall15DR76-00119 sequence 2/2\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of SUS-RunIIFall15DR76-00119_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x SUS-RunIIFall15DR76-00119_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/SUS-RunIIFall15DR76-00119_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "95297f0e5af6ef9d7c80e61fa428d97b",
              "process": "HLT",
              "title": "Configuration file"
            },
            {
              "cms_confdb_id": "95297f0e5af6ef9d7c80e61fa429ff4f",
              "process": "RECO",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZZZ_TuneCUETP8M1_13TeV-amcatnlo-pythia8/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM",
          "release": "CMSSW_7_6_1",
          "type": "HLT RECO"
        },
        {
          "configuration_files": [
            {
              "script": "#!/bin/bash\n\n# Dump actual test code to a SUS-RunIIFall15MiniAODv2-00112_test.sh file that can be run in Singularity\ncat <<'EndOfTestFile' > SUS-RunIIFall15MiniAODv2-00112_test.sh\n#!/bin/bash\n\nexport SCRAM_ARCH=slc6_amd64_gcc493\n\nsource /cvmfs/cms.cern.ch/cmsset_default.sh\nif [ -r CMSSW_7_6_3/src ] ; then\n  echo release CMSSW_7_6_3 already exists\nelse\n  scram p CMSSW CMSSW_7_6_3\nfi\ncd CMSSW_7_6_3/src\neval `scram runtime -sh`\n\nscram b\ncd ../..\n\n# Maximum validation duration: 28800s\n# Margin for validation duration: 30%\n# Validation duration with margin: 28800 * (1 - 0.30) = 20160s\n# Time per event for each sequence: 1.0000s\n# Threads for each sequence: 1\n# Time per event for single thread for each sequence: 1 * 1.0000s = 1.0000s\n# Which adds up to 1.0000s per event\n# Single core events that fit in validation duration: 20160s / 1.0000s = 20160\n# Produced events limit in McM is 10000\n# According to 1.0000 efficiency, validation should run 10000 / 1.0000 = 10000 events to reach the limit of 10000\n# Take the minimum of 20160 and 10000, but more than 0 -> 10000\n# It is estimated that this validation will produce: 10000 * 1.0000 = 10000 events\nEVENTS=10000\n\n\n# cmsDriver command\ncmsDriver.py  --python_filename SUS-RunIIFall15MiniAODv2-00112_1_cfg.py --eventcontent MINIAODSIM --customise Configuration/DataProcessing/Utils.addMonitoring --datatier MINIAODSIM --fileout file:SUS-RunIIFall15MiniAODv2-00112.root --conditions 76X_mcRun2_asymptotic_v12 --step PAT --filein \"dbs:/ZZZ_TuneCUETP8M1_13TeV-amcatnlo-pythia8/RunIIFall15DR76-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/AODSIM\" --era Run2_25ns --runUnscheduled --no_exec --mc -n $EVENTS || exit $? ;\n\n# Run generated config\nREPORT_NAME=SUS-RunIIFall15MiniAODv2-00112_report.xml\n# Run the cmsRun\ncmsRun -e -j $REPORT_NAME SUS-RunIIFall15MiniAODv2-00112_1_cfg.py || exit $? ;\n\n# Parse values from SUS-RunIIFall15MiniAODv2-00112_report.xml report\nprocessedEvents=$(grep -Po \"(?<=<Metric Name=\\\"NumberEvents\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nproducedEvents=$(grep -Po \"(?<=<TotalEvents>)(\\d*)(?=</TotalEvents>)\" $REPORT_NAME | tail -n 1)\nthreads=$(grep -Po \"(?<=<Metric Name=\\\"NumberOfThreads\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueRss=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueRss\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\npeakValueVsize=$(grep -Po \"(?<=<Metric Name=\\\"PeakValueVsize\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSize=$(grep -Po \"(?<=<Metric Name=\\\"Timing-tstoragefile-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalSizeAlt=$(grep -Po \"(?<=<Metric Name=\\\"Timing-file-write-totalMegabytes\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobTime=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\ntotalJobCPU=$(grep -Po \"(?<=<Metric Name=\\\"TotalJobCPU\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\neventThroughput=$(grep -Po \"(?<=<Metric Name=\\\"EventThroughput\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\navgEventTime=$(grep -Po \"(?<=<Metric Name=\\\"AvgEventTime\\\" Value=\\\")(.*)(?=\\\"/>)\" $REPORT_NAME | tail -n 1)\nif [ -z \"$threads\" ]; then\n  echo \"Could not find NumberOfThreads in report, defaulting to 1\"\n  threads=1\nfi\nif [ -z \"$eventThroughput\" ]; then\n  eventThroughput=$(bc -l <<< \"scale=4; 1 / ($avgEventTime / $threads)\")\nfi\nif [ -z \"$totalSize\" ]; then\n  totalSize=$totalSizeAlt\nfi\nif [ -z \"$processedEvents\" ]; then\n  processedEvents=$EVENTS\nfi\necho \"Validation report of SUS-RunIIFall15MiniAODv2-00112 sequence 1/1\"\necho \"Processed events: $processedEvents\"\necho \"Produced events: $producedEvents\"\necho \"Threads: $threads\"\necho \"Peak value RSS: $peakValueRss MB\"\necho \"Peak value Vsize: $peakValueVsize MB\"\necho \"Total size: $totalSize MB\"\necho \"Total job time: $totalJobTime s\"\necho \"Total CPU time: $totalJobCPU s\"\necho \"Event throughput: $eventThroughput\"\necho \"CPU efficiency: \"$(bc -l <<< \"scale=2; ($totalJobCPU * 100) / ($threads * $totalJobTime)\")\" %\"\necho \"Size per event: \"$(bc -l <<< \"scale=4; ($totalSize * 1024 / $producedEvents)\")\" kB\"\necho \"Time per event: \"$(bc -l <<< \"scale=4; (1 / $eventThroughput)\")\" s\"\necho \"Filter efficiency percent: \"$(bc -l <<< \"scale=8; ($producedEvents * 100) / $processedEvents\")\" %\"\necho \"Filter efficiency fraction: \"$(bc -l <<< \"scale=10; ($producedEvents) / $processedEvents\")\n\n# End of SUS-RunIIFall15MiniAODv2-00112_test.sh file\nEndOfTestFile\n\n# Make file executable\nchmod +x SUS-RunIIFall15MiniAODv2-00112_test.sh\n\n# Run in SLC6 container\n# Mount afs, eos, cvmfs\n# Mount /etc/grid-security for xrootd\nexport SINGULARITY_CACHEDIR=\"/tmp/$(whoami)/singularity\"\nsingularity run -B /afs -B /eos -B /cvmfs -B /etc/grid-security --home $PWD:$PWD /cvmfs/unpacked.cern.ch/registry.hub.docker.com/cmssw/slc6:amd64 $(echo $(pwd)/SUS-RunIIFall15MiniAODv2-00112_test.sh)\n",
              "title": "Production script"
            },
            {
              "cms_confdb_id": "8a116aab3e9d220dbe227045ccbab3e3",
              "process": "MINIAODSIM",
              "title": "Configuration file"
            }
          ],
          "global_tag": "76X_mcRun2_asymptotic_v12",
          "output_dataset": "/ZZZ_TuneCUETP8M1_13TeV-amcatnlo-pythia8/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
          "release": "CMSSW_7_6_3",
          "type": "MINIAODSIM"
        }
      ]
    },
    "pileup": {
      "description": "<p>To make these simulated data comparable with the collision data, <a href=\"/docs/cms-guide-pileup-simulation\">pile-up events</a> are added to the simulated event in this step.</p>",
      "links": [
        {
          "recid": "22314",
          "title": "/MinBias_TuneCUETP8M1_13TeV-pythia8/RunIISummer15GS-MCRUN2_71_V1-v2/GEN-SIM"
        }
      ]
    },
    "publisher": "CERN Open Data Portal",
    "recid": "21599",
    "run_period": [
      "Run2015C",
      "Run2015D"
    ],
    "system_details": {
      "global_tag": "76X_mcRun2_asymptotic_RunIIFall15DR76_v1",
      "release": "CMSSW_7_6_7"
    },
    "title": "/ZZZ_TuneCUETP8M1_13TeV-amcatnlo-pythia8/RunIIFall15MiniAODv2-PU25nsData2015v1_76X_mcRun2_asymptotic_v12-v1/MINIAODSIM",
    "title_additional": "Simulated dataset ZZZ_TuneCUETP8M1_13TeV-amcatnlo-pythia8 in MINIAODSIM format for 2015 collision data",
    "type": {
      "primary": "Dataset",
      "secondary": [
        "Simulated"
      ]
    },
    "usage": {
      "description": "You can access these data through the CMS Open Data container or the CMS Virtual Machine. See the instructions for setting up one of the two alternative environments and getting started in",
      "links": [
        {
          "description": "Running CMS analysis code using Docker",
          "url": "/docs/cms-guide-docker"
        },
        {
          "description": "How to install the CMS Virtual Machine",
          "url": "/docs/cms-virtual-machine-2015"
        },
        {
          "description": "Getting started with CMS open data",
          "url": "/docs/cms-getting-started-2015"
        }
      ]
    },
    "validation": {
      "description": "The generation and simulation of Monte Carlo data has been validated through general CMS validation procedures."
    }
  }
]
